[{"path":"/articles/A100-DoseSelectors.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using escalation","text":"provide dose selection decisions, escalation package daisy-chains together objects support common interface, deriving type selector. vignette demonstrates entire interface supported selector objects. purpose illustration, use BOIN selector functions work every type dose selector escalation.","code":"library(escalation) #> Loading required package: magrittr model <- get_boin(num_doses = 5, target = 0.3) fit <- model %>% fit('1NN 2NN 3NT 2NT')"},{"path":"/articles/A100-DoseSelectors.html","id":"supported-interface","dir":"Articles","previous_headings":"","what":"Supported Interface","title":"Using escalation","text":"Target toxicity rate: number patients treated: Cohort IDs treated patients: code infers spaces outcome string dose-decision made second, fourth, sixth patients. Integers representing dose-levels given: Bits representing whether toxicity event observed: total number toxicities seen doses combined: data-frame containing information: number doses investigation: indices dose-levels investigation: plus textual representations dose-levels investigation: monotherapy setting, textual representations offer little integer dose-indices. However, subsequent articles see value dose_strings succinct way represent doses treatment combination dose-finding trials. dose-level recommended next patient: seeing toxicity doses 2 3, design sensibly sticks dose 2 time . logical value whether accrual continue: infer stopping condition yet triggered. number patients treated dose: number patients treated recommended dose: proportion patients treated dose: total number toxicities seen dose: empirical toxicity rate, .e. number toxicities divided number patients: model-derived expected toxicity rate dose: BOIN design makes estimate doses yet administered. model-derived median toxicity rate dose: BOIN actually calculate posterior median estimates. Sometimes necessary return missing values functionality supported model. Median estimates added BOIN class due course. model-derived quantile toxicity rate dose: BOIN calculate either. also added. posterior probability toxicity rate exceeds threshold value, 50%: , estimate made non-administered doses. see model estimates trivial chance toxicity rate lowest dose exceeds 50%. Learn model supports sampling posterior: BOIN model support sampling. , run prob_tox_samples(fit). can also call standard generic functions: cast tidyverse tibble:","code":"tox_target(fit) #> [1] 0.3 num_patients(fit) #> [1] 8 cohort(fit) #> [1] 1 1 2 2 3 3 4 4 doses_given(fit) #> [1] 1 1 2 2 3 3 2 2 tox(fit) #> [1] 0 0 0 0 0 1 0 1 num_tox(fit) #> [1] 2 model_frame(fit) #> # A tibble: 8 × 5 #>   patient cohort  dose   tox weight #>     <int>  <int> <int> <int>  <dbl> #> 1       1      1     1     0      1 #> 2       2      1     1     0      1 #> 3       3      2     2     0      1 #> 4       4      2     2     0      1 #> 5       5      3     3     0      1 #> 6       6      3     3     1      1 #> 7       7      4     2     0      1 #> 8       8      4     2     1      1 num_doses(fit) #> [1] 5 dose_indices(fit) #> [1] 1 2 3 4 5 dose_strings(fit) #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" recommended_dose(fit) #> [1] 2 continue(fit) #> [1] TRUE n_at_dose(fit) #> [1] 2 4 2 0 0 n_at_recommended_dose(fit) #> [1] 4 prob_administer(fit) #>    1    2    3    4    5  #> 0.25 0.50 0.25 0.00 0.00 tox_at_dose(fit) #> [1] 0 1 1 0 0 empiric_tox_rate(fit) #> [1] 0.00 0.25 0.50  NaN  NaN mean_prob_tox(fit) #> [1] 0.02 0.26 0.50   NA   NA median_prob_tox(fit) #>    1    2    3    4    5  #> 0.01 0.21 0.50   NA   NA prob_tox_quantile(fit, 0.9) #>    1    2    3    4    5  #> 0.05 0.54 0.89   NA   NA prob_tox_exceeds(fit, 0.5) #> [1] 0.009391185 0.129051871 0.500000000          NA          NA supports_sampling(fit) #> [1] FALSE print(fit) #> Patient-level data: #> # A tibble: 8 × 5 #>   Patient Cohort  Dose   Tox Weight #>     <int>  <int> <int> <int>  <dbl> #> 1       1      1     1     0      1 #> 2       2      1     1     0      1 #> 3       3      2     2     0      1 #> 4       4      2     2     0      1 #> 5       5      3     3     0      1 #> 6       6      3     3     1      1 #> 7       7      4     2     0      1 #> 8       8      4     2     1      1 #>  #> Dose-level data: #> # A tibble: 6 × 8 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0             0             0               0    TRUE       #> 2 1          0     2             0             0.02            0.01 TRUE       #> 3 2          1     4             0.25          0.26            0.21 TRUE       #> 4 3          1     2             0.5           0.5             0.5  TRUE       #> 5 4          0     0           NaN            NA              NA    TRUE       #> 6 5          0     0           NaN            NA              NA    TRUE       #> # ℹ 1 more variable: recommended <lgl> #>  #> The model targets a toxicity level of 0.3. #> The model advocates continuing at dose 2. summary(fit) #> # A tibble: 6 × 8 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0             0             0               0    TRUE       #> 2 1          0     2             0             0.02            0.01 TRUE       #> 3 2          1     4             0.25          0.26            0.21 TRUE       #> 4 3          1     2             0.5           0.5             0.5  TRUE       #> 5 4          0     0           NaN            NA              NA    TRUE       #> 6 5          0     0           NaN            NA              NA    TRUE       #> # ℹ 1 more variable: recommended <lgl> library(tibble) #> Warning: package 'tibble' was built under R version 4.3.3  as_tibble(fit) #> # A tibble: 6 × 8 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0             0             0               0    TRUE       #> 2 1          0     2             0             0.02            0.01 TRUE       #> 3 2          1     4             0.25          0.26            0.21 TRUE       #> 4 3          1     2             0.5           0.5             0.5  TRUE       #> 5 4          0     0           NaN            NA              NA    TRUE       #> 6 5          0     0           NaN            NA              NA    TRUE       #> # ℹ 1 more variable: recommended <lgl>"},{"path":"/articles/A205-CRM.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CRM - Continual Reassessment Method","text":"continual reassessment method (CRM) introduced O’Quigley, Pepe, Fisher (1990). proved truly seminal dose-finding design, spurring many revisions, variants imitations.","code":""},{"path":"/articles/A205-CRM.html","id":"summary-of-the-crm-design","dir":"Articles","previous_headings":"","what":"Summary of the CRM Design","title":"CRM - Continual Reassessment Method","text":"Pinning finger CRM design complicated many versions years. simplest, CRM dose-escalation design seeks dose probability toxicity closest pre-specified target toxicity rate, pTp_T, homogeneous patient group. hallmark unifies CRM variants assumption probability toxicity, pip_i, iith dose, xix_i, can modelled using smooth mathematical function: pi=F(xi,θ), p_i = F(x_i, \\theta), θ\\theta general vector parameters. Priors specified θ\\theta, dose posterior estimate pip_i closest pTp_T iteratively recommended next patient(s). Different variants CRM use different forms FF. consider briefly now.","code":""},{"path":"/articles/A205-CRM.html","id":"hyperbolic-tangent-model","dir":"Articles","previous_headings":"Summary of the CRM Design","what":"Hyperbolic tangent model","title":"CRM - Continual Reassessment Method","text":"O’Quigley, Pepe, Fisher (1990) first introduced method using pi=(tanh(xi)+12)β, p_i = \\left( \\frac{\\tanh{(x_i)} + 1}{2} \\right)^\\beta, exponential prior placed β\\beta.","code":""},{"path":"/articles/A205-CRM.html","id":"empiric-model-aka-power-model","dir":"Articles","previous_headings":"Summary of the CRM Design","what":"Empiric model (aka power model)","title":"CRM - Continual Reassessment Method","text":"pi=xiexp(β), p_i = x_i^{\\exp(\\beta)}, dose xi∈(0,1)x_i \\(0, 1);","code":""},{"path":"/articles/A205-CRM.html","id":"one-parameter-logistic-model","dir":"Articles","previous_headings":"Summary of the CRM Design","what":"One-parameter logistic model","title":"CRM - Continual Reassessment Method","text":"logitpi=a0+exp(β)xi, \\text{logit} p_i = a_0 + \\exp{(\\beta)} x_i, a0a_0 pre-specified constant, xi∈ℝx_i \\\\mathbb{R}.","code":""},{"path":"/articles/A205-CRM.html","id":"two-parameter-logistic-model","dir":"Articles","previous_headings":"Summary of the CRM Design","what":"Two-parameter logistic model","title":"CRM - Continual Reassessment Method","text":"logitpi=α+exp(β)xi, \\text{logit} p_i = \\alpha + \\exp{(\\beta)} x_i,  xi∈ℝx_i \\\\mathbb{R}. model considerations include:","code":""},{"path":"/articles/A205-CRM.html","id":"priors","dir":"Articles","previous_headings":"Summary of the CRM Design","what":"Priors","title":"CRM - Continual Reassessment Method","text":"models, different distributions may used parameter priors.","code":""},{"path":"/articles/A205-CRM.html","id":"toxicity-skeletons-and-standardised-doses","dir":"Articles","previous_headings":"Summary of the CRM Design","what":"Toxicity skeletons and standardised doses","title":"CRM - Continual Reassessment Method","text":"xix_i dose variables models reflect raw dose quantities given patients. example, dose 10mg, use x=10. Instead, skeleton containing estimates probabilities toxicity doses identified. skeleton reflect investigators’ prior expectations toxicities doses; reflect expectations doses others interpolated plausible way. xix_i calculated model-estimated probabilities toxicity parameters taking prior mean values match skeleton. much clearer example. five dose setting, let skeleton π=(0.05,0.1,0.2,0.4,0.7)\\pi = (0.05, 0.1, 0.2, 0.4, 0.7). , investigators believe trial commences probbaility toxicity second dose 10%, . Let us assume using one-parameter logistic model a0=3a_0 = 3 β∼N(0,1)\\beta ~ \\sim N(0, 1). require logitπi=3+e0xi=3+xi, \\text{logit} \\pi_i = 3 + e^0 x_i = 3 + x_i, .e. xi=logitπi−3. x_i = \\text{logit} \\pi_i - 3. yields vector standardised doses x=(−5.94,−5.20,−4.39,−3.41,−2.15)x = (-5.94, -5.20, -4.39, -3.41, -2.15). Equivalent transformations can derived model forms. xix_i used covariates model-fitting. CRM users specify skeleton, π\\pi, parameter priors. , software calculates xix_i. actual doses given patients SI units actually feature model.","code":""},{"path":"/articles/A205-CRM.html","id":"implementation-in-escalation","dir":"Articles","previous_headings":"","what":"Implementation in escalation","title":"CRM - Continual Reassessment Method","text":"escalation simply aims give common interface dose-selection models facilitate grammar specifying dose-finding trial designs. possible, delegates mathematical model-fitting existing R packages. several R packages implement CRM models. two used escalation dfcrm package (Y. K. Cheung 2011; K. Cheung 2013); trialr package (Brock 2019, 2020). different strengths weaknesses, suitable different scenarios. discuss now.","code":""},{"path":"/articles/A205-CRM.html","id":"dfcrm","dir":"Articles","previous_headings":"Implementation in escalation","what":"dfcrm","title":"CRM - Continual Reassessment Method","text":"dfcrm offers: empiric model normal prior β\\beta; one-parameter logistic model normal prior β\\beta. dfcrm models fit escalation using get_dfcrm function. Examples given .","code":""},{"path":"/articles/A205-CRM.html","id":"trialr","dir":"Articles","previous_headings":"Implementation in escalation","what":"trialr","title":"CRM - Continual Reassessment Method","text":"trialr offers: empiric model normal prior β\\beta; one-parameter logistic model normal prior β\\beta; one-parameter logistic model gamma prior β\\beta; two-parameter logistic model normal priors α\\alpha β\\beta. trialr models fit escalation using get_trialr_crm function. Let us commence replicating example p.21 Y. K. Cheung (2011). choose following parameters: Let us define model fitter using dfcrm package: fitter using trialr package: Names function parameters skeleton, target, model standardised escalation fundamental. parameters (.e. second lines examples) passed onwards model-fitting functions dfcrm trialr. can see parameter names vary approaches. E.g., dfcrm calls intcpt, trialr calls a0. Refer documentation crm function dfcrm stan_crm trialr information. fit models notional outcomes described source text: dose recommended models next patient : Thankfully, models agree. advocate staying dose 4, wary toxicity already seen dose 5. take summary model fit: can see closely agree model estimates probability toxicity dose. Note median perfectly matches mean dfcrm fit assumes normal posterior distribution β\\beta. contrast, trialr class uses Stan fit model using Hamiltonian Monte Carlo sampling. posterior distributions probabilities toxicity evidently non-normal positively-skewed median estimates less mean estimates. Let us imagine instead want fit empiric model. simply requires change model variable adjust prior parameters: Fitting set outcomes yields: example, model estimates broadly consistent across methodology model type. However, general case. illustrate point, let us examine two parameter logistic model fit using trialr (note: model implemented dfcrm): Now estimate toxicity highest dose high relative models. extra free parameter two-parameter model offers flexibility. debate literature one-parameter vs two-parameter models (possibly ). generally accepted single parameter model simplistic accurately estimate pip_i entire dose range. However, sufficient identify dose closest pTp_T, primary objective trial, simplicity one-parameter model may entirely justified. interested reader directed O’Quigley, Pepe, Fisher (1990) Neuenschwander, Branson, Gsponer (2008). Note CRM natively implement stopping rules, classes always advocate trial continuance: identify dose admissible: behaviour can altered appending classes advocate stopping consensus: stopping excess toxicity: : information, check package README vignettes.","code":"skeleton <- c(0.05, 0.12, 0.25, 0.40, 0.55) target <- 0.25 a0 <- 3 beta_sd <- sqrt(1.34) library(escalation) model1 <- get_dfcrm(skeleton = skeleton, target = target, model = 'logistic',                      intcpt = a0, scale = beta_sd) model2 <- get_trialr_crm(skeleton = skeleton, target = target, model = 'logistic',                           a0 = a0, beta_mean = 0, beta_sd = beta_sd) outcomes <- '3N 5N 5T 3N 4N'  fit1 <- model1 %>% fit(outcomes) fit2 <- model2 %>% fit(outcomes) fit1 %>% recommended_dose() #> [1] 4 fit2 %>% recommended_dose() #> [1] 4 fit1 %>% summary() #> # A tibble: 6 × 9 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0              0         0               0       TRUE       #> 2 1          0     0            NaN         0.00768         0.00768 TRUE       #> 3 2          0     0            NaN         0.0265          0.0265  TRUE       #> 4 3          0     2              0         0.0817          0.0817  TRUE       #> 5 4          0     1              0         0.182           0.182   TRUE       #> 6 5          1     2              0.5       0.331           0.331   TRUE       #> # ℹ 2 more variables: recommended <lgl>, Skeleton <dbl> fit2 %>% summary() #> # A tibble: 6 × 9 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0              0          0              0       TRUE       #> 2 1          0     0            NaN          0.0306         0.00754 TRUE       #> 3 2          0     0            NaN          0.0634         0.0261  TRUE       #> 4 3          0     2              0          0.128          0.0807  TRUE       #> 5 4          0     1              0          0.218          0.180   TRUE       #> 6 5          1     2              0.5        0.338          0.329   TRUE       #> # ℹ 2 more variables: recommended <lgl>, Skeleton <dbl> model3 <- get_dfcrm(skeleton = skeleton, target = target, model = 'empiric',                      scale = beta_sd)  model4 <- get_trialr_crm(skeleton = skeleton, target = target, model = 'empiric',                           beta_sd = beta_sd) fit3 <- model3 %>% fit(outcomes) fit4 <- model4 %>% fit(outcomes) fit3 %>% summary() #> # A tibble: 6 × 9 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0              0         0               0       TRUE       #> 2 1          0     0            NaN         0.00701         0.00701 TRUE       #> 3 2          0     0            NaN         0.0299          0.0299  TRUE       #> 4 3          0     2              0         0.101           0.101   TRUE       #> 5 4          0     1              0         0.219           0.219   TRUE       #> 6 5          1     2              0.5       0.372           0.372   TRUE       #> # ℹ 2 more variables: recommended <lgl>, Skeleton <dbl> fit4 %>% summary() #> # A tibble: 6 × 9 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0              0          0              0       TRUE       #> 2 1          0     0            NaN          0.0311         0.00747 TRUE       #> 3 2          0     0            NaN          0.0670         0.0312  TRUE       #> 4 3          0     2              0          0.142          0.104   TRUE       #> 5 4          0     1              0          0.248          0.224   TRUE       #> 6 5          1     2              0.5        0.380          0.376   TRUE       #> # ℹ 2 more variables: recommended <lgl>, Skeleton <dbl> model5 <- get_trialr_crm(skeleton = skeleton, target = target, model = 'logistic2',                           alpha_mean = 0, alpha_sd = 2, beta_mean = 0, beta_sd = 1) fit5 <- model5 %>% fit(outcomes) fit5 %>% summary() #> # A tibble: 6 × 9 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0              0          0              0       TRUE       #> 2 1          0     0            NaN          0.0344         0.00406 TRUE       #> 3 2          0     0            NaN          0.0562         0.0166  TRUE       #> 4 3          0     2              0          0.104          0.0610  TRUE       #> 5 4          0     1              0          0.201          0.163   TRUE       #> 6 5          1     2              0.5        0.412          0.384   TRUE       #> # ℹ 2 more variables: recommended <lgl>, Skeleton <dbl> fit1 %>% continue() #> [1] TRUE fit5 %>% continue() #> [1] TRUE fit1 %>% dose_admissible() #> [1] TRUE TRUE TRUE TRUE TRUE model6 <- get_trialr_crm(skeleton = skeleton, target = 0.3, model = 'empiric',                           beta_sd = 1) %>%    stop_when_n_at_dose(dose = 'recommended', n = 6)  fit6 <- model6 %>% fit('2NNN 3TTT 2NTN')  fit6 %>% continue() #> [1] FALSE fit6 %>% recommended_dose() #> [1] 2 model7 <- get_trialr_crm(skeleton = skeleton, target = 0.3, model = 'empiric',                           beta_sd = 1) %>%    stop_when_too_toxic(dose = 1, tox_threshold = 0.3, confidence = 0.8)  fit7 <- model7 %>% fit('1NTT 1TTN')  fit7 %>% continue() #> [1] FALSE fit7 %>% recommended_dose() #> [1] NA fit7 %>% dose_admissible() #> [1] FALSE FALSE FALSE FALSE FALSE model8 <- get_trialr_crm(skeleton = skeleton, target = 0.3, model = 'empiric',                           beta_sd = 1) %>%    stop_when_n_at_dose(dose = 'recommended', n = 6) %>%    stop_when_too_toxic(dose = 1, tox_threshold = 0.3, confidence = 0.8)"},{"path":"/articles/A205-CRM.html","id":"dfcrm-vs-trialr","dir":"Articles","previous_headings":"Implementation in escalation","what":"dfcrm vs trialr","title":"CRM - Continual Reassessment Method","text":"method use? answer depends plan use models. trialr classes produce posterior samples: facilitate flexible visualisation:  However, MCMC sampling expensive computational procedure compared numerical integration used dfcrm. envisage fitting lots models, perhaps simulations dose-paths (see ) favour model offered dfcrm, recommend using get_dfcrm. However, favour model offered trialr, willing calculation slow order get posterior samples, use trialr.","code":"fit7 %>%    prob_tox_samples(tall = TRUE) %>%    head() #> # A tibble: 6 × 3 #>   .draw dose  prob_tox #>   <chr> <chr>    <dbl> #> 1 1     1        0.319 #> 2 2     1        0.341 #> 3 3     1        0.626 #> 4 4     1        0.638 #> 5 5     1        0.646 #> 6 6     1        0.621 library(ggplot2) library(dplyr)  fit7 %>%    prob_tox_samples(tall = TRUE) %>%    mutate(.draw = .draw %>% as.integer()) %>%    filter(.draw <= 200) %>%    ggplot(aes(dose, prob_tox)) +    geom_line(aes(group = .draw), alpha = 0.2)"},{"path":"/articles/A205-CRM.html","id":"dose-paths","dir":"Articles","previous_headings":"Implementation in escalation","what":"Dose paths","title":"CRM - Continual Reassessment Method","text":"can use get_dose_paths function escalation calculate exhaustive model recommendations response every possible set outcomes future cohorts. instance, start trial using empiric CRM, can examine possible paths trial might take first two cohorts three patients, starting dose 2: see design willingly skip dose 3 tox seen first cohort. might warrant suppressing dose-dkipping appending dont_skip_doses(when_escalating = TRUE) selector. Dose-paths can also run -progress trials outcomes established. information working dose-paths, refer dose-paths vignette.","code":"skeleton <- c(0.05, 0.12, 0.25, 0.40, 0.55) target <- 0.25 beta_sd <- 1  model <- get_dfcrm(skeleton = skeleton, target = target, model = 'empiric',                     scale = beta_sd) paths <- model %>% get_dose_paths(cohort_sizes = c(3, 3), next_dose = 2) graph_paths(paths)"},{"path":"/articles/A205-CRM.html","id":"simulation","dir":"Articles","previous_headings":"Implementation in escalation","what":"Simulation","title":"CRM - Continual Reassessment Method","text":"can use simulate_trials function calculate operating characteristics design. Let us use example tell design stop lowest dose toxic, 9 patients already evaluated candidate dose, sample size n=24n=24 reached: sake speed, run just fifty iterations: real life, however, naturally run many thousands iterations. Let us investigate following true probabilities toxicity: simulated behaviour : see chances stopping excess toxicity recommending dose 1--4. Dose 1 clear favourite identified. Interestingly, stop_when_n_at_dose class reduces expected sample size 12-13 patints. Without : expected sample size much higher chances erroneously stopping early also higher. phenomena justify wider simulation study real situation. information running dose-finding simulations, refer simulation vignette.","code":"model <- get_dfcrm(skeleton = skeleton, target = target, model = 'empiric',                     scale = beta_sd) %>%    stop_when_too_toxic(dose = 1, tox_threshold = target, confidence = 0.8) %>%    stop_when_n_at_dose(dose = 'recommended', n = 9) %>%    stop_at_n(n = 24) num_sims <- 50 sc1 <- c(0.25, 0.5, 0.6, 0.7, 0.8) set.seed(123) sims <- model %>%   simulate_trials(num_sims = num_sims, true_prob_tox = sc1, next_dose = 1)  sims #> Number of iterations: 50  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.25 0.50 0.60 0.70 0.80  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5  #>   0.32   0.62   0.06   0.00   0.00   0.00  #>  #> Probability of administration: #>      1      2      3      4      5  #> 0.6049 0.2537 0.0293 0.1122 0.0000  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     3.0     9.0    12.0    12.3    18.0    21.0  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    2.00    2.25    4.50    4.82    7.00    9.00  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.129   8.723  12.861  12.798  17.758  26.542 get_dfcrm(skeleton = skeleton, target = target, model = 'empiric',            scale = beta_sd) %>%    stop_when_too_toxic(dose = 1, tox_threshold = target, confidence = 0.8) %>%    stop_at_n(n = 24) %>%    simulate_trials(num_sims = num_sims, true_prob_tox = sc1, next_dose = 1) #> Number of iterations: 50  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.25 0.50 0.60 0.70 0.80  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5  #>   0.40   0.50   0.08   0.02   0.00   0.00  #>  #> Probability of administration: #>      1      2      3      4      5  #> 0.6250 0.2297 0.0473 0.0980 0.0000  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    3.00    9.00   24.00   17.76   24.00   24.00  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    2.00    5.25    7.00    6.64    9.00   12.00  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    1.05    8.22   19.40   17.66   25.41   32.88"},{"path":[]},{"path":"/articles/A207-NBG.html","id":"summary-of-the-design","dir":"Articles","previous_headings":"","what":"Summary of the design","title":"NBG - Neuenschwander, Branson & Gsponer","text":"Neuenschwander, Branson, Gsponer (2008) (NBG) introduced derivative CRM dose-escalation clinical trials using model: logitpi=α+exp(β)log(xi/d*), \\text{logit} p_i = \\alpha + \\exp{(\\beta)} \\log{(x_i / d^*)}, pip_i probability toxicity iith dose, xix_i, d*d^* reference dose. α\\alpha β\\beta model parameters authors place bivariate normal prior. model similar two-parameter logistic CRM, implemented stan_crm(model = 'logistic2'). However, notable difference dose, xix_i, enters model covariate. dispenses toxicity skeleton used CRM.","code":""},{"path":"/articles/A207-NBG.html","id":"implementation-in-escalation","dir":"Articles","previous_headings":"","what":"Implementation in escalation","title":"NBG - Neuenschwander, Branson & Gsponer","text":"heavy lifting required fit model performed trialr rstan. escalation merely composes model fit way can used myriad dose-selection option provided package. illustration, let us reproduce analysis Neuenschwander, Branson, Gsponer (2008) authors used demonstrate flexibility two-parameter approach. trial 15 doses, investigators saw outcomes: Creating dose-escalation model NBG’s parameters: fitting model observed outcomes: see dose 7 selected next cohort using metric selecting dose posterior expected probability toxicity closest target. output, mean_prob_tox broadly matches values plotted lower right panel Figure 1 Neuenschwander, Branson, Gsponer (2008).","code":"library(escalation) #> Loading required package: magrittr  dose <- c(1, 2.5, 5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 150, 200, 250) outcomes <- '1NNN 2NNNN 3NNNN 4NNNN 7TT' model <- get_trialr_nbg(real_doses = dose, d_star = 250, target = 0.3,                         alpha_mean = 2.15, alpha_sd = 0.84,                         beta_mean = 0.52, beta_sd = 0.8,                         seed = 2020) fit <- model %>% fit(outcomes) fit #> Patient-level data: #> # A tibble: 17 × 5 #>    Patient Cohort  Dose   Tox Weight #>      <int>  <int> <int> <int>  <dbl> #>  1       1      1     1     0      1 #>  2       2      1     1     0      1 #>  3       3      1     1     0      1 #>  4       4      2     2     0      1 #>  5       5      2     2     0      1 #>  6       6      2     2     0      1 #>  7       7      2     2     0      1 #>  8       8      3     3     0      1 #>  9       9      3     3     0      1 #> 10      10      3     3     0      1 #> 11      11      3     3     0      1 #> 12      12      4     4     0      1 #> 13      13      4     4     0      1 #> 14      14      4     4     0      1 #> 15      15      4     4     0      1 #> 16      16      5     7     1      1 #> 17      17      5     7     1      1 #>  #> Dose-level data: #> # A tibble: 16 × 9 #>    dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>    <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #>  1 NoDose     0     0                0        0              0       TRUE       #>  2 1          0     3                0        0.0123         0.00545 TRUE       #>  3 2          0     4                0        0.0314         0.0190  TRUE       #>  4 3          0     4                0        0.0650         0.0478  TRUE       #>  5 4          0     4                0        0.134          0.115   TRUE       #>  6 5          0     0              NaN        0.200          0.183   TRUE       #>  7 6          0     0              NaN        0.262          0.250   TRUE       #>  8 7          2     2                1        0.319          0.310   TRUE       #>  9 8          0     0              NaN        0.371          0.366   TRUE       #> 10 9          0     0              NaN        0.459          0.461   TRUE       #> 11 10         0     0              NaN        0.531          0.538   TRUE       #> 12 11         0     0              NaN        0.657          0.673   TRUE       #> 13 12         0     0              NaN        0.735          0.756   TRUE       #> 14 13         0     0              NaN        0.824          0.846   TRUE       #> 15 14         0     0              NaN        0.870          0.892   TRUE       #> 16 15         0     0              NaN        0.898          0.918   TRUE       #> # ℹ 2 more variables: recommended <lgl>, RealDose <dbl> #>  #> The model targets a toxicity level of 0.3. #> The model advocates continuing at dose 7."},{"path":"/articles/A207-NBG.html","id":"future-work","dir":"Articles","previous_headings":"Implementation in escalation","what":"Future work","title":"NBG - Neuenschwander, Branson & Gsponer","text":"minor shortcomings NBG implementation escalation & trialr. Firstly, NBG propose bivariate normal prior distribution α\\alpha β\\beta. However, implementation trialr currently uses independent normal priors. Hopefully, addressed future release trialr. Furthermore, NBG propose method selecting dose accounts probability recommending overdose. logic currently implemented escalation. However, proposal addresses issue presented Mozgunov Jaki (2020), implemented escalation, can applied NBG method: Fitting new model outcomes: Rather sticking dose 7, design now prefers de-escalate dose 6: Mozgunov & Jaki’s method published relation CRM design, can applied escalation model providing posterior samples via prob_tox_samples method, including Neuenschwander et al.’s method illustrated .","code":"model2 <- model %>% select_dose_by_cibp(a = 0.3) fit2 <- model2 %>% fit(outcomes) fit2 %>% recommended_dose() #> [1] 6"},{"path":"/articles/A207-NBG.html","id":"dose-paths","dir":"Articles","previous_headings":"Implementation in escalation","what":"Dose paths","title":"NBG - Neuenschwander, Branson & Gsponer","text":"can use get_dose_paths function escalation calculate exhaustive model recommendations response every possible set outcomes future cohorts. instance, start trial using NBG model detailed , can examine possible paths trial might take first two cohorts three patients, starting dose 2: can compare similar advice model adds Mozgunov & Jaki’s criterion: can see several situations second model conservative escalation, achieving goal authors. Perhaps unexpectedly, however, second design escalations dose 11 initial outcomes 2NNN, slightly aggessively default model identifies dose 10. Dose-paths can also run -progress trials outcomes established. information working dose-paths, refer dose-paths vignette.","code":"paths1 <- model %>% get_dose_paths(cohort_sizes = c(3, 3), next_dose = 2) graph_paths(paths1) paths2 <- model2 %>% get_dose_paths(cohort_sizes = c(3, 3), next_dose = 2) graph_paths(paths2)"},{"path":"/articles/A207-NBG.html","id":"simulation","dir":"Articles","previous_headings":"Implementation in escalation","what":"Simulation","title":"NBG - Neuenschwander, Branson & Gsponer","text":"can use simulate_trials function calculate operating characteristics design. Let us take example , append behaviour stop lowest dose toxic, 9 patients already evaluated candidate dose, sample size n=24n=24 reached: sake speed, run just ten iterations: real life, however, naturally run many thousands iterations. let us investigate following true probabilities toxicity: simulated behaviour : see chances stopping excess toxicity recommending dose low. Doses 4-7 favourites identified. information running dose-finding simulations, refer simulation vignette.","code":"dose <- c(1, 2.5, 5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 150, 200, 250) model <- get_trialr_nbg(real_doses = dose, d_star = 250, target = 0.3,                         alpha_mean = 2.15, alpha_sd = 0.84,                         beta_mean = 0.52, beta_sd = 0.8,                         seed = 2020) %>%    stop_when_too_toxic(dose = 1, tox_threshold = 0.3, confidence = 0.8) %>%    stop_when_n_at_dose(dose = 'recommended', n = 9) %>%    stop_at_n(n = 24) num_sims <- 10 sc1 <- c(0.01, 0.03, 0.10, 0.17, 0.25, 0.35, 0.45, 0.53, 0.60, 0.65, 0.69,           0.72, 0.75, 0.79, 0.80) set.seed(123) sims <- model %>%   simulate_trials(num_sims = num_sims, true_prob_tox = sc1, next_dose = 1)  sims #> Number of iterations: 10  #>  #> Number of doses: 15  #>  #> True probability of toxicity: #>    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15  #> 0.01 0.03 0.10 0.17 0.25 0.35 0.45 0.53 0.60 0.65 0.69 0.72 0.75 0.79 0.80  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5      6      7      8      9     10  #>    0.0    0.0    0.0    0.0    0.1    0.1    0.5    0.1    0.1    0.1    0.0  #>     11     12     13     14     15  #>    0.0    0.0    0.0    0.0    0.0  #>  #> Probability of administration: #>      1      2      3      4      5      6      7      8      9     10     11  #> 0.1282 0.0000 0.0128 0.0385 0.1667 0.2051 0.1026 0.0641 0.0897 0.1538 0.0128  #>     12     13     14     15  #> 0.0256 0.0000 0.0000 0.0000  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    21.0    24.0    24.0    23.4    24.0    24.0  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     6.0     7.0     7.0     7.8     9.0    10.0  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.54   23.74   24.67   25.66   27.22   34.42"},{"path":[]},{"path":"/articles/A210-TPI.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"TPI - Toxicity Probability Interval Design","text":"toxicity probability interval (TPI) design introduced Ji, Li, Bekele (2007). one series dose-finding trial designs works partitioning probability toxicity set intervals. designs make dose-selection decisions determined interval probability toxicity current dose believed reside.","code":""},{"path":"/articles/A210-TPI.html","id":"summary-of-the-tpi-design","dir":"Articles","previous_headings":"","what":"Summary of the TPI Design","title":"TPI - Toxicity Probability Interval Design","text":"Core design beta-binomial Bayesian conjugate model. hyperparameters α\\alpha β\\beta, let probability toxicity dose ii pip_i, prior distribution pi∼Beta(α,β).p_i \\sim Beta(\\alpha, \\beta). nin_i patients treated dose ii, yielding xix_i toxicity events, posterior distribution pi|data∼Beta(α+xi,β+ni−xi). p_i | data \\sim Beta(\\alpha + x_{}, \\beta + n_{} - x_{}). Using distribution, let standard deviation pip_i denoted σi\\sigma_i. design seeks dose probability toxicity close pre-specified target level, pTp_T. entire range possible values pip_i can broken following intervals: underdosing interval (UI), defined (0,pT−K2σi)(0, p_{T} - K_{2} \\sigma_{}); equivalence interval (EI), defined (pT−K2σi,pT+K1σi)(p_{T} - K_{2} \\sigma_{}, p_{T} + K_{1} \\sigma_{}); overdosing interval (OI), defined (pT+K1σi,1)(p_{T} + K_{1} \\sigma_{}, 1); pre-specified model constants, K1,K2K_1, K_2. intervals mutally-exclusive mutually-exhaustive, meaning every possible probability belongs precisely one . words, intervals form partition probability space, (0,1)(0, 1). Using posterior distribution, can calculate three probabilities pUI=Pr(pi∈UI),pEI=Pr(pi∈EI),pOI=Pr(pi∈OI).p_{UI} = Pr(p_i \\\\text{UI}), \\enspace p_{EI} = Pr(p_i \\\\text{EI}), \\enspace p_{OI} = Pr(p_i \\\\text{OI}). definition, pUI+pEI+pOI=1p_{UI} + p_{EI} + p_{OI} = 1. logical action dose-finding trial depends three probabilities greatest. pUI>pEI,pOIp_{UI} > p_{EI}, p_{OI}, current dose likely underdose, desire escalate dose +1i+1. contrast, pOI>pUI,pEIp_{OI} > p_{UI}, p_{EI}, current dose likely overdose want de-escalate dose −1i-1 next patient. pEI>pUI,pOIp_{EI} > p_{UI}, p_{OI}, current dose deemed sufficiently close pTp_T want stay dose-level ii. rules regarding dose-selection, following rule used avoid recommending dangerous doses. dose deemed inadmissible excessively toxic Pr(pi>pT|data)>ξ, Pr(p_{} > p_{T} | data) > \\xi, certainty threshold, ξ\\xi. dose excluded rule, recommended model. Irrespective probabilities pUI,pEI,pOIp_{UI}, p_{EI}, p_{OI}, design recommend stay dose ii rather escalate dose previously identified inadmissible. Furthermore, design advocate stopping lowest dose inferred inadmissible. paper, authors demonstrate acceptable operating performance using α=β=0.005\\alpha = \\beta = 0.005, K1=1K_{1} = 1, K2=1.5K_{2} = 1.5 ξ=0.95\\xi = 0.95. See Ji, Li, Bekele (2007) Ji Yang (2017) full details.","code":""},{"path":"/articles/A210-TPI.html","id":"implementation-in-escalation","dir":"Articles","previous_headings":"","what":"Implementation in escalation","title":"TPI - Toxicity Probability Interval Design","text":"demonstrate method, let us fit design cohort three patients treated first five doses, one experienced toxicity. illustration, use parameters chosen Ji, Li, Bekele (2007): dose recommended next cohort Unsurprisingly, design advocate escalation. Importantly, modest toxicity seen far enough render dose 1 inadmissible: Let us imagine treat another two cohorts dose 1, see toxicity: Now, design happy escalate: Let us imagine, however, dose 2 surprisingly toxic, yielding three toxicities: Despite low sample size, statistical model believes dose 2 excessively toxic: thus inadmissible: Note since dose 2 believed inadmissible, assumption monotonically increasing toxicity means doses higher dose 2 excessively toxic .","code":"library(escalation)  model <- get_tpi(num_doses = 5, target = 0.3, alpha = 0.005, beta = 0.005,                   k1 = 1, k2 = 1.5, exclusion_certainty = 0.95)  fit <- model %>% fit('1NNT') fit %>% recommended_dose() #> [1] 1 fit %>% dose_admissible() #> [1] TRUE TRUE TRUE TRUE TRUE fit <- model %>% fit('1NNT 1NNN 1NNN') fit #> Patient-level data: #> # A tibble: 9 × 5 #>   Patient Cohort  Dose   Tox Weight #>     <int>  <int> <int> <int>  <dbl> #> 1       1      1     1     0      1 #> 2       2      1     1     0      1 #> 3       3      1     1     1      1 #> 4       4      2     1     0      1 #> 5       5      2     1     0      1 #> 6       6      2     1     0      1 #> 7       7      3     1     0      1 #> 8       8      3     1     0      1 #> 9       9      3     1     0      1 #>  #> Dose-level data: #> # A tibble: 6 × 8 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0            0             0                0    TRUE       #> 2 1          1     9            0.111         0.112            0.08 TRUE       #> 3 2          0     0          NaN             0.5             NA    TRUE       #> 4 3          0     0          NaN             0.5             NA    TRUE       #> 5 4          0     0          NaN             0.5             NA    TRUE       #> 6 5          0     0          NaN             0.5             NA    TRUE       #> # ℹ 1 more variable: recommended <lgl> #>  #> The model targets a toxicity level of 0.3. #> The model advocates continuing at dose 2. fit <- model %>% fit('1NNT 1NNN 1NNN 2TTT') fit %>% prob_tox_exceeds(threshold = 0.25) #> [1] 0.1007690 0.9999679        NA        NA        NA fit %>% dose_admissible() #> [1]  TRUE FALSE FALSE FALSE FALSE"},{"path":"/articles/A210-TPI.html","id":"final-dose-selection","dir":"Articles","previous_headings":"Implementation in escalation","what":"Final dose selection","title":"TPI - Toxicity Probability Interval Design","text":"TPI, like designs, selects final dose differently selects doses mid-trial. achieve escalation, need extra selector kick-parent selector(s) selected non-NA dose expressed continue == FALSE, .e. signaled trial ends now interested dose. used, almost surely come last selector chain: example, stop_at_n stopped trial threshold sample size met, underlying algorithm identified least one dose worthy selection. juncture, select_tpi_mtd took applied isotonic regression prob(tox) described authors. Whilst underlying selector(s) busy conducting trial (continue == TRUE), select_tpi_mtd kept silent.","code":"model <- get_tpi(num_doses = 5, target = 0.25, k1 = 1, k2 = 1.5,                   exclusion_certainty = 0.95) %>%   stop_at_n(n = 12) %>%   select_tpi_mtd(exclusion_certainty = 0.95)  outcomes <- '1NNN 2NTN 2NNN 3NTT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 2"},{"path":"/articles/A210-TPI.html","id":"dose-paths","dir":"Articles","previous_headings":"Implementation in escalation","what":"Dose paths","title":"TPI - Toxicity Probability Interval Design","text":"Table 1 publication, Ji, Li, Bekele (2007) list model recommendations conditional hypothesised numbers toxicities cohorts varying size. can use get_dose_paths function, instance, calculate exhaustive model recommendations single cohort three evaluated dose 2: table confirms advice following cohort three de-escalate 2 3 toxicities seen, escalate toxicity seen, otherwise remain. Note recommendations actually next_dose = 3 next_dose = 4. five-dose setting, naturally slightly different next_dose = 1 next_dose = 5 de-escalate dose 1 escalate dose 5. can easily visualise paths : information working dose-paths, refer dose-paths vignette.","code":"paths <- model %>% get_dose_paths(cohort_sizes = c(3), next_dose = 2)  library(dplyr) as_tibble(paths) %>% select(outcomes, next_dose) %>% print(n = 100) #> # A tibble: 5 × 2 #>   outcomes next_dose #>   <chr>        <dbl> #> 1 \"\"               2 #> 2 \"NNN\"            3 #> 3 \"NNT\"            2 #> 4 \"NTT\"            1 #> 5 \"TTT\"            1 graph_paths(paths)"},{"path":"/articles/A210-TPI.html","id":"simulation","dir":"Articles","previous_headings":"Implementation in escalation","what":"Simulation","title":"TPI - Toxicity Probability Interval Design","text":"Ji, Li, Bekele (2007) present simulations Table 2, comparing performance TPI method designs. can use simulate_trials function reproduce operating characteristics. example concerns clinical trial eight doses targets 25% toxicity. must respecify model object reflect . also elect limit trial sample size n=30n=30: sake speed, run just fifty iterations: real life, however, naturally run many thousands iterations. scenario 1 assumes true probability toxicity: simulated behaviour : reproduces finding dose 2 overwhelmingly likely recommended, sample size virtually guaranteed 30, .e. early stopping unlikely. information running dose-finding simulations, refer simulation vignette.","code":"model <- get_tpi(num_doses = 8, target = 0.25, k1 = 1, k2 = 1.5,                  exclusion_certainty = 0.95) %>%   stop_at_n(n = 30) num_sims <- 50 sc1 <- c(0.05, 0.25, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95) set.seed(123) sims <- model %>%   simulate_trials(num_sims = num_sims, true_prob_tox = sc1, next_dose = 1)  sims #> Number of iterations: 50  #>  #> Number of doses: 8  #>  #> True probability of toxicity: #>    1    2    3    4    5    6    7    8  #> 0.05 0.25 0.50 0.60 0.70 0.80 0.90 0.95  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5      6      7      8  #>   0.00   0.20   0.72   0.06   0.02   0.00   0.00   0.00   0.00  #>  #> Probability of administration: #>     1     2     3     4     5     6     7     8  #> 0.246 0.600 0.144 0.010 0.000 0.000 0.000 0.000  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      30      30      30      30      30      30  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     5.0     6.0     7.0     7.4     8.0    11.0  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.55   26.62   29.19   29.81   31.98   45.52"},{"path":[]},{"path":"/articles/A220-mTPI.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"mTPI - Modified Toxicity Probability Interval Design","text":"modified toxicity probability interval (mTPI) design introduced Ji et al. (2010). name suggests, modification earlier TPI design, introduced Ji, Li, Bekele (2007). mTPI one series dose-finding trial designs works partitioning probability toxicity set intervals. designs make dose-selection decisions determined interval probability toxicity current dose believed reside. great many similarities subtle differences TPI mTPI designs. TPI design, refer TPI vignette.","code":""},{"path":"/articles/A220-mTPI.html","id":"summary-of-the-mtpi-design","dir":"Articles","previous_headings":"","what":"Summary of the mTPI Design","title":"mTPI - Modified Toxicity Probability Interval Design","text":"Core design beta-binomial Bayesian conjugate model. hyperparameters α\\alpha β\\beta, let probability toxicity dose ii pip_i, prior distribution pi∼Beta(α,β).p_i \\sim Beta(\\alpha, \\beta). nin_i patients treated dose ii, yielding xix_i toxicity events, posterior distribution pi|data∼Beta(α+xi,β+ni−xi). p_i | data \\sim Beta(\\alpha + x_{}, \\beta + n_{} - x_{}). design seeks dose probability toxicity close pre-specified target level, pTp_T. entire range possible values pip_i can broken following intervals: underdosing interval (UI), defined (0,pT−ϵ1)(0, p_{T} - \\epsilon_{1}); equivalence interval (EI), defined (pT−ϵ1,pT+ϵ2)(p_{T} - \\epsilon_{1}, p_{T} + \\epsilon_{2}); overdosing interval (OI), defined (pT+ϵ2,1)(p_{T} + \\epsilon_{2}, 1); pre-specified model constants, ϵ1,ϵ2\\epsilon_{1}, \\epsilon_{2}. intervals mutally-exclusive mutually-exhaustive, meaning every possible probability belongs precisely one . words, intervals form partition probability space, (0,1)(0, 1). continuous random variable XX cumulative probability mass function F(x)F(x) (.e. Pr(X<x)=F(x)Pr(X < x) = F(x)), authors define unit probability mass (UPM) interval (,b)(, b) (F(b)−F())/(b−)(F(b) - F()) / (b - ). , UPM probability mass interval divided width interval, can interpreted average probability density interval. , using posterior distribution identified , calculate three UPMs UPMUI=Pr(pi∈UI)/(pT−ϵ1),UPM_{UI} = Pr(p_i \\\\text{UI}) / (p_{T} - \\epsilon_{1}),UPMEI=Pr(pi∈EI)/(ϵ1+ϵ2),UPM_{EI} = Pr(p_i \\\\text{EI}) / (\\epsilon_{1} + \\epsilon_{2}), UPMOI=Pr(pi∈OI)/(1−pT+ϵ2).UPM_{OI} = Pr(p_i \\\\text{OI}) / (1 - p_{T} + \\epsilon_{2}). logical action dose-finding trial depends three quantities greatest. UPMUI>UPMEI,UPMOIUPM_{UI} > UPM_{EI}, UPM_{OI}, current dose likely underdose, desire escalate dose +1i+1. contrast, UPMOI>UPMUI,UPMEIUPM_{OI} > UPM_{UI}, UPM_{EI}, current dose likely overdose want de-escalate dose −1i-1 next patient. UPMEI>UPMUI,UPMOIUPM_{EI} > UPM_{UI}, UPM_{OI}, current dose deemed sufficiently close pTp_T want stay dose-level ii. rules regarding dose-selection, following rule used avoid recommending dangerous doses. dose deemed inadmissible excessively toxic Pr(pi>pT|data)>ξ, Pr(p_{} > p_{T} | data) > \\xi, certainty threshold, ξ\\xi. dose excluded rule, recommended model. Irrespective values UPMUI,UPMEIUPM_{UI}, UPM_{EI} UPMOIUPM_{OI}, design recommend stay dose ii rather escalate dose previously identified inadmissible. Furthermore, design advocate stopping lowest dose inferred inadmissible. paper, authors demonstrate acceptable operating performance using α=β=1\\alpha = \\beta = 1, ϵ1=0.05\\epsilon_{1} = 0.05, ϵ2=0.05\\epsilon_{2} = 0.05 ξ=0.95\\xi = 0.95. See Ji et al. (2010) Ji Yang (2017) full details.","code":""},{"path":"/articles/A220-mTPI.html","id":"implementation-in-escalation","dir":"Articles","previous_headings":"","what":"Implementation in escalation","title":"mTPI - Modified Toxicity Probability Interval Design","text":"demonstrate method, let us fit design cohort three patients treated first five doses, one experienced toxicity. illustration, use parameters chosen Ji et al. (2010): dose recommended next cohort Unsurprisingly, design advocate escalation. Importantly, modest toxicity seen far enough render dose 1 inadmissible: Let us imagine treat another two cohorts dose 1, see toxicity: Now, design happy escalate: Let us imagine, however, dose 2 surprisingly toxic, yielding three toxicities: Despite low sample size, statistical model believes dose 2 excessively toxic: thus inadmissible: Note since dose 2 believed inadmissible, assumption monotonically increasing toxicity means doses higher dose 2 excessively toxic .","code":"library(escalation)  model <- get_mtpi(num_doses = 5, target = 0.3, alpha = 1, beta = 1,                    epsilon1 = 0.05, epsilon2 = 0.05, exclusion_certainty = 0.95)  fit <- model %>% fit('1NNT') fit %>% recommended_dose() #> [1] 1 fit %>% dose_admissible() #> [1] TRUE TRUE TRUE TRUE TRUE fit <- model %>% fit('1NNT 1NNN') fit #> Patient-level data: #> # A tibble: 6 × 5 #>   Patient Cohort  Dose   Tox Weight #>     <int>  <int> <int> <int>  <dbl> #> 1       1      1     1     0      1 #> 2       2      1     1     0      1 #> 3       3      1     1     1      1 #> 4       4      2     1     0      1 #> 5       5      2     1     0      1 #> 6       6      2     1     0      1 #>  #> Dose-level data: #> # A tibble: 6 × 8 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0            0              0               0    TRUE       #> 2 1          1     6            0.167          0.25            0.23 TRUE       #> 3 2          0     0          NaN              0.5            NA    TRUE       #> 4 3          0     0          NaN              0.5            NA    TRUE       #> 5 4          0     0          NaN              0.5            NA    TRUE       #> 6 5          0     0          NaN              0.5            NA    TRUE       #> # ℹ 1 more variable: recommended <lgl> #>  #> The model targets a toxicity level of 0.3. #> The model advocates continuing at dose 2. fit <- model %>% fit('1NNT 1NNN 1NNN 2TTT') fit %>% prob_tox_exceeds(threshold = 0.25) #> [1] 0.2440252 0.9960938        NA        NA        NA fit %>% dose_admissible() #> [1]  TRUE FALSE FALSE FALSE FALSE"},{"path":"/articles/A220-mTPI.html","id":"final-dose-selection","dir":"Articles","previous_headings":"Implementation in escalation","what":"Final dose selection","title":"mTPI - Modified Toxicity Probability Interval Design","text":"mTPI, like designs, selects final dose differently selects doses mid-trial. achieve escalation, need extra selector kick-parent selector(s) selected non-NA dose expressed continue == FALSE, .e. signaled trial ends now interested dose. used, almost surely come last selector chain: example, stop_at_n stopped trial threshold sample size met, underlying algorithm identified least one dose worthy selection. juncture, select_mtpi_mtd took applied isotonic regression prob(tox) described authors. Whilst underlying selector(s) busy conducting trial (continue == TRUE), select_mtpi_mtd kept silent.","code":"model <- get_tpi(num_doses = 5, target = 0.25, k1 = 1, k2 = 1.5,                   exclusion_certainty = 0.95) %>%   stop_at_n(n = 12) %>%   select_mtpi_mtd(exclusion_certainty = 0.95)  outcomes <- '1NNN 2NTN 2NNN 3NTT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 2"},{"path":"/articles/A220-mTPI.html","id":"dose-paths","dir":"Articles","previous_headings":"Implementation in escalation","what":"Dose paths","title":"mTPI - Modified Toxicity Probability Interval Design","text":"Figure 2 publication, Ji et al. (2010) list model recommendations conditional hypothesised numbers toxicities cohorts varying size. can use get_dose_paths function, instance, calculate exhaustive model recommendations single cohort three evaluated dose 2: table confirms advice following cohort three de-escalate 2 3 toxicities seen, escalate toxicity seen, otherwise remain. Note recommendations actually next_dose = 3 next_dose = 4. five-dose setting, naturally slightly different next_dose = 1 next_dose = 5 de-escalate dose 1 escalate dose 5. can visualise paths make sense slightly complex example: information working dose-paths, refer dose-paths vignette.","code":"paths <- model %>% get_dose_paths(cohort_sizes = c(3), next_dose = 2)  library(dplyr) as_tibble(paths) %>% select(outcomes, next_dose) %>% print(n = 100) #> # A tibble: 5 × 2 #>   outcomes next_dose #>   <chr>        <dbl> #> 1 \"\"               2 #> 2 \"NNN\"            3 #> 3 \"NNT\"            2 #> 4 \"NTT\"            1 #> 5 \"TTT\"            1 cohort_sizes <- c(3, 3) paths <- model %>% get_dose_paths(cohort_sizes = cohort_sizes, next_dose = 2) graph_paths(paths)"},{"path":"/articles/A220-mTPI.html","id":"simulation","dir":"Articles","previous_headings":"Implementation in escalation","what":"Simulation","title":"mTPI - Modified Toxicity Probability Interval Design","text":"Ji et al. (2010) present simulations Table 1, comparing performance mTPI method designs. can use simulate_trials function reproduce operating characteristics. example concerns clinical trial eight doses targets 25% toxicity. must respecify model object reflect . also elect limit trial sample size n=30n=30: sake speed, run just fifty iterations: real life, however, naturally run many thousands iterations. scenario 1 assumes true probability toxicity: simulated behaviour : reproduces finding dose 2 overwhelmingly likely recommended, sample size virtually guaranteed 30, .e. early stopping unlikely. information running dose-finding simulations, refer simulation vignette.","code":"model <- get_mtpi(num_doses = 8, target = 0.25,                    epsilon1 = 0.05, epsilon2 = 0.05,                    exclusion_certainty = 0.95) %>%   stop_at_n(n = 30) num_sims <- 50 sc1 <- c(0.05, 0.25, 0.5, 0.6, 0.7, 0.8, 0.9, 0.95) set.seed(123) sims <- model %>%   simulate_trials(num_sims = num_sims, true_prob_tox = sc1, next_dose = 1)  sims #> Number of iterations: 50  #>  #> Number of doses: 8  #>  #> True probability of toxicity: #>    1    2    3    4    5    6    7    8  #> 0.05 0.25 0.50 0.60 0.70 0.80 0.90 0.95  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5      6      7      8  #>   0.00   0.16   0.72   0.10   0.02   0.00   0.00   0.00   0.00  #>  #> Probability of administration: #>     1     2     3     4     5     6     7     8  #> 0.238 0.604 0.148 0.010 0.000 0.000 0.000 0.000  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      30      30      30      30      30      30  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    5.00    6.00    7.00    7.46    8.75   11.00  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.55   26.62   29.19   29.81   31.98   45.52"},{"path":[]},{"path":"/articles/A230-BOIN.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BOIN - Bayesian Optimal Interval Design","text":"Bayesian Optimal Interval (BOIN) design introduced Liu Yuan (2015). one series dose-finding trial designs works partitioning probability toxicity set intervals. designs make dose-selection decisions determined interval probability toxicity current dose believed reside.","code":""},{"path":"/articles/A230-BOIN.html","id":"summary-of-the-boin-design","dir":"Articles","previous_headings":"","what":"Summary of the BOIN Design","title":"BOIN - Bayesian Optimal Interval Design","text":"BOIN seeks dose probability toxicity close pre-specified target level, pTp_T. Let probability toxicity dose ii pip_i. entire range possible values pip_i can broken following intervals: underdosing interval (UI), defined (0,λ1i)(0, \\lambda_{1i}); equivalence interval (EI), defined (λ1i,λ2i)(\\lambda_{1i}, \\lambda_{2i}); overdosing interval (OI), defined (λ2i,1)(\\lambda_{2i}, 1); Let πUI,,πEI,\\pi_{UI,}, \\pi_{EI,} πOI,\\pi_{OI,} -priori probabilities rate toxicity associated dose ii belongs intervals UI, EI OI. definition, πUI,+πEI,+πOI,=1\\pi_{UI,} + \\pi_{EI,} + \\pi_{OI,} = 1. authors advocate πUI,=πEI,=πOI,=13\\pi_{UI,} = \\pi_{EI,} = \\pi_{OI,} = \\frac{1}{3}. Let nin_i number patients treated dose ii, yielding xix_i toxicity events. -called local BOIN variant (.e. advocated Liu Yuan (2015)) defines: λ1i=log(1−ϕ11−pT)+1nilog(πUI,iπEI,)log(pT(1−ϕ1)ϕ1(1−pT)) \\lambda_{1i} = \\frac{\\log{\\left( \\frac{1 - \\phi_1}{1 - p_T} \\right)} + \\frac{1}{n_i} \\log{\\left( \\frac{\\pi_{UI,}}{\\pi_{EI,}} \\right)} }{ \\log{\\left( \\frac{p_T (1 - \\phi_1)}{\\phi_1 (1 - p_T)} \\right)} } λ2i=log(1−pT1−ϕ2)+1nilog(πEI,iπOI,)log(ϕ2(1−pT)pT(1−ϕ2)) \\lambda_{2i} = \\frac{\\log{\\left( \\frac{1 - p_T}{1 - \\phi_2} \\right)} + \\frac{1}{n_i} \\log{\\left( \\frac{\\pi_{EI,}}{\\pi_{OI,}} \\right)} }{ \\log{\\left( \\frac{ \\phi_2(1 - p_T)}{p_T (1 - \\phi_2)} \\right)} } ϕ1\\phi_1 ϕ2\\phi_2 model parameters. authors advocate ϕ1∈[0.5pT,0.7pT]\\phi_1 \\\\left[ 0.5pT, 0.7pT \\right] ϕ2∈[1.3pT,1.5pT]\\phi_2 \\\\left[ 1.3pT, 1.5pT \\right]. defaults, recommend ϕ1=0.6pT\\phi_1 = 0.6p_T ϕ2=1.4pT\\phi_2 = 1.4p_T. observed toxicity rate p̂=xi/ni\\hat{p}_i = x_i / n_i current dose ii, logical action depends interval p̂\\hat{p}_i resides. p̂<λ1i\\hat{p}_i < \\lambda_{1i}, current dose likely underdose, desire escalate dose +1i+1. contrast, p̂>λ2i\\hat{p}_i > \\lambda_{2i}, current dose likely overdose want de-escalate dose −1i-1 next patient. λ1i<p̂<λ2i\\lambda_{1i} < \\hat{p}_i < \\lambda_{2i}, current dose deemed sufficiently close pTp_T want stay dose-level ii. authors advocate stopping rule protect repeated administration dose evidently excessively toxic. proposed rule similar used TPI mTPI. Using Beta(1,1)Beta(1, 1) prior, dose ii deemed inadmissible excessively toxic Pr(pi>pT|xi,ni)>ξ, Pr(p_{} > p_{T} | x_i, n_i) > \\xi, certainty threshold, ξ\\xi, ξ=0.95\\xi = 0.95 suggested. dose excluded rule, recommended model. Irrespective values λ1i\\lambda_{1i} λ1i\\lambda_{1i}, design recommend stay dose ii rather escalate dose previously identified inadmissible. Furthermore, design advocate stopping lowest dose inferred inadmissible. See Liu Yuan (2015) Yuan Liu (2018) full details.","code":""},{"path":"/articles/A230-BOIN.html","id":"implementation-in-escalation","dir":"Articles","previous_headings":"","what":"Implementation in escalation","title":"BOIN - Bayesian Optimal Interval Design","text":"demonstrate method, let us reproduce dose selection sequence trial five doses targeting pT=0.3p_T = 0.3, described Yuan Liu (2018). Opting take defaults, ϕ1=0.6pT=0.18\\phi_1 = 0.6 p_T = 0.18 ϕ2=1.4pT=0.42\\phi_2 = 1.4 p_T = 0.42, create object fit model using: short-hand text paper describes outcomes ‘1NNN’ observed first cohort: leading advice escalate: next cohort also saw three non-toxicity events, leading advice: third cohort, two patients toxicity, leading advice: relatively low sample size dose 3 means dose yet rendered inadmissible:","code":"library(escalation)  model <- get_boin(num_doses = 5, target = 0.3) model <- get_boin(num_doses = 5, target = 0.3, p.saf = 0.18, p.tox = 0.42) fit <- model %>% fit('1NNN') fit %>% recommended_dose() #> [1] 2 fit <- model %>% fit('1NNN 2NNN') fit %>% recommended_dose() #> [1] 3 fit <- model %>% fit('1NNN 2NNN 3NTT') fit %>% recommended_dose() #> [1] 2 fit %>% dose_admissible() #> [1] TRUE TRUE TRUE TRUE TRUE"},{"path":"/articles/A230-BOIN.html","id":"final-dose-selection","dir":"Articles","previous_headings":"Implementation in escalation","what":"Final dose selection","title":"BOIN - Bayesian Optimal Interval Design","text":"BOIN, like designs, selects final dose differently selects doses mid-trial. achieve escalation, need extra selector kick-parent selector(s) selected non-NA dose expressed continue == FALSE, .e. signaled trial ends now interested dose. used, almost surely come last selector chain: example, stop_at_n stopped trial threshold sample size met, underlying algorithm identified least one dose worthy selection. juncture, select_boin_mtd took applied method described authors. Whilst underlying selector(s) busy conducting trial (continue == TRUE), select_boin_mtd kept silent.","code":"model <- get_boin(num_doses = 5, target = 0.3) %>%    stop_at_n(n = 12) %>%    select_boin_mtd()  outcomes <- '1NNN 2NTN 2NNN 3NTT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 2"},{"path":"/articles/A230-BOIN.html","id":"dose-paths","dir":"Articles","previous_headings":"Implementation in escalation","what":"Dose paths","title":"BOIN - Bayesian Optimal Interval Design","text":"can reproduce advice using dose-paths exhaustively calculate possible future model advice. example, observing 1NNN first cohort, can reproduce advice escalate seeing 2NNN de-escalate seeing 3NTT using: Thus, can trace path 1NNN 2NNN 3NNT, along every possible path two cohorts three observed 1NNN. information working dose-paths, refer dose-paths vignette.","code":"cohort_sizes <- c(3, 3) paths <- model %>% get_dose_paths(cohort_sizes = cohort_sizes,                                    previous_outcomes = '1NNN', next_dose = 2) graph_paths(paths)"},{"path":"/articles/A230-BOIN.html","id":"simulation","dir":"Articles","previous_headings":"Implementation in escalation","what":"Simulation","title":"BOIN - Bayesian Optimal Interval Design","text":"Liu Yuan (2015) present Table 4 simulated operating characteristics. can use simulate_trials function reproduce findings. example concerns clinical trial six doses targets 25% toxicity. specify model object reflect . also elect limit trial sample size n=36n=36: scenario 1 investigates true probability vector: sake speed, run just fifty iterations: real life, however, naturally run many thousands iterations. Running simulation: see small sample size, probability dose recommended similar reported: expected number patients treated dose level: information running dose-finding simulations, refer simulation vignette.","code":"model <- get_boin(num_doses = 6, target = 0.25) %>%    stop_at_n(n = 36) true_prob_tox <- c(0.25, 0.35, 0.5, 0.6, 0.7, 0.8) num_sims <- 50 sims <- model %>%    simulate_trials(num_sims = num_sims, true_prob_tox = true_prob_tox) prob_recommend(sims) #> NoDose      1      2      3      4      5      6  #>    0.1    0.7    0.2    0.0    0.0    0.0    0.0 colMeans(n_at_dose(sims)) #>     1     2     3     4     5     6  #> 23.16  9.00  1.38  0.00  0.00  0.00"},{"path":[]},{"path":[]},{"path":"/articles/A280-TITE.html","id":"tite-crm","dir":"Articles","previous_headings":"Introduction","what":"TITE-CRM","title":"TITE-CRM and TITE-NBG - Time-to-Event Designs","text":"Y. K. Cheung Chappell (2000) introduced TITE-CRM variant regular CRM (O’Quigley, Pepe, Fisher 1990) handles late-onset toxicities. Dose-finding trials tend use short toxicity window commencement therapy, patient evaluated presence absence dose-limiting toxicity (DLT). approach works well treatments like chemotherapy toxic reactions expected manifest relatively quickly. contrast, one hallmarks radiotherapy, instance, related adverse reactions can manifest many months start treatment. similar phenomenon may arise immunotherapies. adaptive dose-finding clinical trials, doses selected mid-trial response outcomes experienced patients evaluated hitherto, late-onset toxic events present distinct methodological challenge. Naturally, toxicity window need long enough give trial good chance observing events interest. , however, wait patient completes evaluation window using outcome forecast best dose, trial may take infeasibly long time ignore pertinent interim data. TITE-CRM presents solution introducing notion partial tolerance event. patient half way evaluation window yet experienced toxicity, may say experienced half tolerance. simple novelty allows partial information used dose-recommendation decisions. patient goes complete window toxic reaction, regarded completely tolerated treatment, normally case CRM dose-finding algorithms. notion partial events applied tolerances, however. patient experiences toxicity point evaluation window, immediately regarded experienced 100% DLT event. illustrate TITE-CRM mathematically, start likelihood plain vanilla CRM. Let YiY_i random variable taking values {0,1}\\{0, 1\\} reflecting absence presence DLT respectively patient ii. patient administered dose xix_i estimated probability toxicity F(xi,θ)F(x_i, \\theta), θ\\theta represents set model parameters. likelihood component arising patient ii F(xi,θ)Yi(1−F(xi,θ))1−Yi F(x_i, \\theta)^{Y_i} (1 - F(x_i, \\theta))^{1-Y_i} aggregate likelihood evaluation JJ patients LJ(θ)=∏=1J{F(xi,θ)}Yi{1−F(xi,θ)}1−Yi L_J(\\theta) = \\prod_{=1}^J \\left\\{ F(x_i, \\theta) \\right\\}^{Y_i} \\left\\{ 1 - F(x_i, \\theta) \\right\\}^{1-Y_i} Y. K. Cheung Chappell (2000) observed patient may provide weight, wiw_i, reflecting extend outcome evaluated. weighted likelihood LJ(θ)=∏=1J{wiF(xi,θ)}Yi{1−wiF(xi,θ)}1−Yi L_J(\\theta) = \\prod_{=1}^J \\left\\{ w_i F(x_i, \\theta) \\right\\}^{Y_i} \\left\\{ 1 - w_i F(x_i, \\theta) \\right\\}^{1-Y_i} TITE-CRM weights outcomes according extend patients completed evaluation period. illustrate design, reproduce example given p.124 Ying Kuen Cheung (2011). Four patients treated dose-level 3 part-way 126-day toxicity evaluation window. authors use empiric model one parameter, θ=β\\theta = \\beta, dose-toxicity relation F(xi,β)=xiexp(β)F(x_i, \\beta) = x_i^{exp(\\beta)}, N(0,σβ2)N(0, \\sigma_{\\beta}^2) prior specified β\\beta.","code":""},{"path":"/articles/A280-TITE.html","id":"tite-nbg","dir":"Articles","previous_headings":"Introduction","what":"TITE-NBG","title":"TITE-CRM and TITE-NBG - Time-to-Event Designs","text":"Neuenschwander, Branson, Gsponer (2008) (NBG) introduced derivative CRM dose-escalation clinical trials using two-parameter model (see NBG vignette). authors introduce time--event variant design simple add one escalation using method presented weight parameter, ww. demonstrate method alongside TITE-CRM.","code":""},{"path":[]},{"path":"/articles/A280-TITE.html","id":"tite-crm-1","dir":"Articles","previous_headings":"Implementation in escalation","what":"TITE-CRM","title":"TITE-CRM and TITE-NBG - Time-to-Event Designs","text":"regular CRM, require dose-toxicity skeleton target toxicity value. illustration, use parameters used plain CRM vignette: a0 fixed intercept value beta_sd SD slope parameter. design: Elsewhere escalation, represented outcomes using character strings. complexity specifying patient-level weights prevents approach time--event trials. Instead represent outcomes data-frames. example: represents scenario sequentially two patients dose-levels 1, 2 3. first three patients fully evaluated tolerating treatment (tox parameters 0 weight parameters 1). fifth patient also fully-weighted unfortunately experienced toxicity (tox parameter 1 weight parameter also 1). Finally, fourth sixth patients still evaluated without experienced toxicity far (tox parameters 0 weight parameters less 1). fit model outcomes, run: usual generic functions apply: Note Weight columns patient-level output.","code":"library(escalation)  skeleton <- c(0.05, 0.12, 0.25, 0.40, 0.55) target <- 0.25  a0 <- 3 beta_sd <- sqrt(1.34) model <- get_dfcrm_tite(   skeleton = skeleton,    target = target,   model = \"logistic\",    intcpt = a0,    scale = beta_sd ) outcomes <- data.frame(   dose = c(1, 1, 2, 2, 3, 3),   tox = c(0, 0, 0, 0, 1, 0),   weight = c(1, 1, 1, 0.9, 1, 0.5),   cohort = c(1, 2, 3, 4, 5, 6) )  outcomes #>   dose tox weight cohort #> 1    1   0    1.0      1 #> 2    1   0    1.0      2 #> 3    2   0    1.0      3 #> 4    2   0    0.9      4 #> 5    3   1    1.0      5 #> 6    3   0    0.5      6 x <- model %>% fit(outcomes) print(x) #> Patient-level data: #> # A tibble: 6 × 5 #>   Patient Cohort  Dose   Tox Weight #>     <int>  <int> <int> <int>  <dbl> #> 1       1      1     1     0    1   #> 2       2      2     1     0    1   #> 3       3      3     2     0    1   #> 4       4      4     2     0    0.9 #> 5       5      5     3     1    1   #> 6       6      6     3     0    0.5 #>  #> Dose-level data: #> # A tibble: 6 × 9 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0              0          0               0      TRUE       #> 2 1          0     2              0          0.0748          0.0748 TRUE       #> 3 2          0     2              0          0.164           0.164  TRUE       #> 4 3          1     2              0.5        0.310           0.310  TRUE       #> 5 4          0     0            NaN          0.460           0.460  TRUE       #> 6 5          0     0            NaN          0.599           0.599  TRUE       #> # ℹ 2 more variables: recommended <lgl>, Skeleton <dbl> #>  #> The model targets a toxicity level of 0.25. #> The model advocates continuing at dose 3. recommended_dose(x) #> [1] 3"},{"path":"/articles/A280-TITE.html","id":"tite-nbg-1","dir":"Articles","previous_headings":"Implementation in escalation","what":"TITE-NBG","title":"TITE-CRM and TITE-NBG - Time-to-Event Designs","text":"Let us reuse design presented justified Neuenschwander, Branson, Gsponer (2008) demonstrated NBG vignette: fit model outcomes TITE-CRM example, run: usual generic functions apply:","code":"dose <- c(1, 2.5, 5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 150, 200, 250)  model <- get_trialr_nbg_tite(   real_doses = dose, d_star = 250, target = 0.3,   alpha_mean = 2.15, alpha_sd = 0.84,   beta_mean = 0.52, beta_sd = 0.8,   seed = 2020 ) x <- model %>% fit(outcomes) print(x) #> Patient-level data: #> # A tibble: 6 × 5 #>   Patient Cohort  Dose   Tox    Weight #>     <int>  <int> <int> <int> <dbl[1d]> #> 1       1      1     1     0       1   #> 2       2      2     1     0       1   #> 3       3      3     2     0       1   #> 4       4      4     2     0       0.9 #> 5       5      5     3     1       1   #> 6       6      6     3     0       0.5 #>  #> Dose-level data: #> # A tibble: 16 × 9 #>    dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>    <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #>  1 NoDose     0     0              0          0               0      TRUE       #>  2 1          0     2              0          0.0969          0.0585 TRUE       #>  3 2          0     2              0          0.163           0.125  TRUE       #>  4 3          1     2              0.5        0.241           0.213  TRUE       #>  5 4          0     0            NaN          0.346           0.335  TRUE       #>  6 5          0     0            NaN          0.420           0.419  TRUE       #>  7 6          0     0            NaN          0.476           0.483  TRUE       #>  8 7          0     0            NaN          0.522           0.534  TRUE       #>  9 8          0     0            NaN          0.559           0.573  TRUE       #> 10 9          0     0            NaN          0.618           0.636  TRUE       #> 11 10         0     0            NaN          0.662           0.681  TRUE       #> 12 11         0     0            NaN          0.735           0.757  TRUE       #> 13 12         0     0            NaN          0.781           0.804  TRUE       #> 14 13         0     0            NaN          0.834           0.858  TRUE       #> 15 14         0     0            NaN          0.865           0.889  TRUE       #> 16 15         0     0            NaN          0.885           0.908  TRUE       #> # ℹ 2 more variables: recommended <lgl>, RealDose <dbl> #>  #> The model targets a toxicity level of 0.3. #> The model advocates continuing at dose 4. recommended_dose(x) #> [1] 4"},{"path":"/articles/A280-TITE.html","id":"dose-paths","dir":"Articles","previous_headings":"Implementation in escalation","what":"Dose paths","title":"TITE-CRM and TITE-NBG - Time-to-Event Designs","text":"Dose-paths make sense time--event designs practically infinite trial states continuous patient-level weights considered. Dose-paths implemented.","code":""},{"path":"/articles/A280-TITE.html","id":"simulation","dir":"Articles","previous_headings":"Implementation in escalation","what":"Simulation","title":"TITE-CRM and TITE-NBG - Time-to-Event Designs","text":"sake speed, run just iterations: real life, however, naturally run many iterations. Let us restrict design sample size 12 quick illustration. Running simulation: see small sample size low doses likely recommended: patients treated low dose-levels : simulated trial durations interest time--event trial: max_time parameter specified design calculate patient-level weights (.e. much observation window completed). example, patients assumed arrive one time intra-patient arrival times distributed Exponential(1) distribution; default. override , specify function sample_patient_arrivals parameter. function must take patient-level data-frame prevailing trial data parameter (.e. columns cohort, patient, dose, tox, time), return data-frame column time_delta nn rows containing arrival deltas next nn patients. example, consider want evaluate patients cohorts two. somewhat strange time--event design frees obligation use cohorts, simple implement. run: Note: return_all_fits = TRUE param means every model fit (interims final fits) returned. use peak way simulations occur. However, production run large number iterates many patients, lead memory problems. default, return_all_fits FALSE. patient arrival times (instance) third simulated trial iterate random always increasing: However, doses given (patients columns, simulated iterates rows) appear pairs reflect patients treated cohorts two: inclusion df parameter call sample_patient_arrivals lets tailor patient arrival process many creative ways, including variable cohort sizes, minimum intra-patient gaps, etc. information running dose-finding simulations, refer simulation vignette.","code":"true_prob_tox <- c(0.25, 0.35, 0.5, 0.6, 0.7, 0.8) num_sims <- 20 model <- get_dfcrm_tite(   skeleton = skeleton,    target = target,   model = \"logistic\",    intcpt = a0,    scale = beta_sd ) %>%    stop_at_n(n = 12)  set.seed(2025) sims <- model %>%    simulate_trials(     num_sims = num_sims,      true_prob_tox = true_prob_tox,     max_time = 10   ) prob_recommend(sims) #> NoDose      1      2      3      4      5  #>   0.00   0.75   0.20   0.05   0.00   0.00 colMeans(n_at_dose(sims)) #>    1    2    3    4    5  #> 9.70 0.15 1.40 0.55 0.20 trial_duration(sims) #>  [1] 19.64932 17.92124 20.81784 20.33176 19.79155 19.20623 24.85348 23.14870 #>  [9] 17.31764 23.62735 23.21265 18.13445 23.99437 21.26878 20.89885 20.28926 #> [17] 24.72482 28.22818 23.73679 26.39005 set.seed(2025) sims <- model %>%    simulate_trials(     num_sims = num_sims,      true_prob_tox = true_prob_tox,     max_time = 10,     sample_patient_arrivals = function(df) {       cohorts_of_n(n = 2, mean_time_delta = 1)     },     return_all_fits = TRUE   ) library(purrr) #>  #> Attaching package: 'purrr' #> The following object is masked from 'package:magrittr': #>  #>     set_names map_dbl(sims$fits[[3]], \"time\") #> [1]  0.000000  1.158482  2.835637  4.883962  7.830599  9.916354 10.534122 #> [8] 20.534122 doses_given(sims) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]    1    1    3    3    4    4    5    5    3     3     3     3 #>  [2,]    1    1    3    3    4    4    1    1    1     1     1     1 #>  [3,]    1    1    3    3    1    1    1    1    1     1     1     1 #>  [4,]    1    1    3    3    4    4    1    1    1     1     1     1 #>  [5,]    1    1    1    1    1    1    1    1    1     1     1     1 #>  [6,]    1    1    3    3    4    4    1    1    1     1     1     1 #>  [7,]    1    1    1    1    1    1    1    1    1     1     1     1 #>  [8,]    1    1    3    3    1    1    1    1    1     1     1     1 #>  [9,]    1    1    1    1    1    1    1    1    1     1     1     1 #> [10,]    1    1    3    3    1    1    1    1    1     1     1     1 #> [11,]    1    1    3    3    1    1    1    1    1     1     1     1 #> [12,]    1    1    3    3    1    1    1    1    1     1     1     1 #> [13,]    1    1    1    1    1    1    1    1    1     1     1     1 #> [14,]    1    1    3    3    4    4    1    1    1     1     1     1 #> [15,]    1    1    3    3    1    1    1    1    1     1     1     1 #> [16,]    1    1    1    1    1    1    1    1    1     1     1     1 #> [17,]    1    1    3    3    1    1    1    1    1     1     1     1 #> [18,]    1    1    4    4    1    1    1    1    1     1     1     1 #> [19,]    1    1    3    3    1    1    1    1    1     1     1     1 #> [20,]    1    1    3    3    1    1    1    1    1     1     1     1"},{"path":[]},{"path":"/articles/A310-EfficacyToxicity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"Seamless phase /II designs extend typical phase maximum tolerated dose-seeking approach incorporating efficacy outcomes dose selection decision. Researchers motivated escalate dose whilst lack efficacy de-escalate presence excess toxicity. One earliest designs space EffTox P. F. Thall Cook (2004). design uses logit models probability toxicity efficacy research doses, allows two events correlated joint model. Wages Tait (2015) introduced multi-stage design uses response-adaptive randomisation explore doses. recently, Lin et al. (2020) introduced generalisation BOIN Bayesian interval design efficacy toxicity outcomes called BOIN12. designs implemented escalation demonstrated . First, must learn specify efficacy toxicity outcomes escalation. next section.","code":""},{"path":"/articles/A310-EfficacyToxicity.html","id":"outcome-nomenclature","dir":"Articles","previous_headings":"","what":"Outcome nomenclature","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"joint phase /II trial, coincident efficacy toxicity outcomes, present outcomes individual patients using letters: T show toxicity without efficacy occurred patient; E show efficacy without toxicity occurred patient; N show neither occurred; B show occurred. outcome letters strewn behind dose-levels show outcomes patients cohorts. show cohort three patients given dose 2, first experiencing toxicity without efficacy, second experiencing efficacy without toxicity, third experiencing , use outcome string: many examples .","code":"outcomes <- '2TEB'"},{"path":"/articles/A310-EfficacyToxicity.html","id":"efftox","dir":"Articles","previous_headings":"","what":"EffTox","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"Thall & Cook (P. F. Thall Cook 2004) introduced EffTox design dose-finding clinical trials efficacy toxicity events guide dose selection decisions. provide brief recap EffTox , full details given (P. F. Thall Cook 2004; P. Thall, Cook, Estey 2006; P. Thall et al. 2014). doses 𝐲=(y1,...,yn)\\boldsymbol{y} = (y_1, ..., y_n), authors define codified doses (x1,...,xn)(x_1, ..., x_n) using transform xi=logyi−∑j=1nlogyjnx_i = \\log{y_i} - \\sum_{j=1}^n \\frac{\\log{y_j}}{n} codified doses used explanatory variables logit models marginal probabilities toxicity efficacy: logit πT=α+βx\\text{logit } \\pi_T = \\alpha + \\beta x logit πE=γ+ζx+ηx2\\text{logit } \\pi_E = \\gamma + \\zeta x + \\eta x^2 Let (Yj,Zj)(Y_j, Z_j) random variables taking values {0,1}\\{0, 1\\} representing presence efficacy toxicity patient jj. efficacy toxicity events associated joint probability function Pr(Y=,Z=b)=πa,b(πE,πT)=(πE)(1−πE)1−(πT)b(1−πT)1−b+(−1)+b(πE)(1−πE)(πT)(1−πT)eψ−1eψ+1Pr(Y = , Z = b) = \\pi_{,b}(\\pi_E, \\pi_T) = (\\pi_E)^(1-\\pi_E)^{1-} (\\pi_T)^b (1-\\pi_T)^{1-b} + (-1)^{+b} (\\pi_E) (1-\\pi_E) (\\pi_T) (1-\\pi_T) \\frac{e^\\psi-1}{e^\\psi+1}. Normal priors specified elements parameter vector 𝛉=(α,β,γ,ζ,η,ψ)\\boldsymbol{\\theta} = (\\alpha, \\beta, \\gamma, \\zeta, \\eta, \\psi). dose update decision, dose xx acceptable Pr{πT(x,𝛉)<π¯T|data}>pT\\text{Pr}\\left\\{ \\pi_T(x, \\boldsymbol{\\theta}) < \\overline{\\pi}_T | \\text{data} \\right\\} > p_T Pr{πE(x,𝛉)>π_E|data}>pE\\text{Pr}\\left\\{ \\pi_E(x, \\boldsymbol{\\theta}) > \\underline{\\pi}_E | \\text{data} \\right\\} > p_E one position lowest dose-level given one position highest dose-level given. net effect last two criteria untried doses may skipped escalation de-escalation. π_E,pE,π¯T,pT\\underline{\\pi}_E, p_E, \\overline{\\pi}_T, p_T provided user trial scenario dictates. utility dose xx, efficacy πE(x,𝛉)\\pi_E(x, \\boldsymbol{\\theta}) toxicity πT(x,𝛉)\\pi_T(x, \\boldsymbol{\\theta}) u(πE,πT)=1−((1−πE1−π1,E*)p+(πTπ2,T*)p)1pu(\\pi_E, \\pi_T) = 1 - \\left( \\left(\\frac{1-\\pi_E}{1-\\pi_{1,E}^*}\\right)^p + \\left(\\frac{\\pi_T}{\\pi_{2,T}^*}\\right)^p \\right) ^ \\frac{1}{p} pp calculated intersect points (π1,E*,0)(\\pi_{1,E}^*, 0), (1,π2,T*)(1, \\pi_{2,T}^*) (π3,E*,π3,T*)(\\pi_{3,E}^*, \\pi_{3,T}^*) efficacy-toxicity plain. refer hinge points common nomenclature. dose selection decision, dose-level acceptable set maximal utility selected given next patient cohort. acceptable doses, trial stops dose recommended. several published EffTox examples, including explanations tips parameter choices (P. F. Thall Cook 2004; P. Thall, Cook, Estey 2006; P. Thall et al. 2014).","code":""},{"path":"/articles/A310-EfficacyToxicity.html","id":"wages-tait","dir":"Articles","previous_headings":"","what":"Wages & Tait","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"design Wages Tait (2015) uses latent CRM models estimate probabilities toxicity efficacy, two stages identify recommended dose. first stage, design sequentially seeks dose probability toxicity nearest upper toxicity threshold, like classic CRM approach. second stage, design adaptively randomises permissible doses, .e. probability toxicity considered statistically toxic, greater randomisation weight given doses higher estimated efficacy rates. design uses toxicity skeleton, like CRM, several competing efficacy skeletons accommodate efficacy may monotonically increasing dose.","code":""},{"path":"/articles/A310-EfficacyToxicity.html","id":"boin12","dir":"Articles","previous_headings":"","what":"BOIN12","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"Bayesian Optimal Interval (BOIN) design introduced Liu Yuan (2015). one series dose-finding trial designs works partitioning probability toxicity set intervals. designs make dose-selection decisions determined interval probability toxicity current dose believed reside. BOIN12 generalisation applies similar logic co-primary binary toxicity efficacy outcomes.","code":""},{"path":"/articles/A310-EfficacyToxicity.html","id":"implementation-in-escalation","dir":"Articles","previous_headings":"","what":"Implementation in escalation","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"demonstrate methods, let us consider recommended dose observing outcomes 1NNN 2EBT seeking dose toxic 0.3 associated efficacy probability least 0.5. design, many parameters need set designs comparatively complex. Ordinarily, parameter choices justified light prevailing clinical scenario, evaluated simulation. purposes illustration document, however, going proceed typical general values.","code":"library(escalation)  outcomes <- \"1NNN 2EBT\""},{"path":"/articles/A310-EfficacyToxicity.html","id":"efftox-1","dir":"Articles","previous_headings":"Implementation in escalation","what":"EffTox","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"simplicity, use parametersiation specified example investigating five doses P. Thall et al. (2014):","code":"p <- trialr::efftox_priors(   alpha_mean = -7.9593, alpha_sd = 3.5487,   beta_mean = 1.5482, beta_sd = 3.5018,   gamma_mean = 0.7367, gamma_sd = 2.5423,   zeta_mean = 3.4181, zeta_sd = 2.4406,   eta_mean = 0, eta_sd = 0.2,   psi_mean = 0, psi_sd = 1 ) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) num_doses <- length(real_doses)  et_model <- get_trialr_efftox(   real_doses = real_doses,   efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,   p_e = 0.1, p_t = 0.1,   eff0 = 0.5, tox1 = 0.65,   eff_star = 0.7, tox_star = 0.25,   priors = p,    # Low MCMC sample size purely for speed in vignette:   iter = 1000, chains = 1, seed = 2020 ) et_fit <- et_model %>% fit(outcomes) et_fit #> Patient-level data: #> # A tibble: 6 × 5 #>   Patient Cohort  Dose   Tox   Eff #>     <int>  <int> <int> <int> <int> #> 1       1      1     1     0     0 #> 2       2      1     1     0     0 #> 3       3      1     1     0     0 #> 4       4      2     2     0     1 #> 5       5      2     2     1     1 #> 6       6      2     2     1     0 #>  #> Dose-level data: #> # A tibble: 6 × 12 #>   dose     tox   eff     n empiric_tox_rate mean_prob_tox median_prob_tox #>   <ord>  <dbl> <dbl> <dbl>            <dbl>         <dbl>           <dbl> #> 1 NoDose     0     0     0            0             0               0     #> 2 1          0     0     3            0             0.171           0.123 #> 3 2          2     2     3            0.667         0.298           0.273 #> 4 3          0     0     0          NaN             0.503           0.516 #> 5 4          0     0     0          NaN             0.583           0.699 #> 6 5          0     0     0          NaN             0.620           0.811 #> # ℹ 5 more variables: empiric_eff_rate <dbl>, mean_prob_eff <dbl>, #> #   median_prob_eff <dbl>, admissible <lgl>, recommended <lgl> #>  #> The model uses a toxicity limit of 0.3. #> The model uses an efficacy limit of 0.5. #> The model advocates continuing at dose 3. recommended_dose(et_fit) #> [1] 3 continue(et_fit) #> [1] TRUE dose_admissible(et_fit) #> [1] FALSE  TRUE  TRUE FALSE FALSE"},{"path":"/articles/A310-EfficacyToxicity.html","id":"wages-tait-1","dir":"Articles","previous_headings":"Implementation in escalation","what":"Wages & Tait","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"simplicity use parametersiation specified Wages Tait (2015), tweaked slightly reflect dose-levels targets specified EffTox example . toxicity skeleton specified plays exactly equivalent role seen CRM design. several efficacy skeletons allow efficacy may monotonic dose. use efficacy skeletons reflect : ) dose may maximum, monotonic increase subsequent decrease relative dose; ii) dose may plateau point, equal efficacy higher doses. general, generates 2n−12n - 1 efficacy skeletons trial nn doses. probabilities efficacy skeletons less important shape skeleton conveys average height dose-efficacy curve adjusted Bayesian updating. fit model outcomes: see dose advised next cohort: Note design differs EffTox doses infers admissible. Different designs behave different ways! Uncommonly seen dose-finding designs, design randomising design: Doses assigned patients first trial stage non-randomising way (.e. outcomes fit design yield recommended dose). contrast, doses randomised second trial stage correlated modelled efficacy probability dose.","code":"tox_skeleton = c(0.08, 0.15, 0.22, 0.29, 0.36)  eff_skeletons = matrix(nrow = 9, ncol = num_doses) eff_skeletons[1,] <- c(0.60, 0.50, 0.40, 0.30, 0.20) eff_skeletons[2,] <- c(0.50, 0.60, 0.50, 0.40, 0.30) eff_skeletons[3,] <- c(0.40, 0.50, 0.60, 0.50, 0.40) eff_skeletons[4,] <- c(0.30, 0.40, 0.50, 0.60, 0.50) eff_skeletons[5,] <- c(0.20, 0.30, 0.40, 0.50, 0.60) eff_skeletons[6,] <- c(0.30, 0.40, 0.50, 0.60, 0.60) eff_skeletons[7,] <- c(0.40, 0.50, 0.60, 0.60, 0.60) eff_skeletons[8,] <- c(0.50, 0.60, 0.60, 0.60, 0.60) eff_skeletons[9,] <- c(0.60, 0.60, 0.60, 0.60, 0.60) eff_skeleton_weights = rep(1, nrow(eff_skeletons))  wt_model <- get_wages_and_tait(   tox_skeleton = tox_skeleton,   eff_skeletons = eff_skeletons,   tox_limit = 0.3, eff_limit = 0.5,   num_randomise = 20 ) wt_fit <- wt_model %>% fit(outcomes) recommended_dose(wt_fit) #> [1] 1 continue(wt_fit) #> [1] TRUE dose_admissible(wt_fit) #> [1]  TRUE FALSE FALSE FALSE FALSE is_randomising(wt_fit) #> [1] TRUE"},{"path":"/articles/A310-EfficacyToxicity.html","id":"boin12-1","dir":"Articles","previous_headings":"Implementation in escalation","what":"BOIN12","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"illustration, use parameterisation presented justified Liu Yuan (2015). fit model outcomes using usual method: can obtain usual information presented many places vignettes: Unlike EffTox Wages & Tait, BOIN12 design performs additional step final dose recommendation select dose finally recommended. approach used BOIN mTIP2, instance. Read .","code":"b_model <- get_boin12(   num_doses = 5, phi_t = 0.3, phi_e = 0.5, u2 = 40, u3 = 60, n_star = 6 ) b_fit <- b_model %>% fit(outcomes) recommended_dose(b_fit) #> [1] 1 continue(b_fit) #> [1] TRUE dose_admissible(b_fit) #> [1] FALSE  TRUE  TRUE FALSE FALSE"},{"path":"/articles/A310-EfficacyToxicity.html","id":"final-dose-selection","dir":"Articles","previous_headings":"Implementation in escalation > BOIN12","what":"Final dose selection","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"BOIN12, like designs, selects final dose differently selects doses mid-trial. achieve escalation, need extra selector kick-parent selector(s) selected non-NA dose expressed continue == FALSE, .e. signaled trial ends now interested dose. used, almost surely come last selector chain: Note forced maximum sample size 12 provided outcomes 12 patients logic select_boin12_obd invoked. example, stop_at_n stopped trial threshold sample size met, underlying algorithm identified least one dose worthy selection. juncture, select_boin12_obd took applied method described authors. Whilst underlying selector(s) busy conducting trial (continue == TRUE), select_boin12_obd kept silent.","code":"b_model2 <- get_boin12(   num_doses = 5, phi_t = 0.3, phi_e = 0.5, u2 = 40, u3 = 60, n_star = 6 ) %>%   stop_at_n(n = 12) %>%   select_boin12_obd()  outcomes <- '1NNN 2NTN 2NNN 3BEN' b_model2 %>% fit(outcomes) %>% recommended_dose() #> [1] 3"},{"path":"/articles/A310-EfficacyToxicity.html","id":"rds-tabulation","dir":"Articles","previous_headings":"Implementation in escalation > BOIN12","what":"RDS tabulation","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"convenience, also implemented BOIN12’s RDS (rank-based desirability score) algorithm: return data-frame comprises: Patients, number patients Toxicity, number patients experiencing toxicity events Efficacy, number patients experiencing efficacy events Admissible, character label denoting admissibility status RDS, character label denoting score text format RDS_x, RDS numerical form (.e. appropriate sorting)","code":"boin12_rds(  sample_sizes = c(0, 3, 6, 9),  phi_t = 0.35,  phi_e = 0.25,  u1 = 100,  u2 = 40,  u3 = 60,  u4 = 0,  c_t = 0.95,  c_e = 0.9,  prior_alpha = 1,  prior_beta = 1 ) #> # A tibble: 166 × 6 #>    Patients Toxicity Efficacy Admissible RDS   RDS_x #>       <dbl>    <int>    <int> <chr>      <chr> <dbl> #>  1        0        0        0 Admissible 60       60 #>  2        3        0        0 Admissible 35       35 #>  3        3        0        1 Admissible 55       55 #>  4        3        0        2 Admissible 76       76 #>  5        3        0        3 Admissible 91       91 #>  6        3        1        0 Admissible 24       24 #>  7        3        1        1 Admissible 44       44 #>  8        3        1        2 Admissible 63       63 #>  9        3        1        3 Admissible 80       80 #> 10        3        2        0 Admissible 13       13 #> # ℹ 156 more rows"},{"path":"/articles/A310-EfficacyToxicity.html","id":"dose-paths","dir":"Articles","previous_headings":"","what":"Dose paths","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"designs escalation, can use dose-paths exhaustively calculate model advice possible future cohorts. However, first, note warning. phase 1/2 trials, four outcomes patient may experience (listed ), 10 distinct combinations outcomes cohort two patients may yield (n.b. counting combinations rather permutations), 20 combinations cohort three may yield. means size dose-path tree grows quickly, must modest aspirations lest overwhelmed information! example, observing 1NN initial cohort two patients, reproduce dose-advice next two cohorts two patients (.e. 100 paths). comparison, specify next dose 2. starts designs common place. Naturally, option can omitted design start whatever dose recommended seeing outcomes 1NN. visualise paths EffTox design, run: previous outcomes (.e. start new trial), omitted previous_outcomes parameter. can visualise equivalent using Wages & Tait design: BOIN12 design: might expect, see distinct differences dose decisions design. EffTox escalate example much readily. information working dose-paths, refer dose-paths vignette.","code":"cohort_sizes <- c(2, 2) outcomes <- \"1NN\"  et_paths <- et_model %>%    get_dose_paths(     cohort_sizes = cohort_sizes,      previous_outcomes = outcomes,     next_dose = 2   ) #> You have requested 100 paths. Be patient.  graph_paths(et_paths) wt_paths <- wt_model %>%    get_dose_paths(     cohort_sizes = cohort_sizes,      previous_outcomes = outcomes,     next_dose = 2   ) #> You have requested 100 paths. Be patient.  graph_paths(wt_paths) b_paths <- b_model %>%    get_dose_paths(     cohort_sizes = cohort_sizes,      previous_outcomes = outcomes,     next_dose = 2   ) #> You have requested 100 paths. Be patient.  graph_paths(b_paths)"},{"path":"/articles/A310-EfficacyToxicity.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"EffTox, Wages & Tait, and BOIN12 - Efficacy & Toxicity Designs","text":"can simulate trials using designs escalation. Computation using Bayesian designs can computationally costly purposes illustration vignette, simulate just twenty trials per design following true toxicity efficacy curves: promote comparability, give design just 12 patients (, just illustration) prevent design skipping doses escalation. simulate EffTox design, run: Wages & Tait design: BOIN12 design: compare designs, however, much efficient use method presented Sweeting et al. (2024) using simulate_compare:  stress , design parameters examples chosen haste merely illustration. work presented way constitutes valid comparison three designs. information running dose-finding simulations, refer simulation vignette.","code":"n_sim <- 20 true_prob_tox = c(0.02, 0.12, 0.17, 0.38, 0.55) true_prob_eff = c(0.25, 0.27, 0.52, 0.54, 0.54) et_model <- get_trialr_efftox(   real_doses = real_doses,   efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,   p_e = 0.1, p_t = 0.1,   eff0 = 0.5, tox1 = 0.65,   eff_star = 0.7, tox_star = 0.25,   priors = p,    # Low MCMC sample size purely for speed in vignette:   iter = 2000, chains = 1,  ) %>%    dont_skip_doses() %>%    stop_at_n(n = 12)  set.seed(2025) et_sims <- et_model %>%    simulate_trials(     num_sims = n_sim,      true_prob_tox = true_prob_tox,     true_prob_eff = true_prob_tox   ) et_sims #> Number of iterations: 20  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.02 0.12 0.17 0.38 0.55  #>  #> True probability of efficacy: #>    1    2    3    4    5  #> 0.02 0.12 0.17 0.38 0.55  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5  #>   0.10   0.00   0.00   0.05   0.35   0.50  #>  #> Probability of administration: #>     1     2     3     4     5  #> 0.253 0.253 0.291 0.203 0.000  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    9.00   12.00   12.00   11.85   12.00   12.00  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     0.0     1.0     2.0     2.1     3.0     5.0  #>  #> Total efficacies: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    1.00    2.00    1.85    3.00    4.00  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   5.844   8.951   9.953  10.759  12.937  22.432 wt_model <- get_wages_and_tait(   tox_skeleton = tox_skeleton,   eff_skeletons = eff_skeletons,   tox_limit = 0.3, eff_limit = 0.5,   num_randomise = 20 ) %>%    dont_skip_doses() %>%    stop_at_n(n = 12)  set.seed(2025) wt_sims <- wt_model %>%    simulate_trials(     num_sims = n_sim,      true_prob_tox = true_prob_tox,     true_prob_eff = true_prob_tox   ) wt_sims #> Number of iterations: 20  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.02 0.12 0.17 0.38 0.55  #>  #> True probability of efficacy: #>    1    2    3    4    5  #> 0.02 0.12 0.17 0.38 0.55  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5  #>   0.15   0.10   0.35   0.25   0.10   0.05  #>  #> Probability of administration: #>      1      2      3      4      5  #> 0.1972 0.3239 0.2958 0.1549 0.0282  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    3.00   12.00   12.00   10.65   12.00   12.00  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    1.00    2.00    1.75    2.25    5.00  #>  #> Total efficacies: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    1.00    1.50    1.65    2.00    5.00  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.3197  6.5617 11.1565 11.0194 13.9553 19.9895 b_model <- get_boin12(   num_doses = 5, phi_t = 0.3, phi_e = 0.5, u2 = 40, u3 = 60, n_star = 6 ) %>%   dont_skip_doses() %>%    stop_at_n(n = 12) %>%    select_boin12_obd()    set.seed(2025) b_sims <- b_model %>%    simulate_trials(     num_sims = n_sim,      true_prob_tox = true_prob_tox,     true_prob_eff = true_prob_tox   ) b_sims #> Number of iterations: 20  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.02 0.12 0.17 0.38 0.55  #>  #> True probability of efficacy: #>    1    2    3    4    5  #> 0.02 0.12 0.17 0.38 0.55  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5  #>   0.00   0.20   0.10   0.35   0.35   0.00  #>  #> Probability of administration: #>     1     2     3     4     5  #> 0.250 0.263 0.263 0.225 0.000  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      12      12      12      12      12      12  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    1.00    1.00    2.00    1.95    2.25    4.00  #>  #> Total efficacies: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    1.00    2.00    2.15    3.00    5.00  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   6.619   9.554  10.885  11.179  12.384  16.512 designs <- list(   EffTox = et_model,   WagesTait = wt_model,   BOIN12 = b_model )  sims <- simulate_compare(   designs = designs,    num_sims = n_sim,    true_prob_tox = true_prob_tox,   true_prob_eff = true_prob_tox ) #> Running BOIN12  #> Running EffTox  #> Running WagesTait convergence_plot(sims)"},{"path":[]},{"path":"/articles/A360-Combinations.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BOIN-COMB - Treatment Combination Designs","text":"great majority dose-finding designs intended use single treatment whose dose varied. small number designs intended dose-finding multiple therapies combined, dose one treatment can varied. notable feature challenge resulting dose space multi-dimensional. longer single optimal dose maximum tolerable dose identify contour treatment combinations similar event probabilities.","code":""},{"path":"/articles/A360-Combinations.html","id":"outcome-nomenclature","dir":"Articles","previous_headings":"","what":"Outcome nomenclature","title":"BOIN-COMB - Treatment Combination Designs","text":"outcome syntax used elsewhere escalation represent patient-level doses administered outcomes experienced extended handle treatment combinations. material change dose written. monotherapy setting, write 1 dose-level 1 2 dose-level 2, etc. treatment combination setting, use dotted decimal notation (like used IP-addresses), , example, third dose-level first treatment paired fourth dose-level second treatment written 3.4. outcome designators E, T, B N (representing efficacy , toxicity , effiecacy toxicity, neither efficacy toxicity) strung dose represent outcomes patients cohorts. currently designs implemented escalation investigate efficacy toxicity treatment combincations syntax can theoretically accomodate . illustration, let us imagine dose-finding trial three treatments trial patient can either experience toxicity T, toxicity N. Suppose first cohort three patients treated first dose-level three therapies none patients experiences toxicity. outcome string reflect : 1.1.1NNN Now suppose, way experimental design, decide dose-level first treatment escalated second level whilst dose-level second third treatments kept level 1. dose string become 2.1.1. Suppose give dose cohort three new patients, two patients tolerate without toxicity third patient experiences tox. outcome string whole trial far : 1.1.1NNN 2.1.1NNT syntax can used describe doses outcomes arrangement discrete dose-levels number treatments.","code":""},{"path":"/articles/A360-Combinations.html","id":"boin-comb","dir":"Articles","previous_headings":"","what":"BOIN-COMB","title":"BOIN-COMB - Treatment Combination Designs","text":"BOIN method originally presented Liu Yuan (2015) dose-finding single treatment. BOIN-COMB (Lin Yin 2017) generalises BOIN investigate doses exactly two treatments () search dose pairs toxicity probability close pre-specified target rate. Currently, BOIN-COMB design treatment combinations implemented escalation demonstrate examples .","code":""},{"path":[]},{"path":"/articles/A360-Combinations.html","id":"boin-comb-1","dir":"Articles","previous_headings":"Implementation in escalation","what":"BOIN-COMB","title":"BOIN-COMB - Treatment Combination Designs","text":"now demonstrate BOIN-COMB, focusing shape returned objects different monotherapy dose-finding. treatment combination examples, BOIN package authors investigate situation three doses first treatment paired five doses second treatment, targeting 30% toxicity rate. first big difference compared monotherapy dose-finding num_doses now must vector rather scalar integer: create dose selector: default, lower upper toxicity rate thresholds BOIN-COMB set p.saf = 0.6 * target = 0.18 p.tox = 1.4 * target = 0.42, call equivalent : Naturally can override values make escalation harder easier. now fit model outcomes. authors investigate outcomes: .e. first cohort three treated lowest dose combination tox experienced; second cohort, comprising seven patients, dosed second dose-level first treatment paired first dose-level second treatment, one patient experiencing tox; third cohort, comprising six patients, dosed second dose-level first treatment paired second dose-level second treatment, one patient experiencing tox. can see, lot information conveyed 27 characters. Let’s fit model: leading advice continue: dose 2.3:","code":"library(escalation)  num_doses <- c(3, 5) target <- 0.3 boin_fitter <- get_boin_comb(   num_doses = num_doses, target = target ) model <- get_boin_comb(   num_doses = num_doses, target = target,    p.saf = 0.18, p.tox = 0.42 ) outcomes <- \"1.1NNN 2.1NNNNNNT 2.2NNNNNT\" set.seed(2025) fit <- model %>% fit(outcomes) fit %>% continue() #> [1] TRUE fit %>% recommended_dose() #> [1] 2 3"},{"path":"/articles/A360-Combinations.html","id":"final-dose-selection","dir":"Articles","previous_headings":"Implementation in escalation > BOIN-COMB","what":"Final dose selection","title":"BOIN-COMB - Treatment Combination Designs","text":"BOIN-COMB, like designs, selects final dose differently selects doses mid-trial. achieve escalation, need extra selector kick-parent selector(s) selected non-NA dose expressed continue == FALSE, .e. signaled trial ends now interested dose. used, almost surely come last selector chain: example, stop_at_n stopped trial threshold sample size met, underlying algorithm identified least one dose worthy selection. juncture, select_boin_comb_mtd took applied method described authors. Whilst underlying selector(s) busy conducting trial (continue == TRUE), select_boin_comb_mtd kept silent.","code":"model <- get_boin_comb(num_doses = num_doses, target = target)  %>%    stop_at_n(n = 12) %>%    select_boin_comb_mtd()  outcomes <- '1.1NNN 1.2NTN 1.2NNN 2.1TNT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 1 2"},{"path":"/articles/A360-Combinations.html","id":"combination-with-other-dose-selectors","dir":"Articles","previous_headings":"Implementation in escalation","what":"Combination with other dose selectors","title":"BOIN-COMB - Treatment Combination Designs","text":"demonstrated get_boin_comb works auxiliary dose-selector stop_at_n. similar way, get_boin_comb work many dose-selectors escalation. instance, might wish stop trial reached target sample size recommended dose. instance, following model wants recommended dose 2.1: reached target sample size dose advocates stopping: Likewise, specified dose explicitly dose-indices: many dose-selectors escalation. PLease get contact discover combination work pretty sure !","code":"set.seed(2025) model <- get_boin_comb(num_doses = num_doses, target = target)  %>%    stop_when_n_at_dose(n = 3, dose = \"recommended\")  outcomes <- '1.1NNN 2.1NTN' x <- model %>% fit(outcomes)  recommended_dose(x) #> [1] 2 1 continue(x) #> [1] FALSE set.seed(2025) model <- get_boin_comb(num_doses = num_doses, target = target)  %>%    stop_when_n_at_dose(n = 3, dose = c(2, 1))  outcomes <- '1.1NNN 2.1NTN' x <- model %>% fit(outcomes)  recommended_dose(x) #> [1] 2 1 continue(x) #> [1] FALSE"},{"path":"/articles/A360-Combinations.html","id":"dose-paths","dir":"Articles","previous_headings":"Implementation in escalation","what":"Dose paths","title":"BOIN-COMB - Treatment Combination Designs","text":"Dose-paths combinations theoretically possible. However, present implemented yet: information working dose-paths, refer dose-paths vignette.","code":"cohort_sizes <- c(3, 3) paths <- model %>%    get_dose_paths(     cohort_sizes = cohort_sizes,      previous_outcomes = '1NNN', next_dose = 2   ) #> Error in dose_paths_function.combo_selector_factory(selector_factory$parent): Dose-paths for combination studies not yet implemented."},{"path":"/articles/A360-Combinations.html","id":"simulation","dir":"Articles","previous_headings":"Implementation in escalation","what":"Simulation","title":"BOIN-COMB - Treatment Combination Designs","text":"Simulations implemented combination designs necessary differences compared monotherapy situations. illustrate, continue BOIN-COMB design already introduced, use modest sample size: Let us specify plausible true dose-toxicity scenario: designs escalation, perform simulations like : default, get useful output: However, can dive deeper. generics can invoked sims object monotherapy scenarios can also used combinations studies. However, formats returned objects different reflect dose multi-dimensional. consider generics briefly now. number patients simulated trial behaves : number doses now vector: set possible dose-indices list, element vector integers: information succinctly represented dotted-decimal string notation: recommended final dose iterate available string form: matrix form, simulated iterates rows, treatment columns, matrix cells represending dose-index relevant treatment: number patients dose given trial now multi-dimensional array, 2*2 matrix BOIN-COMB. info many trials convenience represented list, one item simulated iterate: focusing just sample size recommended dose, data represented vector integers: information returned : Likewise, number toxicity events seen dose combination ieterate returned congruent form: total number toxicities seen doses iterate simple understand: BOIN-COMB assess efficacy, , equivalent functions return counts (merely return NA :) probability dose recommended presented data-frame, column dose containing vector dose indices dose (e.g. c(1, 1) pair first dose), dose_string comprising dotted-decimal string format: probability dose administered patient available average simulated iterates: within iterate: trial duration simple understand: summary gives data-frame summary doses (stopping without selecting dose) rows much information columns: as_tibble returns one row dose simulated iterate, offering deep-dive simulated trials: Furthermore, simulation comparison method Sweeting et al. (2024) implemented, allowing us efficiently investigate small differences competing designs code like:  information running dose-finding simulations, refer simulation vignette.","code":"model <- get_boin_comb(num_doses = num_doses, target = target)  %>%    stop_at_n(n = 12) %>%    select_boin_comb_mtd() true_prob_tox <- matrix(c(0.1, 0.2, 0.3, 0.4, 0.5,                           0.25, 0.35, 0.45, 0.55, 0.65,                           0.3, 0.4, 0.5, 0.6, 0.7),                         nrow = num_doses[1],                         ncol = num_doses[2],                         byrow = TRUE) true_prob_tox #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.10 0.20 0.30 0.40 0.50 #> [2,] 0.25 0.35 0.45 0.55 0.65 #> [3,] 0.30 0.40 0.50 0.60 0.70 set.seed(2025) sims <- model %>%   simulate_trials(num_sims = 10, true_prob_tox = true_prob_tox) sims #> Number of iterations: 10  #>  #> Number of doses: 3 5  #>  #> True probability of toxicity: #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.10 0.20 0.30 0.40 0.50 #> [2,] 0.25 0.35 0.45 0.55 0.65 #> [3,] 0.30 0.40 0.50 0.60 0.70 #>  #> Probability of recommendation: #> # A tibble: 16 × 3 #>    dose      dose_string prob_recommend #>    <list>    <chr>                <dbl> #>  1 <chr [1]> NoDose                 0   #>  2 <int [2]> 1.1                    0   #>  3 <int [2]> 1.2                    0.3 #>  4 <int [2]> 1.3                    0   #>  5 <int [2]> 1.4                    0   #>  6 <int [2]> 1.5                    0   #>  7 <int [2]> 2.1                    0.3 #>  8 <int [2]> 2.2                    0.2 #>  9 <int [2]> 2.3                    0   #> 10 <int [2]> 2.4                    0   #> 11 <int [2]> 2.5                    0   #> 12 <int [2]> 3.1                    0.1 #> 13 <int [2]> 3.2                    0.1 #> 14 <int [2]> 3.3                    0   #> 15 <int [2]> 3.4                    0   #> 16 <int [2]> 3.5                    0   #>  #> Probability of administration: #>       [,1]  [,2]  [,3] [,4] [,5] #> [1,] 0.275 0.225 0.025    0    0 #> [2,] 0.225 0.175 0.000    0    0 #> [3,] 0.025 0.050 0.000    0    0 #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      12      12      12      12      12      12  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     0.0     2.0     2.0     2.5     3.0     5.0  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   6.915   9.249  10.877  11.298  13.933  15.887 num_patients(sims) #>  [1] 12 12 12 12 12 12 12 12 12 12 num_doses(sims) #> [1] 3 5 dose_indices(sims) #> [[1]] #> [1] 1 1 #>  #> [[2]] #> [1] 1 2 #>  #> [[3]] #> [1] 1 3 #>  #> [[4]] #> [1] 1 4 #>  #> [[5]] #> [1] 1 5 #>  #> [[6]] #> [1] 2 1 #>  #> [[7]] #> [1] 2 2 #>  #> [[8]] #> [1] 2 3 #>  #> [[9]] #> [1] 2 4 #>  #> [[10]] #> [1] 2 5 #>  #> [[11]] #> [1] 3 1 #>  #> [[12]] #> [1] 3 2 #>  #> [[13]] #> [1] 3 3 #>  #> [[14]] #> [1] 3 4 #>  #> [[15]] #> [1] 3 5 dose_strings(sims) #>  [1] \"1.1\" \"1.2\" \"1.3\" \"1.4\" \"1.5\" \"2.1\" \"2.2\" \"2.3\" \"2.4\" \"2.5\" \"3.1\" \"3.2\" #> [13] \"3.3\" \"3.4\" \"3.5\" recommended_dose(sims, dose_string = TRUE) #>  [1] \"2.1\" \"2.2\" \"3.1\" \"2.1\" \"2.2\" \"1.2\" \"2.1\" \"1.2\" \"3.2\" \"1.2\" recommended_dose(sims, dose_string = FALSE) #>       [,1] [,2] #>  [1,]    2    1 #>  [2,]    2    2 #>  [3,]    3    1 #>  [4,]    2    1 #>  [5,]    2    2 #>  [6,]    1    2 #>  [7,]    2    1 #>  [8,]    1    2 #>  [9,]    3    2 #> [10,]    1    2 n_at_dose(sims) #> [[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    6    3    0    0    0 #> [2,]    3    0    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    0    0    0    0 #> [2,]    3    6    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    0    0    0    0 #> [2,]    6    0    0    0    0 #> [3,]    3    0    0    0    0 #>  #> [[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    0    0    0    0 #> [2,]    6    3    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    3    0    0    0 #> [2,]    0    3    0    0    0 #> [3,]    0    3    0    0    0 #>  #> [[6]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    6    0    0    0 #> [2,]    0    3    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[7]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    0    0    0    0 #> [2,]    9    0    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[8]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    6    3    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[9]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    3    0    0    0 #> [2,]    0    3    0    0    0 #> [3,]    0    3    0    0    0 #>  #> [[10]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    3    6    0    0    0 #> [2,]    0    3    0    0    0 #> [3,]    0    0    0    0    0 n_at_dose(sims, dose = \"recommended\") #>  [1] 3 6 3 6 3 6 9 6 3 6 n_at_recommended_dose(sims) #>  [1] 3 6 3 6 3 6 9 6 3 6 tox_at_dose(sims) #> [[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    2    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    3    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    0    0    0    0 #> [3,]    1    0    0    0    0 #>  #> [[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    1    3    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    2    0    0    0 #>  #> [[6]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    2    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[7]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    3    0    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[8]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    2    3    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[9]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #>  #> [[10]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    0 #> [2,]    0    2    0    0    0 #> [3,]    0    0    0    0    0 num_tox(sims) #>  [1] 2 3 2 4 2 2 3 5 0 2 eff_at_dose(sims) %>% head(2) #> [[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   NA   NA   NA   NA   NA #> [2,]   NA   NA   NA   NA   NA #> [3,]   NA   NA   NA   NA   NA #>  #> [[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   NA   NA   NA   NA   NA #> [2,]   NA   NA   NA   NA   NA #> [3,]   NA   NA   NA   NA   NA num_eff(sims) #>  [1] NA NA NA NA NA NA NA NA NA NA prob_recommend(sims) #> # A tibble: 16 × 3 #>    dose      dose_string prob_recommend #>    <list>    <chr>                <dbl> #>  1 <chr [1]> NoDose                 0   #>  2 <int [2]> 1.1                    0   #>  3 <int [2]> 1.2                    0.3 #>  4 <int [2]> 1.3                    0   #>  5 <int [2]> 1.4                    0   #>  6 <int [2]> 1.5                    0   #>  7 <int [2]> 2.1                    0.3 #>  8 <int [2]> 2.2                    0.2 #>  9 <int [2]> 2.3                    0   #> 10 <int [2]> 2.4                    0   #> 11 <int [2]> 2.5                    0   #> 12 <int [2]> 3.1                    0.1 #> 13 <int [2]> 3.2                    0.1 #> 14 <int [2]> 3.3                    0   #> 15 <int [2]> 3.4                    0   #> 16 <int [2]> 3.5                    0 prob_administer(sims, method = 0) #>       [,1]  [,2]  [,3] [,4] [,5] #> [1,] 0.275 0.225 0.025    0    0 #> [2,] 0.225 0.175 0.000    0    0 #> [3,] 0.025 0.050 0.000    0    0 prob_administer(sims, method = 1) #> [[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.50 0.25    0    0    0 #> [2,] 0.25 0.00    0    0    0 #> [3,] 0.00 0.00    0    0    0 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.25  0.0    0    0    0 #> [2,] 0.25  0.5    0    0    0 #> [3,] 0.00  0.0    0    0    0 #>  #> [[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.25    0    0    0    0 #> [2,] 0.50    0    0    0    0 #> [3,] 0.25    0    0    0    0 #>  #> [[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.25 0.00    0    0    0 #> [2,] 0.50 0.25    0    0    0 #> [3,] 0.00 0.00    0    0    0 #>  #> [[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.25 0.25    0    0    0 #> [2,] 0.00 0.25    0    0    0 #> [3,] 0.00 0.25    0    0    0 #>  #> [[6]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.25 0.50    0    0    0 #> [2,] 0.00 0.25    0    0    0 #> [3,] 0.00 0.00    0    0    0 #>  #> [[7]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.25    0    0    0    0 #> [2,] 0.75    0    0    0    0 #> [3,] 0.00    0    0    0    0 #>  #> [[8]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.25  0.5 0.25    0    0 #> [2,] 0.00  0.0 0.00    0    0 #> [3,] 0.00  0.0 0.00    0    0 #>  #> [[9]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.25 0.25    0    0    0 #> [2,] 0.00 0.25    0    0    0 #> [3,] 0.00 0.25    0    0    0 #>  #> [[10]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.25 0.50    0    0    0 #> [2,] 0.00 0.25    0    0    0 #> [3,] 0.00 0.00    0    0    0 trial_duration(sims) #>  [1] 14.275537 10.076049  6.915256 12.905144  9.157043 14.414556 15.886741 #>  [8]  8.150282 11.678720  9.523587 summary(sims) #> # A tibble: 16 × 6 #>    dose     tox     n true_prob_tox prob_recommend prob_administer #>    <fct>  <dbl> <dbl>         <dbl>          <dbl>           <dbl> #>  1 NoDose   0     0            0               0             0     #>  2 1.1      0     3.3          0.1             0             0.275 #>  3 1.2      0.4   2.7          0.2             0.3           0.225 #>  4 1.3      0.3   0.3          0.3             0             0.025 #>  5 1.4      0     0            0.4             0             0     #>  6 1.5      0     0            0.5             0             0     #>  7 2.1      0.5   2.7          0.25            0.3           0.225 #>  8 2.2      1     2.1          0.35            0.2           0.175 #>  9 2.3      0     0            0.45            0             0     #> 10 2.4      0     0            0.55            0             0     #> 11 2.5      0     0            0.65            0             0     #> 12 3.1      0.1   0.3          0.3             0.1           0.025 #> 13 3.2      0.2   0.6          0.4             0.1           0.05  #> 14 3.3      0     0            0.5             0             0     #> 15 3.4      0     0            0.6             0             0     #> 16 3.5      0     0            0.7             0             0 tibble::as_tibble(sims) #> # A tibble: 160 × 12 #>    .iteration .depth  time dose     tox     n empiric_tox_rate mean_prob_tox #>         <int>  <dbl> <dbl> <ord>  <dbl> <dbl>            <dbl>         <dbl> #>  1          1      5  14.3 NoDose     0     0            0           0       #>  2          1      5  14.3 1.1        0     6            0           0.00820 #>  3          1      5  14.3 1.2        2     3            0.667       0.619   #>  4          1      5  14.3 1.3        0     0          NaN           0.619   #>  5          1      5  14.3 1.4        0     0          NaN           0.619   #>  6          1      5  14.3 1.5        0     0          NaN           0.619   #>  7          1      5  14.3 2.1        0     3            0           0.0161  #>  8          1      5  14.3 2.2        0     0          NaN           0.619   #>  9          1      5  14.3 2.3        0     0          NaN           0.619   #> 10          1      5  14.3 2.4        0     0          NaN           0.619   #> # ℹ 150 more rows #> # ℹ 4 more variables: median_prob_tox <dbl>, admissible <lgl>, #> #   recommended <lgl>, true_prob_tox <dbl> model1 <- get_boin_comb(   num_doses = num_doses, target = target,    p.saf = 0.6 * target, p.tox = 1.4 * target ) %>%    stop_at_n(n = 12) %>%    select_boin_comb_mtd()  model2 <- get_boin_comb(   num_doses = num_doses, target = target,    p.saf = 0.5 * target, p.tox = 1.5 * target ) %>%    stop_at_n(n = 12) %>%    select_boin_comb_mtd()  designs <- list(   model1 = model1,   model2 = model2 )  set.seed(2025) sims <- simulate_compare(   designs = designs,   num_sims = 10,   true_prob_tox = true_prob_tox ) #> Running model1  #> Running model2 convergence_plot(sims) tibble::as_tibble(sims) #> # A tibble: 150 × 22 #>    dose      n design.x hit.x design.y hit.y     X    X2     Y    Y2    XY  psi1 #>    <chr> <int> <ord>    <lgl> <ord>    <lgl> <int> <dbl> <int> <dbl> <int> <dbl> #>  1 1.1       1 model2   FALSE model1   FALSE     0     0     0     0     0     0 #>  2 1.1       2 model2   FALSE model1   FALSE     0     0     0     0     0     0 #>  3 1.1       3 model2   FALSE model1   FALSE     0     0     0     0     0     0 #>  4 1.1       4 model2   FALSE model1   FALSE     0     0     0     0     0     0 #>  5 1.1       5 model2   FALSE model1   FALSE     0     0     0     0     0     0 #>  6 1.1       6 model2   FALSE model1   FALSE     0     0     0     0     0     0 #>  7 1.1       7 model2   FALSE model1   FALSE     0     0     0     0     0     0 #>  8 1.1       8 model2   FALSE model1   FALSE     0     0     0     0     0     0 #>  9 1.1       9 model2   FALSE model1   FALSE     0     0     0     0     0     0 #> 10 1.1      10 model2   FALSE model1   FALSE     0     0     0     0     0     0 #> # ℹ 140 more rows #> # ℹ 10 more variables: psi2 <dbl>, v_psi1 <dbl>, v_psi2 <dbl>, cov_psi12 <dbl>, #> #   delta <dbl>, v_delta <dbl>, se_delta <dbl>, delta_l <dbl>, delta_u <dbl>, #> #   comparison <chr>"},{"path":[]},{"path":"/articles/A600-DosePaths.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Working with dose-paths","text":"Dose-finding clinical trials investigate experimental agents, seeking doses tolerable active. commonly use dose-selection model analyse binary outcomes increasing doses cohorts patients. possible analyse behaviour dose-finding design exhaustively calculating every possible set outcomes invoking dose selection model . refer hypothetical sequences doses response outcomes dose-paths. example make clear. 3+3 design widely understood. One benefits simplicity. Let us investigate first two cohorts three patients 3+3 variant permits de-escalation. calculate dose-paths escalation using get_dose_paths function: get_dose_paths takes dose-selection methodology enumerates every possible path according cohort sizes specify. returned paths object contains lot information pertinent perhaps sequence dose-recommendations response hypothetical outcomes: see trial starts dose 1. three non-toxicities (N) seen, algorithm advocates escalation dose 2. constrast two toxicities (T) seen first cohort, dose selected (dose NA) trial stops. Subsequent cohorts represented greater levels indentation. information better represented graph. using RStudio, graph appear Viewer pane. (vignette, suppress non-RStudio demonstration graphs avoid problems CRAN computers.) blue node towards centre bearing number 1 represents start trial. edges graph (lines connecting nodes) represent outcomes cohorts patients. , see three N events seen, trial escalates dose 2. Three patients assumed treated dose , escalation dose 3 advised toxicity seen. contrast, dose 2 retained cohort three single toxicity seen, de-escalation dose 1 occur two toxicities seen. exactly behaviour expect 3+3 design. Dose-paths introduced phase setting consider Yap et al. (2017). phase /II analogue introduced Brock et al. (2017) dose-finding trials consider efficacy toxicity outcomes.","code":"library(escalation) #> Loading required package: magrittr paths <- get_three_plus_three(num_doses = 5, allow_deescalate = TRUE) %>%    get_dose_paths(cohort_sizes = c(3, 3)) paths #> Give dose 1:  #>   NNN -> 2  #>     NNN -> 3  #>     NNT -> 2  #>     NTT -> 1  #>     TTT -> 1  #>   NNT -> 1  #>     NNN -> 2  #>     NNT -> NA  #>     NTT -> NA  #>     TTT -> NA  #>   NTT -> NA  #>   TTT -> NA if(Sys.getenv(\"RSTUDIO\") == \"1\") {   graph_paths(paths) }"},{"path":[]},{"path":"/articles/A600-DosePaths.html","id":"crm","dir":"Articles","previous_headings":"Other Models","what":"CRM","title":"Working with dose-paths","text":"example uses 3+3 design methods available. fact, early phase statisticians much prefer use model-based method (Wheeler et al. 2019). escalation package intentionally written dose selectors look , regardless implementation-level details. computing terminology, dose selectors escalation support common interface. makes trivial calculate dose-paths dose-selectors - just use get_dose_paths function . Let us investigate continual reassessment method (CRM) design now, described O’Quigley, Pepe, Fisher (1990) implemented dfcrm package (Cheung 2013). must specify dose-toxicity skeleton, target toxicity level: can specify CRM model calculate dose-paths : graph paths time (adopt different colour palette fun): see Stop node absent - paths recommend dose, even seeing substaantial toxicity. Stopping behaviours must specified CRM method. Fortunately, escalation makes simple. intuitive method stopping Bayesian setting test posterior distribution probability toxicity. example, stop least 90% probability toxicity rate lowest dose 35% greater: visualise paths updated model: see paths recommend stopping. paths recommend dose otherwise unchanged.","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 paths <- get_dfcrm(skeleton = skeleton, target = target) %>%   get_dose_paths(cohort_sizes = c(3, 3)) if(Sys.getenv(\"RSTUDIO\") == \"1\") {   graph_paths(paths, viridis_palette = 'magma') } paths <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.9) %>%    get_dose_paths(cohort_sizes = c(3, 3)) if(Sys.getenv(\"RSTUDIO\") == \"1\") {   graph_paths(paths, viridis_palette = 'inferno') }"},{"path":"/articles/A600-DosePaths.html","id":"boin","dir":"Articles","previous_headings":"Other Models","what":"BOIN","title":"Working with dose-paths","text":"Another dose-escalation model implemented escalation Bayesian optimal interval (BOIN) method Liu Yuan (2015), implemented BOIN package (Yuan Liu 2018). spice things , visualise model behaves four cohorts two patients: first thing note graph much complex previous graphs. number nodes dose-paths increases faster linearly cohorts considered. Consideration must given visualising dose-paths. Secondly, visual method makes simple discern messages future model behaviour. instance, can easily see dose 4, darkest red node, reached first four cohorts first cohort sees toxicity. contrast CRM, BOIN stopping rule excess toxicity built . see TT first cohort enough advocate stopping toxicity second cohort sufficient warrant stopping.","code":"paths <- get_boin(num_doses = 4, target = target) %>%    get_dose_paths(cohort_sizes = rep(2, 4)) #> You have requested 121 model evaluations. Be patient.  if(Sys.getenv(\"RSTUDIO\") == \"1\") {   graph_paths(paths, RColorBrewer_palette = 'YlOrRd') }"},{"path":[]},{"path":"/articles/A600-DosePaths.html","id":"non-uniform-cohorts","dir":"Articles","previous_headings":"Further options","what":"Non-uniform cohorts","title":"Working with dose-paths","text":"reason cohort sizes uniform. Specify whatever cohort_sizes like: can even evaluate dose advice patient using cohort sizes 1:","code":"paths <- get_boin(num_doses = 4, target = target) %>%    get_dose_paths(cohort_sizes = c(3, 1, 2))  if(Sys.getenv(\"RSTUDIO\") == \"1\") {   graph_paths(paths, RColorBrewer_palette = 'Blues') } paths <- get_boin(num_doses = 4, target = target) %>%    get_dose_paths(cohort_sizes = rep(1, 4))  if(Sys.getenv(\"RSTUDIO\") == \"1\") {   graph_paths(paths, RColorBrewer_palette = 'RdPu') }"},{"path":"/articles/A600-DosePaths.html","id":"partially-completed-trials","dir":"Articles","previous_headings":"Further options","what":"Partially completed trials","title":"Working with dose-paths","text":"possible calculate dose-paths trials partially completed. instance, let us continue BOIN model assume seen outcomes 1NNN 2TNT far trial. Thus, reasonably sure dose 1 safe wary dose 2 might toxic. However, beliefs tempered tiny sample size. starting point, might next two cohorts three proceed? just specify previous outcomes using previous_outcomes parameter: Notice different advice get start trial (.e. omitting previous_outcomes): feature model-based methods like CRM BOIN - use information doses making dose decisions. memoryless like 3+3.","code":"paths <- get_boin(num_doses = 4, target = target) %>%    get_dose_paths(cohort_sizes = rep(3, 2), previous_outcomes = '1NNN 2TNT')  if(Sys.getenv(\"RSTUDIO\") == \"1\") {   graph_paths(paths, viridis_palette = 'viridis') } paths <- get_boin(num_doses = 4, target = target) %>%    get_dose_paths(cohort_sizes = rep(3, 2))  if(Sys.getenv(\"RSTUDIO\") == \"1\") {   graph_paths(paths, viridis_palette = 'viridis') }"},{"path":"/articles/A600-DosePaths.html","id":"next-dose","dir":"Articles","previous_headings":"Further options","what":"Next dose","title":"Working with dose-paths","text":"dose dose-paths commence inferred model. can specified manually, however: 3+3 trial de-escalation enabled de-escalate doses toxicity seen, expected.","code":"paths <- get_three_plus_three(num_doses = 5, allow_deescalate = TRUE) %>%    get_dose_paths(cohort_sizes = c(3, 3), next_dose = 3)  if(Sys.getenv(\"RSTUDIO\") == \"1\") {   graph_paths(paths, viridis_palette = 'plasma') }"},{"path":"/articles/A600-DosePaths.html","id":"crystallised-dose-paths","dir":"Articles","previous_headings":"","what":"Crystallised dose-paths","title":"Working with dose-paths","text":"Calculating dose-paths useful visually examining conditions dose-finding design escalate de-escalate stop. However, part story. marry dose-paths assumed true event probabilities, can calculate exact operating characteristics design. refer crystallising dose paths likelihood path calculated precisely according assumed truth. instance, can calculate dose-paths first four cohorts three patients using CRM stopping design specified previously: can crystallise paths using toxicity probabilities exactly match beliefs skeleton: see scenario, probability path stopping advocating dose within first four cohorts close zero. contrast, toxicity probabilities much greater anticipated: probability selecting dose within first four cohorts 30%. information labelled Probability continuance: shows aggregate probability paths continuing advocate experimentation doses, .e. paths advocate stopping. see probability continuance 1 minus probability selecting dose. However, need necessarily case paths can advocate stopping recommend dose. might felt suitable dose identified. make point, let us imagine add rule design allows stopping 9 patients allocated recommended dose. can think stopping consensus. Respecifying model recalculating dose-paths, : see reduced probability stopping excess toxicity inflated chances recommending dose 1. Notably, probability continuance now roughly 14%, suggesting paths advocated stopping now, either toxicity concensus. like performance, can make consensus stopping rule demanding requesting 12 recommended dose advocate stopping: usual, deriving acceptable design iterative process. tools escalation make easier arrive design performs want. Combining dose-paths true event probabilities allows probabilistic inference dose-finding designs. novel extension use advocated Yap et al. (2017) Brock et al. (2017). use exact operating characteristics implemented 3+3 design bcrm package (Sweeting Wheeler 2019). generalise method .","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25  paths <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.9) %>%    get_dose_paths(cohort_sizes = rep(3, 4)) #> You have requested 341 model evaluations. Be patient. true_prob_tox <- skeleton  x <- paths %>% calculate_probabilities(true_prob_tox = true_prob_tox) x #> Number of nodes: 213  #> Number of terminal nodes: 160  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.05 0.10 0.25 0.40 0.60  #>  #> Probability of recommendation: #>   NoDose        1        2        3        4        5  #> 0.000127 0.019866 0.227135 0.451791 0.273014 0.028066  #>  #> Probability of continuance: #> [1] 1 #>  #> Probability of administration: #>      1      2      3      4      5  #> 0.3172 0.1602 0.1867 0.2734 0.0626  #>  #> Expected sample size: #> 11.99887 #>  #> Expected total toxicities: #> 2.705489 true_prob_tox <- c(0.45, 0.6, 0.68, 0.75, 0.81)  x <- paths %>% calculate_probabilities(true_prob_tox = true_prob_tox) x #> Number of nodes: 213  #> Number of terminal nodes: 160  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.45 0.60 0.68 0.75 0.81  #>  #> Probability of recommendation: #>    NoDose         1         2         3         4         5  #> 0.3027462 0.6407708 0.0502073 0.0055527 0.0006931 0.0000299  #>  #> Probability of continuance: #> [1] 0.697 #>  #> Probability of administration: #>        1        2        3        4        5  #> 0.895800 0.052921 0.008539 0.042028 0.000711  #>  #> Expected sample size: #> 10.73269 #>  #> Expected total toxicities: #> 5.102913 paths <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.9) %>%    stop_when_n_at_dose(dose = 'recommended', n = 9) %>%    get_dose_paths(cohort_sizes = rep(3, 4)) #> You have requested 341 model evaluations. Be patient.  x <- paths %>% calculate_probabilities(true_prob_tox = true_prob_tox) x #> Number of nodes: 141  #> Number of terminal nodes: 106  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.45 0.60 0.68 0.75 0.81  #>  #> Probability of recommendation: #>    NoDose         1         2         3         4         5  #> 0.2103223 0.7393498 0.0440522 0.0055527 0.0006931 0.0000299  #>  #> Probability of continuance: #> [1] 0.137 #>  #> Probability of administration: #>        1        2        3        4        5  #> 0.895800 0.052921 0.008539 0.042028 0.000711  #>  #> Expected sample size: #> 9.064864 #>  #> Expected total toxicities: #> 4.352391 paths <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.9) %>%    stop_when_n_at_dose(dose = 'recommended', n = 12) %>%    get_dose_paths(cohort_sizes = rep(3, 4)) #> You have requested 341 model evaluations. Be patient.  x <- paths %>% calculate_probabilities(true_prob_tox = true_prob_tox) x #> Number of nodes: 213  #> Number of terminal nodes: 160  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.45 0.60 0.68 0.75 0.81  #>  #> Probability of recommendation: #>    NoDose         1         2         3         4         5  #> 0.3027462 0.6407708 0.0502073 0.0055527 0.0006931 0.0000299  #>  #> Probability of continuance: #> [1] 0.24 #>  #> Probability of administration: #>        1        2        3        4        5  #> 0.895800 0.052921 0.008539 0.042028 0.000711  #>  #> Expected sample size: #> 10.73269 #>  #> Expected total toxicities: #> 5.102913"},{"path":"/articles/A600-DosePaths.html","id":"dose-paths-vs-simulation","dir":"Articles","previous_headings":"Crystallised dose-paths","what":"Dose-paths vs simulation","title":"Working with dose-paths","text":"saw probabilistic inference possible dose-paths. Researchers typically used simulation achieve task. escalation supports simulation well simulate_trials function. However, raise question, use method, relative merits? answer first question comes expected number model fits required. Fitting dose-finding models takes computer time. dose-paths, model fit node. seen examples number size cohorts affects number nodes dose-paths. fact, escalation provides function calculate number nodes. phase 1 dose-finding trial, patient experiences exactly one two outcomes: T N. Let us calculate many nodes graph dose-paths using five cohorts three patients. run: num_patient_outcomes = 2 parameter reflects patients may experience T N. returned vector integers number nodes depth. one starting node. node connected four children via outcomes NNN, NNT, NTT, TTT. number nodes greater depths proceeds multiplicatively thereafter. total number nodes : Thus requires exactly 1,365 model fits calculate exact operating characteristics n=5×3=15n = 5 \\times 3 = 15 patient scenario. compare simulations, consider simulated trial iteration fit model five times, end cohort. total number model fits simulation study bounded number multiplied number simulated iterations. Generally simulation studies use thousands replicates, easy see exact inference via crystallised dose-paths much less computaionally burdensome, therefore faster . contrast, now consider trial eight cohorts three. total number model fits enumerate complete graph dose-paths Ten thousand simulated iterations 8 cohorts require 80,000 model fits. Thus, reasonably accurate simulation study expected faster . However, speed concern: also precision consider. Simulations disadvantage suffering Monte Carlo error, uncertainty estimated statistics arising use finite number simulated iterations. contrast, exact inference via dose-paths great advantage exact. , uncertainty calculated probabilities. (Note: still uncertainty path taken determined random patient outcomes). Thus, scenarios dose-paths may still preferable simulations, even expected take longer. likely practice, simulation used dose-paths better option. true, likely linked provision software performs two methods. escalation plugs gap.","code":"num_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(3, 5)) #> [1]    1    4   16   64  256 1024 num_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(3, 5)) %>%    sum #> [1] 1365 num_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(3, 8)) %>%    sum #> [1] 87381"},{"path":[]},{"path":"/articles/A700-Simulation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulating dose-escalation trials","text":"reading document simulating dose-finding trials using escalation package, sure check README file. explains compose dose-finding designs using flexible syntax provided escalation. composed design appeals, want learn operating performance running many simulated trials, possibly compare competing designs. focus vignette. study simulations believe predict performance can expect reality. operating performance, mean: often design recommends desirable dose; many patients treated; many patients treated desirable doses; many toxicities seen; often design recommends stopping; long trials take; . often interested absolute levels quantities, compare competing designs. comparing designs, efficient method called simulate_compare examines decisions many design simulated patients reduce Monte Carlo uncertainty.","code":""},{"path":"/articles/A700-Simulation.html","id":"simulating-trials-in-escalation","dir":"Articles","previous_headings":"","what":"Simulating trials in escalation","title":"Simulating dose-escalation trials","text":"Simulations run using simulate_trials simulate_compare functions. functions can called dose-escalation design escalation. Specifying dose-escalation models focus package README file. simulate_trials runs simulations single particular design. focus vignette. contrast, simulate_compare compares several competing designs using efficient methods share notional patients across designs, ensuring efficient comparisons. topic focus Simulation Comparison vignette.","code":""},{"path":"/articles/A700-Simulation.html","id":"the-simplest-example","dir":"Articles","previous_headings":"Simulating trials in escalation","what":"The simplest example","title":"Simulating dose-escalation trials","text":"Let us start simple example simulating performance 3+3 design trial five doses. need specify unknown true probabilities toxicity doses investigation. Let us investigate: , doses 1 2 clinicians describe tolerable, doses 3, 4, 5 reasonably toxic. 3+3 design target particular probability toxicity empirically, design tends target doses associated toxicity rates 10-25%(Korn et al. 1994; Iasonos et al. 2008). must load escalate package: purposes illustration, let us simulate modest number trials: reality, want confidence simulated results, tend run thousands iterations (Wheeler et al. 2019). run small number vignette compiles quickly. run simulations scenario using: set random number generator seed example results (hopefully) reproducible. Despite setting seed, results still vary across different operating systems versions R. printed screen, sims object shows useful summary information: pieces information available progmatically R functions. instance, probability recommending dose final analysis, inferred simulated iterations, : Bear mind probabilities result random process. run simulations different seed, get different results. Recall also informed small number simulated replicates considerable uncertainty around statistics. ran greater number replicates, less uncertainty. infer probabilities design likely recommend one first two doses. However, non-trivial probability design recommend third dose, probably toxic, recommend dose . many patients required? see simulated trials use 3 24 patients, expected number 9-12. , 3-4 treated dose eventually recommended. can see many patients treated dose trial--trial basis. allocation counts first 10 trials: information aggregated probabilities administation, .e. probability individual patient treated dose-level: might alarmed learn roughly 25% patients treated doses 3-5, doses believe excessively toxic. can also see many toxicities dose simulated trials (, just first 10): summary total number toxicities seen replicates: expect see 2-3 toxicities using design scenario iteration producing 6 toxicities. convenience, simulations can cast tibble: returns tidyverse tibble, essentially fancy data-frame, followign columns: .iteration, number simulated trial iteration, .e. .iteration == 1 first simulated trial, etc; .depth, cohort number. example see first trial ended second cohort second trial went far cohort 9; time, time analysis, essentially sum intra-patient recruitment times; dose, numerical dose-level ‘NoDose’ option select dose; tox, number toxicity events seen; n, number patients evaluated; empiric_tox_rate, simply tox divided n; mean_prob_tox, method supports statistical estimation, modelled mean toxicity probability; median_prob_tox, method supports statistical estimation, modelled median toxicity probability; recommended, logical show whethet dose (stopping) recommended iteration; true_prob_tox, true yet unknown probability toxicity simulated scenario. selection models might add columns object. Getting results tibble format liberating analysis visualisation. instance, using tidyverse packages, simple visualise frequencies final model recommendations:","code":"true_prob_tox <- c(0.12, 0.27, 0.44, 0.53, 0.57) library(escalation) num_sims <- 20 set.seed(123)  sims <- get_three_plus_three(num_doses = 5) %>%   simulate_trials(num_sims = num_sims, true_prob_tox = true_prob_tox) sims #> Number of iterations: 20  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.12 0.27 0.44 0.53 0.57  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5  #>   0.10   0.70   0.15   0.05   0.00   0.00  #>  #> Probability of administration: #>      1      2      3      4      5  #> 0.3934 0.5082 0.0656 0.0328 0.0000  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    3.00    8.25    9.00    9.15    9.75   18.00  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    2.00    2.00    2.00    2.35    3.00    4.00  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.570   6.453   8.997   8.391  10.418  16.713 prob_recommend(sims) #> NoDose      1      2      3      4      5  #>   0.10   0.70   0.15   0.05   0.00   0.00 summary(num_patients(sims)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    3.00    8.25    9.00    9.15    9.75   18.00 summary(n_at_recommended_dose(sims)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>     3.0     3.0     3.0     3.5     3.0     6.0       2 n_at_dose(sims) %>% head(10) #> # A tibble: 10 × 5 #>      `1`   `2`   `3`   `4`   `5` #>    <int> <int> <int> <int> <int> #>  1     3     6     0     0     0 #>  2     6     3     3     0     0 #>  3     3     6     0     0     0 #>  4     3     6     0     0     0 #>  5     6     6     0     0     0 #>  6     3     6     0     0     0 #>  7     6     6     3     0     0 #>  8     3     6     0     0     0 #>  9     3     3     0     0     0 #> 10     3     3     3     0     0 prob_administer(sims) #>          1          2          3          4          5  #> 0.39344262 0.50819672 0.06557377 0.03278689 0.00000000 tox_at_dose(sims) %>% head(10) #> # A tibble: 10 × 5 #>      `1`   `2`   `3`   `4`   `5` #>    <int> <int> <int> <int> <int> #>  1     0     2     0     0     0 #>  2     1     0     2     0     0 #>  3     0     2     0     0     0 #>  4     0     2     0     0     0 #>  5     1     2     0     0     0 #>  6     0     3     0     0     0 #>  7     1     1     2     0     0 #>  8     0     2     0     0     0 #>  9     0     2     0     0     0 #> 10     0     0     2     0     0 summary(num_tox(sims)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    2.00    2.00    2.00    2.35    3.00    4.00 library(tibble) #> Warning: package 'tibble' was built under R version 4.3.3  as_tibble(sims) %>% head(12) #> # A tibble: 12 × 12 #>    .iteration .depth  time dose     tox     n empiric_tox_rate mean_prob_tox #>         <int>  <dbl> <dbl> <ord>  <dbl> <dbl>            <dbl>         <dbl> #>  1          1      4  6.47 NoDose     0     0            0                 0 #>  2          1      4  6.47 1          0     3            0                NA #>  3          1      4  6.47 2          2     6            0.333            NA #>  4          1      4  6.47 3          0     0          NaN                NA #>  5          1      4  6.47 4          0     0          NaN                NA #>  6          1      4  6.47 5          0     0          NaN                NA #>  7          2      5 12.6  NoDose     0     0            0                 0 #>  8          2      5 12.6  1          1     6            0.167            NA #>  9          2      5 12.6  2          0     3            0                NA #> 10          2      5 12.6  3          2     3            0.667            NA #> 11          2      5 12.6  4          0     0          NaN                NA #> 12          2      5 12.6  5          0     0          NaN                NA #> # ℹ 4 more variables: median_prob_tox <dbl>, admissible <lgl>, #> #   recommended <lgl>, true_prob_tox <dbl> library(dplyr) library(ggplot2)  as_tibble(sims) %>%    filter(recommended) %>%    ggplot(aes(x = dose, fill = dose)) +    geom_bar()"},{"path":"/articles/A700-Simulation.html","id":"a-more-complex-example","dir":"Articles","previous_headings":"Simulating trials in escalation","what":"A more complex example","title":"Simulating dose-escalation trials","text":"Let us consider now model-based dose-finding approach scenario. investigate CRM design, using model dfcrm package. Let us say targeting 25% toxicity rate: prior beliefs toxicity rates can represented : .e. believe third dose dose seek. CRM design provided dfcrm offers native stopping behaviour. Let us say willing use 12 patients. performance simple design compare 3+3 ? first thing note CRM design much less likely select dose 1 likely select dose 2. believe efficacy associated toxicity (using CRM approach), good thing. Note, however, comparing separate simulations efficient method compare competing designs. preferable method use simulate_compare, demonstrated . However, design method stop doses toxic. saw 3+3 design occasionally recommended dose. Thus, comparing CRM design 3+3, comparing like like. simple add stopping behaviour excess toxicity: now see trial iterations stop recommend dose study. see scenario whether design stops frequently enough appropriate decision scenario select one lowest two doses. research scenario doses toxic . Given fixed sample size, many treated dose eventually recommended Similar 3+3 design, CRM design treats 3-4 recommended dose. might want ensure least 6 patients recommended dose. affect operating characteristics? required, now least 6 patients recommended dose: affect expected overall sample size? Pleasingly, expected sample size increases 3 patients. Obviously, maximum increases 6 patients.","code":"target <- 0.25 skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   simulate_trials(num_sims = num_sims, true_prob_tox = true_prob_tox)  sims #> Number of iterations: 20  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.12 0.27 0.44 0.53 0.57  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5  #>   0.00   0.20   0.35   0.40   0.05   0.00  #>  #> Probability of administration: #>     1     2     3     4     5  #> 0.375 0.225 0.125 0.225 0.050  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      12      12      12      12      12      12  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    1.00    3.00    4.00    3.65    4.25    6.00  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   7.204  10.197  12.149  11.756  13.025  17.429 sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.8) %>%    simulate_trials(num_sims = num_sims, true_prob_tox = true_prob_tox)  sims #> Number of iterations: 20  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.12 0.27 0.44 0.53 0.57  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5  #>   0.00   0.25   0.45   0.20   0.10   0.00  #>  #> Probability of administration: #>      1      2      3      4      5  #> 0.5250 0.1875 0.0875 0.1875 0.0125  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      12      12      12      12      12      12  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     2.0     3.0     3.0     3.2     4.0     5.0  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   5.347   9.121  10.778  10.824  12.453  16.080 summary(n_at_recommended_dose(sims)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     0.0     3.0     3.0     4.8     6.0    12.0 sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.8) %>%    demand_n_at_dose(n = 6, dose = 'recommended') %>%    simulate_trials(num_sims = num_sims, true_prob_tox = true_prob_tox) summary(n_at_recommended_dose(sims)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   6.000   6.000   6.000   6.789   6.000  12.000       1 sims #> Number of iterations: 20  #>  #> Number of doses: 5  #>  #> True probability of toxicity: #>    1    2    3    4    5  #> 0.12 0.27 0.44 0.53 0.57  #>  #> Probability of recommendation: #> NoDose      1      2      3      4      5  #>   0.05   0.30   0.45   0.20   0.00   0.00  #>  #> Probability of administration: #>      1      2      3      4      5  #> 0.4490 0.2857 0.1327 0.1224 0.0102  #>  #> Sample size: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     3.0    12.0    15.0    14.7    18.0    21.0  #>  #> Total toxicities: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    2.00    3.00    3.50    4.15    5.00    9.00  #>  #> Trial duration: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   5.534  13.641  16.064  16.436  19.347  28.336"},{"path":"/articles/A700-Simulation.html","id":"further-refinements","dir":"Articles","previous_headings":"Simulating trials in escalation","what":"Further refinements","title":"Simulating dose-escalation trials","text":"following behaviours apply simulate_trials simulate_compare.","code":""},{"path":"/articles/A700-Simulation.html","id":"cohort-size","dir":"Articles","previous_headings":"Simulating trials in escalation > Further refinements","what":"Cohort size","title":"Simulating dose-escalation trials","text":"simulations assume patients evaluated cohorts three. assumption made mainly convention naturally possible change . can adjust simulations way simulated patients arrive providing custom function via sample_patient_arrivals parameter. instance, want model recommend new dose every patient, can specify sample_patient_arrivals function samples patients cohorts two: sample_patient_arrivals function samples arrival times new patients next interim analysis. new patients added existing patients model fit set patients. function simulates patient arrivals take single parameter data-frame one row existing patient columns including cohort, patient, dose, tox, time (possibly also eff weight, phase /II time--event method used). provision data existing patients sample_patient_arrivals allows patient sampling function adaptive. function return data-frame row new patient column time_delta, time arrival patient previous, like cohorts_of_n function :","code":"patient_arrivals_func <- function(current_data) cohorts_of_n(n = 2)  model <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.8) %>%    demand_n_at_dose(n = 6, dose = 'recommended')  sims <- model %>%   simulate_trials(num_sims = num_sims, true_prob_tox = true_prob_tox,                   sample_patient_arrivals = patient_arrivals_func) cohorts_of_n(n = 5) #>   time_delta #> 1 0.99586980 #> 2 0.02669685 #> 3 0.67005583 #> 4 2.52444885 #> 5 1.88378957"},{"path":"/articles/A700-Simulation.html","id":"sampling-the-conclusion-of-partly-observed-trials","dir":"Articles","previous_headings":"Simulating trials in escalation > Further refinements","what":"Sampling the conclusion of partly-observed trials","title":"Simulating dose-escalation trials","text":"examples demonstrated far simulate whole trials, recruitment evaluation first patient last. However, simulate_trials gladly simulate culmination trials partly completed. just specify outcomes already observed via previous_outcomes parameter. simulated trial commence outcomes seen thus far. example, let us say observed first cohort three already dose 1, yielding one toxicities two non-toxicities. appearance early toxicity dose 1 appear make likely low dose recommended, might expect: previous_outcomes can described outcome string method demonstrated . can also provided via data-frame, following columns: just described trial starting point two different ways. simulated iterations produce exactly results:","code":"set.seed(123)  sims <- model %>%   simulate_trials(num_sims = num_sims, true_prob_tox = true_prob_tox,                   previous_outcomes = '1NTN') prob_recommend(sims) #> NoDose      1      2      3      4      5  #>    0.0    0.4    0.6    0.0    0.0    0.0 previous_outcomes <- data.frame(   patient = 1:3,   cohort = c(1, 1, 1),   tox = c(0, 1, 0),   dose = c(1, 1, 1) )  set.seed(123) sims <- model %>%   simulate_trials(num_sims = num_sims, true_prob_tox = true_prob_tox,                   previous_outcomes = previous_outcomes) prob_recommend(sims) #> NoDose      1      2      3      4      5  #>    0.0    0.4    0.6    0.0    0.0    0.0"},{"path":"/articles/A700-Simulation.html","id":"next-dose","dir":"Articles","previous_headings":"Simulating trials in escalation > Further refinements","what":"Next dose","title":"Simulating dose-escalation trials","text":"Likewise, can also set dose given next patient cohort patients specifying next_dose parameter. example, want commence simulations dose 5, run: omitted, next dose calculated invoking model prevailing outcomes, set may well empty. setting, models opt start dose 1 may vary method.","code":"sims <- model %>%   simulate_trials(num_sims = num_trials, true_prob_tox = true_prob_tox,                   next_dose = 5)"},{"path":"/articles/A700-Simulation.html","id":"all-model-fits","dir":"Articles","previous_headings":"Simulating trials in escalation > Further refinements","what":"All model fits","title":"Simulating dose-escalation trials","text":"simulations, dose selection model fit prevailing data interim analysis. default, final model fit simulated trial returned. done conserve memory. high number simulated trials, storing many model fits per trial may cause executing machine run memory. However, can force function retain model fits specifying return_all_fits = TRUE. example: can verify now many analyses per trial: multiple fits within single simulated trial distinguishable tibble view via .depth column: contrast previous usage as_tibble(sims), see now model fits multiple fits within simulated trial .iteration. rows .depth == 1 reflect initial model fit new patients recruited, essentially starting point simulated trial. rows .depth == 2 show model fit first cohort patients, .","code":"sims <- get_three_plus_three(num_doses = 5) %>%   simulate_trials(num_sims = num_sims, true_prob_tox = true_prob_tox,                   return_all_fits = TRUE) sapply(sims$fits, length) #>  [1] 3 3 4 3 4 6 4 4 7 3 5 6 5 6 3 5 6 4 4 5 as_tibble(sims) %>% head(12) #> # A tibble: 12 × 12 #>    .iteration .depth  time dose     tox     n empiric_tox_rate mean_prob_tox #>         <int>  <dbl> <dbl> <ord>  <dbl> <dbl>            <dbl>         <dbl> #>  1          1      1  0    NoDose     0     0            0                 0 #>  2          1      1  0    1          0     0          NaN                NA #>  3          1      1  0    2          0     0          NaN                NA #>  4          1      1  0    3          0     0          NaN                NA #>  5          1      1  0    4          0     0          NaN                NA #>  6          1      1  0    5          0     0          NaN                NA #>  7          1      2  2.48 NoDose     0     0            0                 0 #>  8          1      2  2.48 1          1     3            0.333            NA #>  9          1      2  2.48 2          0     0          NaN                NA #> 10          1      2  2.48 3          0     0          NaN                NA #> 11          1      2  2.48 4          0     0          NaN                NA #> 12          1      2  2.48 5          0     0          NaN                NA #> # ℹ 4 more variables: median_prob_tox <dbl>, admissible <lgl>, #> #   recommended <lgl>, true_prob_tox <dbl>"},{"path":"/articles/A700-Simulation.html","id":"big-trials","dir":"Articles","previous_headings":"Simulating trials in escalation > Further refinements","what":"Big trials","title":"Simulating dose-escalation trials","text":"Designs must eventually choose stop trial. However, selectors, like derived get_dfcrm, offer default stopping method. may need append stopping behaviour selector via something like stop_at_n stop_when_n_at_dose, etc. safeguard simulating runaway trials never end, simulate_trials function halt simulated trial 30 invocations dose-selection decision. breach limit, specify i_like_big_trials = TRUE function call. However, forego safety net, onus write selectors eventually stop trial, careful!","code":"sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 99) %>%   simulate_trials(num_sims = 1, true_prob_tox = true_prob_tox,                   i_like_big_trials = TRUE) num_patients(sims) #> [1] 99"},{"path":[]},{"path":"/articles/A710-SimulationComparison.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Comparing dose-escalation designs by simulation","text":"vignette focuses common task comparing competing dose-escalation designs simulation. reading , sure read README file general explanation compose dose-finding designs escalation; Simulation vignette general introduction using simulation.","code":""},{"path":"/articles/A710-SimulationComparison.html","id":"comparing-competing-designs","dir":"Articles","previous_headings":"","what":"Comparing competing designs","title":"Comparing dose-escalation designs by simulation","text":"simulate_compare, implement method Sweeting et al. (2024) efficiently compare dose-finding designs. crux method ensure simulated patients used competing design , instance, patient given dose 2 one design experiences toxicity, patient also experience toxicity given dose 2 design. Ensuring consistency across simulated iterates way reduces Monte Carlo error allows much faster identification differences designs. example, let us compare behaviour 3+3 CRM designs investigated . start defining competing designs list convenient names: compare three designs: 3+3; CRM without toxicity stopping rule; otherwise identical CRM design toxicity stopping rule. names provide reused. illustration use small number replicates: can vertically stack simulated performance design: also provide convenient function quickly visualise probability selecting dose design evolved simulations progressed:  can see immediately, instance, designs generally agree dose 2 best MTD candidate, CRM designs much likely recommend dose 3. can precise formally contrasting probability selecting dose pair designs:  error bars reflect 95% symmetric asymptotic normal confidence intervals. Change alpha = 0.05 parameter calling as_tibble(sims) get confident intervals different significance level. see , even small sample size 50 simulated trials, CRM designs significantly likely recommend dose 3 3+3 design. contrast, scenario little difference two CRM variants.","code":"library(escalation)  target <- 0.25 skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6)  designs <-    list(     \"3+3\" = get_three_plus_three(num_doses = 5),     \"CRM\" = get_dfcrm(skeleton = skeleton, target = target) %>%       stop_at_n(n = 12),     \"Stopping CRM\" = get_dfcrm(skeleton = skeleton, target = target) %>%       stop_at_n(n = 12) %>%       stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.8)   ) num_sims <- 20 true_prob_tox <- c(0.12, 0.27, 0.44, 0.53, 0.57)  sims <- simulate_compare(   designs,    num_sims = num_sims,    true_prob_tox = true_prob_tox ) #> Running 3+3  #> Running CRM  #> Running Stopping CRM summary(sims) #> # A tibble: 18 × 7 #>    dose     tox     n true_prob_tox prob_recommend prob_administer design       #>    <ord>  <dbl> <dbl>         <dbl>          <dbl>           <dbl> <chr>        #>  1 NoDose  0     0             0              0.1           0      3+3          #>  2 1       0.5   4.05          0.12           0.35          0.375  3+3          #>  3 2       1     4.05          0.27           0.45          0.375  3+3          #>  4 3       1.05  2.25          0.44           0.05          0.208  3+3          #>  5 4       0.1   0.3           0.53           0.05          0.0278 3+3          #>  6 5       0.15  0.15          0.57           0             0.0139 3+3          #>  7 NoDose  0     0             0              0             0      CRM          #>  8 1       0.6   5.1           0.12           0.15          0.425  CRM          #>  9 2       0.7   3.15          0.27           0.45          0.262  CRM          #> 10 3       0.7   1.5           0.44           0.4           0.125  CRM          #> 11 4       1.1   2.1           0.53           0             0.175  CRM          #> 12 5       0.1   0.15          0.57           0             0.0125 CRM          #> 13 NoDose  0     0             0              0             0      Stopping CRM #> 14 1       0.6   5.1           0.12           0.15          0.425  Stopping CRM #> 15 2       0.7   3.15          0.27           0.45          0.262  Stopping CRM #> 16 3       0.7   1.5           0.44           0.4           0.125  Stopping CRM #> 17 4       1.1   2.1           0.53           0             0.175  Stopping CRM #> 18 5       0.1   0.15          0.57           0             0.0125 Stopping CRM convergence_plot(sims) library(dplyr) library(ggplot2)  as_tibble(sims) %>%    filter(n %% 5 == 0) %>%   ggplot(aes(x = n, y = delta)) +   geom_point(size = 0.4) +   geom_linerange(aes(ymin = delta_l, ymax = delta_u)) +   geom_hline(yintercept = 0, linetype = \"dashed\", col = \"red\") +   facet_grid(comparison ~ dose,              labeller = labeller(                .rows = label_both,                .cols = label_both)   )"},{"path":"/articles/A710-SimulationComparison.html","id":"working-with-patientsamples","dir":"Articles","previous_headings":"","what":"Working with PatientSamples","title":"Comparing dose-escalation designs by simulation","text":"idea core method Sweeting et al. (2024) efficient comparison competing designs use patients across different designs. reduces Monte Carlo error examining designs differ recommendations given identical inputs. achieved escalation using classes inheriting PatientSample. single PatientSample reflects one particular state world, patient ii reliably experience toxicity efficacy event treated particular dose. consistent occurrence events managed using latent uniform random variables. show import export variables, use infer potential outcomes range doses. illustrate fine-grained features working patient samples, reproduce BOIN12 example Sweeting et al. (2024):","code":"num_doses <- 5  designs <- list(    \"BOIN12 v1\" = get_boin12(num_doses = num_doses,                           phi_t = 0.35, phi_e = 0.25,                           u2 = 40, u3 = 60,                           c_t = 0.95, c_e = 0.9) %>%     stop_when_n_at_dose(n = 12,  dose = 'any') %>%     stop_at_n(n = 36),    \"BOIN12 v2\" = get_boin12(num_doses = num_doses,                           phi_t = 0.35, phi_e = 0.25,                           u2 = 40, u3 = 60,                           c_t = 0.85, c_e = 0.8                           ) %>%     stop_when_n_at_dose(n = 12,  dose = 'any') %>%     stop_at_n(n = 36) )"},{"path":"/articles/A710-SimulationComparison.html","id":"exporting-the-underlying-latent-variables","dir":"Articles","previous_headings":"Working with PatientSamples","what":"Exporting the underlying latent variables","title":"Comparing dose-escalation designs by simulation","text":"setting return_patient_samples = TRUE call simulate_compare: ensure generated patient samples exported returned object: 50 patient-samples performed 50 simulated iterates: iterate associated one patient-sample. instance, uniformly-distributed random variables determine occurrence toxicity events first simulated iterate : equivalent efficacy events : values reflect patient-specific propensities toxicity efficacy. instance, see first patient always experience toxicity treated dose associated true toxicity probability less 0.6981731. Likewise, patient experience efficacy treated dose associated true efficacy probability less 0.7014203. latent variables can exported using R’s many /O functions formats.","code":"true_prob_tox <- c(0.05, 0.10, 0.15, 0.18, 0.45) true_prob_eff <- c(0.40, 0.50, 0.52, 0.53, 0.53)  set.seed(2024) x <- simulate_compare(   designs = designs,    num_sims = 50,    true_prob_tox = true_prob_tox,    true_prob_eff = true_prob_eff,    return_patient_samples = TRUE ) #> Running BOIN12 v1  #> Running BOIN12 v2 ps <- attr(x, \"patient_samples\") length(ps) #> [1] 50 ps[[1]]$tox_u #>  [1] 0.69817312 0.30320913 0.51578548 0.61524718 0.05412517 0.65435328 #>  [7] 0.81482212 0.24535641 0.57055149 0.81225051 0.37904775 0.81430783 #> [13] 0.55000609 0.70191599 0.25793769 0.63087134 0.53763668 0.91237084 #> [19] 0.22604552 0.46627740 0.60173270 0.52517506 0.51566372 0.85122330 #> [25] 0.93486970 0.33551839 0.08832608 0.54574263 0.42418266 0.68010525 #> [31] 0.20996116 0.66860680 0.56893212 0.40129787 0.68108059 0.06243934 ps[[1]]$eff_u #>  [1] 0.70142031 0.90188285 0.86321521 0.29028973 0.62388601 0.71585945 #>  [7] 0.44400867 0.55189023 0.80299444 0.01705315 0.76742179 0.75409645 #> [13] 0.09794155 0.79412838 0.70943606 0.61495142 0.77500254 0.72021324 #> [19] 0.75763429 0.25464427 0.70966585 0.91368568 0.72269800 0.53335318 #> [25] 0.87993773 0.44162234 0.79396025 0.32815021 0.32048108 0.50633040 #> [31] 0.44140110 0.11780770 0.72699849 0.92028149 0.76116531 0.32360112"},{"path":"/articles/A710-SimulationComparison.html","id":"calculating-potential-outcomes","dir":"Articles","previous_headings":"Working with PatientSamples","what":"Calculating potential outcomes","title":"Comparing dose-escalation designs by simulation","text":"can calculate potential outcomes list patient-samples calling get_potential_outcomes providing true event probabilities: Note working tox-dose-escalation designs like CRM mTPI (example), omit true_prob_eff parameter. instance, potential outcomes first simulated iterate : see patient 1 experienced toxicity dose underlying toxicity propensity variable quite high 0.6981731. Gladly, however, patient experienced efficacy dose dose-level 2.","code":"z <- get_potential_outcomes(   patient_samples = ps,   true_prob_tox = true_prob_tox,   true_prob_eff = true_prob_eff ) z[[1]] #> $tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    0    0    0    0    1 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    0    0    0 #>  [5,]    0    1    1    1    1 #>  [6,]    0    0    0    0    0 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    1 #>  [9,]    0    0    0    0    0 #> [10,]    0    0    0    0    0 #> [11,]    0    0    0    0    1 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    0 #> [14,]    0    0    0    0    0 #> [15,]    0    0    0    0    1 #> [16,]    0    0    0    0    0 #> [17,]    0    0    0    0    0 #> [18,]    0    0    0    0    0 #> [19,]    0    0    0    0    1 #> [20,]    0    0    0    0    0 #> [21,]    0    0    0    0    0 #> [22,]    0    0    0    0    0 #> [23,]    0    0    0    0    0 #> [24,]    0    0    0    0    0 #> [25,]    0    0    0    0    0 #> [26,]    0    0    0    0    1 #> [27,]    0    1    1    1    1 #> [28,]    0    0    0    0    0 #> [29,]    0    0    0    0    1 #> [30,]    0    0    0    0    0 #> [31,]    0    0    0    0    1 #> [32,]    0    0    0    0    0 #> [33,]    0    0    0    0    0 #> [34,]    0    0    0    0    1 #> [35,]    0    0    0    0    0 #> [36,]    0    1    1    1    1 #>  #> $eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    0    0    0    0    0 #>  [3,]    0    0    0    0    0 #>  [4,]    1    1    1    1    1 #>  [5,]    0    0    0    0    0 #>  [6,]    0    0    0    0    0 #>  [7,]    0    1    1    1    1 #>  [8,]    0    0    0    0    0 #>  [9,]    0    0    0    0    0 #> [10,]    1    1    1    1    1 #> [11,]    0    0    0    0    0 #> [12,]    0    0    0    0    0 #> [13,]    1    1    1    1    1 #> [14,]    0    0    0    0    0 #> [15,]    0    0    0    0    0 #> [16,]    0    0    0    0    0 #> [17,]    0    0    0    0    0 #> [18,]    0    0    0    0    0 #> [19,]    0    0    0    0    0 #> [20,]    1    1    1    1    1 #> [21,]    0    0    0    0    0 #> [22,]    0    0    0    0    0 #> [23,]    0    0    0    0    0 #> [24,]    0    0    0    0    0 #> [25,]    0    0    0    0    0 #> [26,]    0    1    1    1    1 #> [27,]    0    0    0    0    0 #> [28,]    1    1    1    1    1 #> [29,]    1    1    1    1    1 #> [30,]    0    0    1    1    1 #> [31,]    0    1    1    1    1 #> [32,]    1    1    1    1    1 #> [33,]    0    0    0    0    0 #> [34,]    0    0    0    0    0 #> [35,]    0    0    0    0    0 #> [36,]    1    1    1    1    1"},{"path":"/articles/A710-SimulationComparison.html","id":"importing-the-underlying-latent-variables","dir":"Articles","previous_headings":"Working with PatientSamples","what":"Importing the underlying latent variables","title":"Comparing dose-escalation designs by simulation","text":"show export latent event variables store use elsewhere. can also import latent variables, mimic patient population used external simulation, instance. , instantiate list PatientSample objects, one simulated iterate. work ten iterates interests speed: call set_eff_and_tox function set latent toxicity efficacy propensities desired values. illustration, let us simply sample uniform random variables use . realistic example, set latent variables values wished import, .e. values used external study idealised values wish use. set latent variable vectors length 50. means can work 50 patients iterate. simulation tries use 51st patient, receive error. setting latent variables way, ensure use enough values cover maximum sample size. use patient-samples created simulated trials, specify patient_samples parameter: specified exact patient population way, run simulation study second time patients: see decisions within design (usually) identical within design. E.g. first BOIN12 variant recommends exact dose two batches patients . completeness, might decisions vary despite patients used? design inherent randomness. E.g. Wages & Tait’s design features adaptive randomisation, meaning , even identical patients, different behaviours seen.","code":"num_sims <- 10 ps <- lapply(1:num_sims, function(x) PatientSample$new()) set.seed(2024) for(i in seq_len(num_sims)) {   tox_u_new <- runif(n = 50)   eff_u_new <- runif(n = 50)   ps[[i]]$set_eff_and_tox(tox_u = tox_u_new, eff_u = eff_u_new) } x1 <- simulate_compare(   designs = designs,    num_sims = length(ps),    true_prob_tox = true_prob_tox,    true_prob_eff = true_prob_eff,    patient_samples = ps ) #> Running BOIN12 v1  #> Running BOIN12 v2 x2 <- simulate_compare(   designs = designs,    num_sims = length(ps),    true_prob_tox = true_prob_tox,    true_prob_eff = true_prob_eff,    patient_samples = ps ) #> Running BOIN12 v1  #> Running BOIN12 v2 all(   recommended_dose(x1[[\"BOIN12 v1\"]]) ==      recommended_dose(x2[[\"BOIN12 v1\"]]) ) #> [1] TRUE"},{"path":"/articles/A710-SimulationComparison.html","id":"correlated-toxicity-and-efficacy-outcomes","dir":"Articles","previous_headings":"Working with PatientSamples","what":"Correlated toxicity and efficacy outcomes","title":"Comparing dose-escalation designs by simulation","text":"Finally, let us introduce CorrelatedPatientSample sample correlated toxicity efficacy events. coerce correlation 0.5 latent uniform tox eff event propensities, run: can observe correlation close desired. Note however, correlation binary level events , general, equal target value rho, depend event probabilities:","code":"ps <- CorrelatedPatientSample$new(num_patients = 100, rho = 0.5) cor(ps$tox_u, ps$eff_u) #> [1] 0.4827035 tox <- sapply(seq_len(100), function(i) ps$get_patient_tox(i, prob_tox = 0.3)) eff <- sapply(seq_len(100), function(i) ps$get_patient_eff(i, prob_eff = 0.4)) cor(tox, eff) #> [1] 0.3027588"},{"path":"/articles/A710-SimulationComparison.html","id":"further-refinements","dir":"Articles","previous_headings":"","what":"Further refinements","title":"Comparing dose-escalation designs by simulation","text":"Check refinements section Simulation vignette ways refining behaviour simulations, including changing cohort size timing patient arrivals, simulating conclusion partly-observed trials, tweaking immediate next dose, returning interim model fits, working large trials. methods described apply simulate_trials simulate_compare.","code":""},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kristian Brock. Author, maintainer. Daniel Slade. Author. Michael Sweeting. Author. Conor Norris. Contributor. Bharat Bhushan. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brock K, Slade D, Sweeting M (2025). escalation: Modular Approach Dose-Finding Clinical Trials. https://brockk.github.io/escalation/, https://github.com/brockk/escalation.","code":"@Manual{,   title = {escalation: A Modular Approach to Dose-Finding Clinical Trials},   author = {Kristian Brock and Daniel Slade and Michael Sweeting},   year = {2025},   note = {https://brockk.github.io/escalation/, https://github.com/brockk/escalation}, }"},{"path":"/index.html","id":"escalation-","dir":"","previous_headings":"","what":"A Modular Approach to Dose-Finding Clinical Trials","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"Kristian Brock. Documentation hosted https://brockk.github.io/escalation/","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"escalation provides grammar dose-finding clinical trials. trivial example. Everyone knows 3+3 design escalate sees toxicities cohort three: stick sees one---three toxicities cohort: escalated doses 1 2, design advocates treating another cohort dose 3. sees two---six toxicities dose 3, concludes dose 3 toxic, dose 2 MTD, trial stop. escalation provides functions use common dose-escalation methodologies like continual reassessment method (CRM), Bayesian optimal interval design (BOIN), TPI suite designs, efficacy-toxicity designs like EffTox Wages & Tait, (seen) perennial 3+3: get_three_plus_three() get_dfcrm() get_trialr_crm() get_trialr_nbg() get_tpi() get_mtpi() get_mtpi2() get_boin() get_dfcrm_tite() get_trialr_crm_tite() get_trialr_nbg_tite() get_trialr_efftox() get_boin12() get_wages_and_tait() get_boin_comb() functions create model fitting objects. possible, technical implementations imported existing R packages like dfcrm, trialr, BOIN. external implementations available however, methods implemented natively escalation. dose-finding approaches can augmented extra behaviours specialise dose selection process. example, can add behaviours prevent skipping doses, stop reach certain sample size. escalation supports following behaviours: dont_skip_doses() stop_at_n() stop_when_n_at_dose() stop_when_too_toxic() stop_when_tox_ci_covered() demand_n_at_dose() try_rescue_dose() follow_path() select_dose_by_cibp() unadmit_untested() expand_last_dose_to_cohort() stick_on_num_tox() functions overrides way doses selected design decides stop trial. behaviours can flexibly combined using %>% operator tidyverse suite. models fit trial outcomes produce dose recommendations. matter dose selection behaviours combined, resulting model fits supports standard interface. two important methods recommended_dose() get current dose recommendation, continue() learn whether design advocates continuing patient recruitment. defined nomenclature combining dose selection behaviours providing standard interface resulting analyses, simple run simulations calculate dose-pathways future cohorts patients. escalation provides object-oriented approach dose-escalation clinical trials R. See Usage","code":"library(escalation)  get_three_plus_three(num_doses = 5) %>%    fit(\"1NNN\") %>%    recommended_dose() ## [1] 2 x <- get_three_plus_three(num_doses = 5) %>%    fit(\"1NNN 2NNN 3NNT\") recommended_dose(x) ## [1] 3 continue(x) ## [1] TRUE x <- get_three_plus_three(num_doses = 5) %>%    fit(\"1NNN 2NNN 3NNT 3NTN\") recommended_dose(x) ## [1] 2 continue(x) ## [1] FALSE"},{"path":[]},{"path":"/index.html","id":"describing-outcomes-in-dose-finding-trials","dir":"","previous_headings":"","what":"Describing outcomes in dose-finding trials","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"escalation uses succinct syntax describing dose-finding outcomes, described Brock (2019) phase setting Brock et al. (2017) phase /II setting. phase trial, use letters: T show toxicity occurred patient; N show toxicity occur patient. joint phase /II trial, like supported EffTox, coincident efficacy toxicity outcomes, relevant letters : T show toxicity without efficacy occurred patient; E show efficacy without toxicity occurred patient; N show neither occurred; B show occurred. outcome letters strewn behind integer dose-levels show outcomes patients cohorts. show cohort three patients given dose 2, first two patients without toxicity, third patient experienced toxicity, use outcome string: cohort followed another cohort three, without toxicity, overall outcome string : . strings used escalate package make easy fit models observed outcomes. many examples .","code":"outcomes <- '2NNT' outcomes <- '2NNT 2NNN'"},{"path":"/index.html","id":"dose-selectors","dir":"","previous_headings":"","what":"Dose selectors","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"core class escalation package selector. encapsulates notion general dose-escalation design able recommend doses, keep track many patients treated doses, toxicity outcomes seen, whether trial continue. general interface true model-based methods like CRM rule-based methods like 3+3. Irrespective particular approach used, interface consistent. tutorial, demonstrate types selector implemented package can combined tailor behaviour. begin, let us load escalation core dose selection process algorithm model selects doses responses outcomes. classes capable performing core role : get_dfcrm(), using model-fitting code dfcrm get_trialr_crm() using model-fitting code trialr get_trialr_nbg() using model-fitting code trialr get_boin() using model-fitting code BOIN get_tpi() get_mtpi() get_mtpi2() get_trialr_efftox() using model-fitting code trialr get_wages_and_tait() get_three_plus_three() follow_path() indicated methods rely external packages. Otherwise, methods implemented natively escalation. look several .","code":"library(escalation)"},{"path":"/index.html","id":"get_dfcrm","dir":"","previous_headings":"Dose selectors","what":"get_dfcrm","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"continual reassessment method (O’Quigley, Pepe, Fisher 1990) (CRM) implemented dfcrm package Cheung (2013). least information need provide dose-toxicity skeleton, target toxicity level. skeleton represents prior beliefs probabilities toxicity doses investigation. model iteratively seeks dose toxicity probability close target. illustration, let us say create dose-selection model using: can fit outcomes using code like: fit object tell dose recommended CRM model administered next. Depending preference classic R tidyverse R, might run: Either way, get answer. model advocates skipping straight dose 4. Clinicians unlikely feel comfortable . can respecify model expressly skip doses escalation. later . now, let us return model fit. can ask whether trial keep going: Naturally wants continue dfcrm implement stopping rules. , add various stopping behaviours sections . CRM-fitting function dfcrm accepts many arguments customise model form passed onwards get_dfcrm function via ... parameter. example, use one-parameter logit model dfcrm (rather default empiric model) intercept term fixed take value 4, can specify: intcpt logistic parameter names chosen authors dfcrm.","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('2NNN') recommended_dose(fit) ## [1] 4 fit %>% recommended_dose() ## [1] 4 fit %>% continue() ## [1] TRUE fit <- get_dfcrm(skeleton = skeleton, target = target,                   intcpt = 4, model = 'logistic') %>%    fit('2NNN 3TNN')  fit %>% recommended_dose() ## [1] 3"},{"path":"/index.html","id":"get_trialr_crm","dir":"","previous_headings":"Dose selectors","what":"get_trialr_crm","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"instead fit CRM models using trialr package (Brock 2019, 2020). Reusing skeleton target variables defined , fit empiric model dfcrm package, unless told otherwise, assumes want empiric model prior variance β\\beta 1.34. trialr package, assumptions made specify variables. changed method inference. dfcrm uses numerical integration calculate posterior statistics plugs dose-toxicity function. contrast, trialr fits model using Hamiltonian MCMC sampling via Stan. Thankfully, two models agree desired next dose: trial continue: added bonus get trialr fit, however, samples posterior distribution: facilitates really flexible inference. example, probability toxicity dose 3 least 5% greater dose 2? Simple answer using posterior samples: ‘likely ’, answer. See Continual Reassessment Method vignette details.","code":"model <- get_trialr_crm(skeleton = skeleton, target = target, model = 'empiric',                         beta_sd = sqrt(1.34)) fit <- model %>% fit('2NNN') fit %>% recommended_dose() ## [1] 4 fit %>% continue() ## [1] TRUE fit %>% prob_tox_samples() %>% head(10) ## # A tibble: 10 × 6 ##    .draw        `1`       `2`     `3`    `4`   `5` ##    <chr>      <dbl>     <dbl>   <dbl>  <dbl> <dbl> ##  1 1     0.00215    0.00891   0.0583  0.153  0.351 ##  2 2     0.00105    0.00512   0.0418  0.123  0.310 ##  3 3     0.214      0.306     0.490   0.624  0.769 ##  4 4     0.0974     0.167     0.340   0.491  0.672 ##  5 5     0.00133    0.00617   0.0467  0.132  0.323 ##  6 6     0.0319     0.0708    0.203   0.349  0.556 ##  7 7     0.0000405  0.000420  0.00927 0.0453 0.178 ##  8 8     0.00000595 0.0000963 0.00382 0.0252 0.129 ##  9 9     0.0177     0.0451    0.155   0.291  0.503 ## 10 10    0.0257     0.0600    0.184   0.326  0.536 library(dplyr) fit %>% prob_tox_samples() %>%    summarise(prob = mean(`3` > `2` + 0.05)) ## # A tibble: 1 × 1 ##    prob ##   <dbl> ## 1 0.573"},{"path":"/index.html","id":"get_trialr_nbg","dir":"","previous_headings":"Dose selectors","what":"get_trialr_nbg","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"two-parameter logistic dose-escalation method Neuenschwander, Branson, Gsponer (2008) (NBG) implemented trialr package Brock (2020). least information need provide vector doses investigation, reference dose-level d*d^*, target toxicity level, priors logit model intercept, α\\alpha, dose gradient, β\\beta. illustration, let us reproduce notorious example Figure 1 Neuenschwander, Branson, Gsponer (2008) 15 doses: Sticking dose 7 recommendation: However, see close call dose closest target toxicity level: perhaps unsurprising situation many doses. See Neuenschwander, Branson & Gsponer vignette details.","code":"dose <- c(1, 2.5, 5, 10, 15, 20, 25, 30, 40, 50, 75, 100, 150, 200, 250) outcomes <- '1NNN 2NNNN 3NNNN 4NNNN 7TT'  fit <- get_trialr_nbg(real_doses = dose, d_star = 250, target = 0.3,                       alpha_mean = 2.15, alpha_sd = 0.84,                       beta_mean = 0.52, beta_sd = 0.8, seed = 2020) %>%    fit(outcomes) fit %>% recommended_dose() ## [1] 7 fit %>% mean_prob_tox() ##  [1] 0.01229476 0.03139614 0.06501636 0.13376511 0.20021181 0.26219444 ##  [7] 0.31900339 0.37057264 0.45907389 0.53075063 0.65691058 0.73549743 ## [13] 0.82365045 0.86996457 0.89783331"},{"path":"/index.html","id":"get_tpi","dir":"","previous_headings":"Dose selectors","what":"get_tpi","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"Toxicity Probability Interval (TPI) method introduced Ji, Li, Bekele (2007). model requires parameters: model can fit outcomes usual way: returned model fit obeys interface classes described . instance, dose recommended next cohort : See Toxicity Probability Interval Design vignette information.","code":"model <- get_tpi(num_doses = 5, target = 0.25, k1 = 1, k2 = 1.5,                   exclusion_certainty = 0.95) fit <- model %>% fit('1NNT') fit %>% recommended_dose() ## [1] 1"},{"path":"/index.html","id":"get_mtpi","dir":"","previous_headings":"Dose selectors","what":"get_mtpi","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"Modified Toxicity Probability Interval (mTPI) method introduced Ji et al. (2010). generally simpler implement TPI ϵ1\\epsilon1 ϵ2\\epsilon2 parameters intuitive interpretation forming bounds interval regard containing doses equivalent target dose. instance, target dose toxicity probability equal 25%, judge doses region (20%, 30%) satisfactorily toxic, run: parameterisation, exclude doses 95% -posteriori sure associated toxicity rate exceeds target. fit model outcomes: learn recommended next dose dose 1, accordance Figure 2 Ji et al. (2010). See Modified Toxicity Probability Interval Design vignette information.","code":"model <- get_mtpi(num_doses = 5, target = 0.25,                    epsilon1 = 0.05, epsilon2 = 0.05, exclusion_certainty = 0.95) fit <- model %>% fit('1NNT') fit %>% recommended_dose() ## [1] 1"},{"path":"/index.html","id":"get_mtpi2","dir":"","previous_headings":"Dose selectors","what":"get_mtpi2","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"mTPI updated Guo et al. (2017) produce mTPI2. parameterisation similar mTPI. , see Modified Toxicity Probability Interval Design vignette information.","code":"model <- get_mtpi2(num_doses = 5, target = 0.25,                     epsilon1 = 0.05, epsilon2 = 0.05,                     exclusion_certainty = 0.95) fit <- model %>% fit('1NNT') fit %>% recommended_dose() ## [1] 1"},{"path":"/index.html","id":"get_boin","dir":"","previous_headings":"Dose selectors","what":"get_boin","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"escalate also implements Bayesian Optimal Interval (BOIN) dose-finding design Liu Yuan (2015) via BOIN package (Yuan Liu 2018). contrast CRM, BOIN require dose-toxicity skeleton. simplest case, requires merely number doses investigation target toxicity level: , can fit model observed outcomes: ask recommended dose: BOIN dose selector natively implements stopping rules, described Liu & Yuan. instance, bottom dose toxic, design advise trial halts: Notice scenario recommended dose NA: clarifies dose recommended study. setting, doses considered toxic. distinct scenarios design advocates stopping trial recommending dose study. encounter situations like . Since escalation provides many flexible options stopping, made possible suppress BOIN’s native stopping rule via use_stopping_rule = FALSE. instance, user may want add stopping rule, e.g. using stop_when_too_toxic. Extra parameters passed get.boundary function BOIN package customise escalation procedure. instance, boundaries guide changes dose set 60% 140% target toxicity rate, default. instead use 30% 170%, run: observe effect change, note default values suppress escalation scenario: parameter names p.saf p.tox chosen authors BOIN package. See Bayesian Optimal Interval Design vignette information.","code":"target <- 0.25  model <- get_boin(num_doses = 5, target = target) fit <- model %>% fit('2NNN') fit %>% recommended_dose() ## [1] 3 fit <- model %>% fit('2NTN 1TTT') fit %>% continue() ## [1] FALSE fit %>% recommended_dose() ## [1] NA get_boin(num_doses = 5, target = target,           p.saf = 0.3 * target, p.tox = 1.7 * target) %>%    fit('1NNN 2NNT') %>%    recommended_dose() ## [1] 2 get_boin(num_doses = 5, target = target) %>%    fit('1NNN 2NNT') %>%    recommended_dose() ## [1] 1"},{"path":"/index.html","id":"get_boin12","dir":"","previous_headings":"Dose selectors","what":"get_boin12","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"escalation also supports designs choose doses according co-primary efficacy toxicity outcomes, BOIN12 design (Lin et al. 2020). provide target toxicity efficacy thresholds via phi_t phi_e, utility ‘efficacy toxicity’ via u2, utility ‘efficacy toxicity’ via u3 (0, 100) scale: contrast examples , outcomes now include efficacy well toxicity. E reflects efficacy , B reflects efficacy toxicity. model-fitting process largely though: usual interface: escalation also supports -called phase /II designs select doses efficacy toxicity like Wages Tait (2015) Thall Cook (2004). See help pages information.","code":"# Examples in Lin et al. model <- get_boin12(num_doses = 5,                      phi_t = 0.35, phi_e = 0.25,                     u2 = 40, u3 = 60) fit <- model %>% fit('1NNN 2ENT 3ETT 2EEN') fit %>% recommended_dose() ## [1] 2 fit %>% continue() ## [1] TRUE"},{"path":"/index.html","id":"get_three_plus_three","dir":"","previous_headings":"Dose selectors","what":"get_three_plus_three","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"3+3 method old method dose-escalation uses fixed cohorts three pre-specified rules govern dose-selection (Korn et al. 1994; Le Tourneau, Lee, Siu 2009). create 3+3 design, need information number doses investigation: usual, can fit model outcomes learn recommended dose: Korn et al. (1994) described variant 3+3 permits deescalation ensure six patients treated dose recommended. use option model, run: model advocate deescalation least two toxicities seen dose dose fewer 6 treated patients:","code":"model <- get_three_plus_three(num_doses = 5) model %>% fit('2NTN') %>% recommended_dose() ## [1] 2 model <- get_three_plus_three(num_doses = 5, allow_deescalate = TRUE) model %>% fit('2NTT') %>% recommended_dose() ## [1] 1"},{"path":"/index.html","id":"follow_path","dir":"","previous_headings":"Dose selectors","what":"follow_path","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"final dose selector section really model , much pre-specified path follow. Let us say like escalate doses absence toxicity, treating two patients first two doses, three doses. can specify path escalation using: fit data, method just returns whatever comes next sequence: outcomes diverge pre-specified path, however, selector know : rather seems limit value. point class sometimes want specify occasionally referred initial escalation plan. trial outcomes diverge initial plan, another method takes . perfect opportunity show different selectors can joined together. Let us say wish follow initial plan described , first toxicity event seen, want CRM model take . simply join functions together using pipe operator magrittr: Now, trial outcomes diverge path, CRM model analyses outcomes recommends next dose: concludes look core dose-selecting classes. now turn attention ways methods can adapted using extra behaviours.","code":"model <- follow_path('1NN 2NN 3NNN 4NNN 5NNN') model %>% fit('1NN 2N') %>% recommended_dose() ## [1] 2 model %>% fit('1NN 2NN') %>% recommended_dose() ## [1] 3 model %>% fit('1NN 2NT') %>% recommended_dose() ## [1] NA model <- follow_path('1NN 2NN 3NNN 4NNN 5NNN') %>%    get_dfcrm(skeleton = skeleton, target = target) model %>% fit('1NN 2NT') %>% recommended_dose() ## [1] 2"},{"path":"/index.html","id":"dont_skip_doses","dir":"","previous_headings":"Dose selectors","what":"dont_skip_doses","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"saw CRM example design undesirably wanted skip straight high dose, without trying lower doses. simple common constraint impose dose-finding trials avoid skipping untested doses. Resuming CRM example, suppress skipping untested doses escalation : fit model : time, however, model advocates dose 3. Previously, wanted go straight dose 4. prevented skipping dose escalation. prevented skipping doses deescalation : :","code":"model <- get_dfcrm(skeleton = skeleton, target = target) %>%    dont_skip_doses(when_escalating = TRUE) fit <- model %>% fit('2NNN') fit %>% recommended_dose() ## [1] 3 model <- get_dfcrm(skeleton = skeleton, target = target) %>%    dont_skip_doses(when_deescalating = TRUE) model <- get_dfcrm(skeleton = skeleton, target = target) %>%    dont_skip_doses(when_escalating = TRUE, when_deescalating = TRUE)"},{"path":"/index.html","id":"stop_at_n","dir":"","previous_headings":"Dose selectors","what":"stop_at_n","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"Let us now investigate methods facilitate stopping. simplest condition stop total sample size reaches pre-specified level. instance, might want treat maximum 15 patients stop. , call stop_at_n function append onto end core dose selector, like : design seen fewer 15 patients, select doses advocate trial continues. instance: design advocates continuing dose: contrast, 15 patients seen, design advocates stopping. important note , even though design stopped, still recommends dose studied next trial phase: contrast scenario trial stopped doses inappropriate. scenario, dose recommendation NA. encounter examples .","code":"model <- get_dfcrm(skeleton = skeleton, target = target) %>%    stop_at_n(n = 15) fit <- model %>% fit('1NNN 2TNN 2NNN 3NNN') fit %>% continue() ## [1] TRUE fit %>% recommended_dose() ## [1] 3 fit <- model %>% fit('1NNN 2TNN 2NNN 3NNN 3NTN') fit %>% continue() ## [1] FALSE fit %>% recommended_dose() ## [1] 3"},{"path":"/index.html","id":"stop_when_n_at_dose","dir":"","previous_headings":"Dose selectors","what":"stop_when_n_at_dose","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"Another common approach stop dose-finding experiment given number patients treated particular dose. Continuing CRM model, stop nine patients treated dose recommended , use: can observe alters dose-selection model. see six patients treated dose 2: model recommends dose 2 given patients: next cohort results dose 2 recommended yet , .e. bring total number patients dose 2 nine , model stops: scenario, dose 2 final recommended dose trial stops gracefully pre-specified stopping rule. behaviour can also configured stop dose given n times: particular dose-level given n times: Naturally, can combine behaviour behaviours. following model stops trial nine patients evaluated recommended dose 21 patients treated total, whichever occurs first:","code":"model <- get_dfcrm(skeleton = skeleton, target = target) %>%    stop_when_n_at_dose(n = 9, dose = 'recommended') fit <- model %>% fit('1NNN 2TNN 2NTN') fit %>% continue() ## [1] TRUE fit %>% recommended_dose() ## [1] 2 fit <- model %>% fit('1NNN 2TNN 2NTN 2NNN') fit %>% continue() ## [1] FALSE fit %>% recommended_dose() ## [1] 2 model <- get_dfcrm(skeleton = skeleton, target = target) %>%    stop_when_n_at_dose(n = 9, dose = 'any') model <- get_dfcrm(skeleton = skeleton, target = target) %>%    stop_when_n_at_dose(n = 9, dose = 3) model <- get_dfcrm(skeleton = skeleton, target = target) %>%    stop_when_n_at_dose(n = 9, dose = 'recommended') %>%    stop_at_n(n = 21)"},{"path":"/index.html","id":"stop_when_ci_covered","dir":"","previous_headings":"Dose selectors","what":"stop_when_ci_covered","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"two stopping mechanisms scrutinise number patients treated. many situations, valuable. However, situations, might want stop threshold amount statistical information obtained. One way achieve stop confidence interval credible interval probability toxicity dose covered specified range. instance, know BOIN design seeks target toxicity level, used target 25% examples. might say sure enough recommended dose associated 90% credible interval (BOIN Bayesian design) toxicity probability falls region 10% - 40%. Say observe following trial path: design recommends dose 2 also advocates stopping: lower bound 90% interval probability toxicity dose 2 least 10%: upper bound 40%: may intersting note CRM model stop scenario: lower bound 90% CI falls slightly outside sought range: , can specify dose = 'recommended', dose = '', particular numerical dose-level dose = 3, example. appreciated approach works underlying model extends way calculating quantiles uncertainty intervals. 3+3 lacks statistical foundation offer quantiles:","code":"model <- get_boin(target = target, num_doses = 5) %>%   stop_when_tox_ci_covered(dose = 'recommended', lower = 0.10, upper = 0.4) fit <- model %>%    fit('1NNN 2NTN 2TNN 2NNN 2NNT 2NTN 2NNN 2TNN') fit %>% recommended_dose() ## [1] 2 fit %>% continue() ## [1] FALSE fit %>% prob_tox_quantile(p = 0.05) ##   1   2   3   4   5  ## 0.0 0.1  NA  NA  NA fit %>% prob_tox_quantile(p = 0.95) ##   1   2   3   4   5  ## 0.1 0.4  NA  NA  NA model <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_tox_ci_covered(dose = 'recommended', lower = 0.10, upper = 0.4)  fit <- model %>%    fit('1NNN 2NTN 2TNN 2NNN 2NNT 2NTN 2NNN 2TNN')  fit %>% continue() ## [1] TRUE fit %>% recommended_dose() ## [1] 2 fit %>% prob_tox_quantile(p = 0.05) ## [1] 0.04876626 0.09809797 0.24712623 0.39695491 0.59744927 get_three_plus_three(num_doses = 5) %>%    fit('1NNN 2NTN') %>%    prob_tox_quantile(p = 0.05) ## [1] NA NA NA NA NA"},{"path":"/index.html","id":"stop_when_too_toxic","dir":"","previous_headings":"Dose selectors","what":"stop_when_too_toxic","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"stopping rules considered far stop trial recommend dose critical threshold information obtained. naturaly want stop doses toxic. saw model-based dose-finding approaches can calculate quantiles. can take idea advocate stopping sufficient evidence toxicity probability dose exceeds critical threshold. circumstances, dose recommended doses treatment deemed excessively toxic. Let us set rule stop recommend dose probability toxicity lowest dose high: examples stops 70% probability mass posterior distribution probability toxicity dose 1 exceeds 35%. isolated toxicity incidence dose 1, model advocates continuing dose 1: probability toxicity rate exceeds 35% less 70%: However, material additional toxicity dose 1, design now advocates stopping: Furthermore, dose recommended: now least 70% sure lowest dose toxic: , can specify dose = 'recommended', dose = '', particular numerical dose-level dose = 3, example. also require underlying model supports calculation quantiles. BOIN supports fucntionality: non-statistical method like 3+3 .","code":"model <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.7) fit <- model %>% fit('1NTN') fit %>% continue() ## [1] TRUE fit %>% recommended_dose() ## [1] 1 fit %>% prob_tox_exceeds(0.35) %>% round(2) ## [1] 0.35 0.53 0.82 0.95 1.00 fit <- model %>% fit('1NTN 1TTT') fit %>% continue() ## [1] FALSE fit %>% recommended_dose() ## [1] NA fit %>% prob_tox_exceeds(0.35) %>% round(2) ## [1] 0.87 0.95 1.00 1.00 1.00 model <- get_boin(target = target, num_doses = 5) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.7)  fit <- model %>% fit('1NTN 1TTT') fit %>% continue() ## [1] FALSE fit %>% recommended_dose() ## [1] NA fit %>% prob_tox_exceeds(0.35) %>% round(2) ## [1] 0.95   NA   NA   NA   NA"},{"path":"/index.html","id":"demand_n_at_dose","dir":"","previous_headings":"Dose selectors","what":"demand_n_at_dose","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"looked many behaviours provide stopping. can also look behaviours delay stopping. might want guarantee treat least n patients dose permit dose-finding trial stop. instance, might feel comfortable recommending dose next phase study evaluated small number patients. makes sense behaviour used design otherwise stop. Let us say normally like stop 18 patients treated. However, also demand least 6 patients treated recommended dose stopping allowed, irrespective overall sample size. specify: following situation: design advocates continuing dose 2 even though 18 patients evaluated. demand_n_at_dose function overriding stopping behaviour stop_at_n. requesting trial continue dose 2 instead stopping three patients treated nominal recommended dose. important recognise order functions matters. flip order constraints example , outcome different: Now stop_at_n constraint overrides action demand_n_at_dose halt trial n=18, even though three patients evaluated dose 2. overrides comes later decision chain. Users aware commands come later take precedence. , can specify dose = 'recommended', dose = '', particular numerical dose-level dose = 3, example. summary, demand_n_at_dose function delays stopping scenario dose selected.","code":"model <- get_boin(target = target, num_doses = 5) %>%    stop_at_n(n = 18) %>%    demand_n_at_dose(n = 6, dose = 'recommended') fit <- model %>% fit('1NNN 2NNT 3NTN 3NNN 4TTN 3NTT') fit %>% continue() ## [1] TRUE fit %>% recommended_dose() ## [1] 2 model <- get_boin(target = target, num_doses = 5) %>%    demand_n_at_dose(n = 6, dose = 'recommended') %>%    stop_at_n(n = 18)  fit <- model %>% fit('1NNN 2NNT 3NTN 3NNN 4TTN 3NTT') fit %>% continue() ## [1] FALSE fit %>% recommended_dose() ## [1] 2"},{"path":"/index.html","id":"try_rescue_dose","dir":"","previous_headings":"Dose selectors","what":"try_rescue_dose","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"contrast demand_n_at_dose, try_rescue_dose function delays stopping scenario dose going selected. overrides decision stop recommend dose fewer n patients evaluated given dose. Thus, provides facility ensure “rescue” dose tried stopping allowed. another function effective demonstration requires design normally stop. Let us say stop 80% sure toxicity rate lowest dose exceeds 35%. stop, want ensure least two patients evaluated lowest dose. write: , even design sees major toxicity dose 2: design advocate stopping, even though posterior confidence tox rate dose 1 exceeds 35% greater 80%: two patients seen dose 1, stopping can countenanced. two patients tolerate treatment dose 1: stopping advocated posterior belief now dose 1 excessively toxic: However, even one patients dose 1 experiences toxicity: trial stops dose recommended. try_rescue_dose function allows researchers rescue situations otherwise sensible stopping criteria may prove sensitive chance events small sample sizes.","code":"model <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.8) %>%   try_rescue_dose(dose = 1, n = 2) fit <- model %>% fit('2TTT') fit %>% continue() ## [1] TRUE fit %>% recommended_dose() ## [1] 1 fit %>% prob_tox_exceeds(0.35) ## [1] 0.8673669 0.9307674 0.9857421 0.9971830 0.9998310 fit <- model %>% fit('2TTT 1NN') fit %>% continue() ## [1] TRUE fit %>% recommended_dose() ## [1] 1 fit %>% prob_tox_exceeds(0.35) ## [1] 0.6683818 0.8195981 0.9668375 0.9951862 0.9998694 fit <- model %>% fit('2TTT 1NT') fit %>% continue() ## [1] FALSE fit %>% recommended_dose() ## [1] NA"},{"path":"/index.html","id":"select_dose_by_cibp","dir":"","previous_headings":"Dose selectors","what":"select_dose_by_cibp","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"function implements convex infinite bounds penalisation (CIBP) criterion Mozgunov Jaki (2020) adjusts way doses selected CRM trials. method mindful uncertainty estimates probability toxicity uses asymmetry parameter, 0 < < 2, penalise escalation risky doses. method alters way doses selected trial stop. < 1, criterion penalises toxic doses heavily, making escalation decisions conservative. add behaviour dose-finding design, run: model fit outcomes usual way:","code":"model <- get_dfcrm(skeleton = skeleton, target = target) %>%   select_dose_by_cibp(a = 0.3) model %>%    fit('1NTN') %>%    recommended_dose() ## [1] 1"},{"path":"/index.html","id":"simulation-and-dose-paths","dir":"","previous_headings":"","what":"Simulation and dose-paths","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"described length flexible methods escalation provides specify dose-escalation designs tailor trial behaviour. designs specified, can investigate operating characteristics simulation using simulate_trials function, efficiently compare designs using Sweeting et al. (2024)’s method simulate_compare. can also exhaustively calculate dose recommendations future cohorts using get_dose_paths function. topics topics full vignettes please check .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"","code":"# Install the latest official version from CRAN with: install.packages(\"escalation\")  # Alternatively, install the latest code from GitHub: devtools::install_github(\"brockk/escalation\")"},{"path":"/index.html","id":"future-plans","dir":"","previous_headings":"","what":"Future Plans","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"plan add model-fitting functions EWOC via ewoc, methods phase /II designs, perhaps also methods dual agents. want investigate adding stopping functions like researched Zohar Chevret (2001). Finally, investigate adding time--event versions designs presented , -called TITE designs. require different approach simulation cohorts longer apply.","code":""},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"A Modular Approach to Dose-Finding Clinical Trials","text":"package still active development. thousands unit tests run time package code updated. However, certainly mean code bug free. always defensive. software offered guarantee . found bug, please drop line also log : https://github.com/brockk/escalation/issues want help using package, feel free contact email.","code":""},{"path":[]},{"path":"/reference/CorrelatedPatientSample.html","id":null,"dir":"Reference","previous_headings":"","what":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"Class house latent random variables govern toxicity efficacy events patients. Instances class can used simulation-like tasks effectively use simulated individuals different designs, thus supporting reduced Monte Carlo error efficient comparison. class differs PatientSample latent variables underlie efficacy toxicity events, therefore events , correlated, e.g. positive association, patient experiences toxicity increased probability experiencing efficacy . Correlated uniformly-distributed variables obtained inverting bivariate normal variables. extent events correlated controlled rho, correlation two normal variables.","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"Sweeting, M., Slade, D., Jackson, D., & Brock, K. (2024). Potential outcome simulation efficient head--head comparison adaptive dose-finding designs. arXiv preprint arXiv:2402.15460","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"escalation::PatientSample -> CorrelatedPatientSample","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"num_patients (`integer(1)`) mu (`numeric(2)`) sigma (`matrix(2, 2)`)","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"escalation::PatientSample$get_eff_u() escalation::PatientSample$get_patient_eff() escalation::PatientSample$get_patient_tox() escalation::PatientSample$get_tox_u() escalation::PatientSample$set_eff_and_tox()","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"CorrelatedPatientSample$new() CorrelatedPatientSample$expand_to() CorrelatedPatientSample$clone()","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"Creator.","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"","code":"CorrelatedPatientSample$new(   num_patients = 0,   time_to_tox_func = function() runif(n = 1),   time_to_eff_func = function() runif(n = 1),   rho = 0 )"},{"path":"/reference/CorrelatedPatientSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"num_patients (`integer(1)`) Number patients. time_to_tox_func (`function`) function taking args returns single time toxicity, given toxicity occurs. time_to_eff_func (`function`) function taking args returns single time efficacy, given efficacy occurs. rho (`integer(1)`) correlation toxicity efficacy latent variables.","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"[CorrelatedPatientSample].","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"method-expand-to-","dir":"Reference","previous_headings":"","what":"Method expand_to()","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"Expand sample size least num_patients","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"","code":"CorrelatedPatientSample$expand_to(num_patients)"},{"path":"/reference/CorrelatedPatientSample.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"num_patients (`integer(1)`).","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"objects class cloneable method.","code":""},{"path":"/reference/CorrelatedPatientSample.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"","code":"CorrelatedPatientSample$clone(deep = FALSE)"},{"path":"/reference/CorrelatedPatientSample.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients that experience correlated events in simulations. — CorrelatedPatientSample","text":"deep Whether make deep clone.","code":""},{"path":"/reference/PatientSample.html","id":null,"dir":"Reference","previous_headings":"","what":"A sample of patients to use in simulations. — PatientSample","title":"A sample of patients to use in simulations. — PatientSample","text":"Class house latent random variables govern toxicity efficacy events patients. Instances class can used simulation-like tasks effectively use simulated individuals different designs, thus supporting reduced Monte Carlo error efficient comparison.","code":""},{"path":"/reference/PatientSample.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A sample of patients to use in simulations. — PatientSample","text":"Sweeting, M., Slade, D., Jackson, D., & Brock, K. (2024). Potential outcome simulation efficient head--head comparison adaptive dose-finding designs. arXiv preprint arXiv:2402.15460","code":""},{"path":"/reference/PatientSample.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"A sample of patients to use in simulations. — PatientSample","text":"num_patients (`integer(1)`) tox_u (`numeric(num_patients)`) time_to_tox_func (`function`) tox_time (`numeric(num_patients)`) eff_u (`numeric(num_patients)`) time_to_eff_func (`function`) eff_time (`numeric(num_patients)`) can_grow (`logical(1)`)","code":""},{"path":[]},{"path":"/reference/PatientSample.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"A sample of patients to use in simulations. — PatientSample","text":"PatientSample$new() PatientSample$set_eff_and_tox() PatientSample$expand_to() PatientSample$get_tox_u() PatientSample$get_patient_tox() PatientSample$get_eff_u() PatientSample$get_patient_eff() PatientSample$clone()","code":""},{"path":"/reference/PatientSample.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"A sample of patients to use in simulations. — PatientSample","text":"Creator.","code":""},{"path":"/reference/PatientSample.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients to use in simulations. — PatientSample","text":"","code":"PatientSample$new(   num_patients = 0,   time_to_tox_func = function() runif(n = 1),   time_to_eff_func = function() runif(n = 1) )"},{"path":"/reference/PatientSample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients to use in simulations. — PatientSample","text":"num_patients (`integer(1)`) Number patients. time_to_tox_func (`function`) function taking args returns single time toxicity, given toxicity occurs. time_to_eff_func (`function`) function taking args returns single time efficacy, given efficacy occurs.","code":""},{"path":"/reference/PatientSample.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"A sample of patients to use in simulations. — PatientSample","text":"[PatientSample].","code":""},{"path":"/reference/PatientSample.html","id":"method-set-eff-and-tox-","dir":"Reference","previous_headings":"","what":"Method set_eff_and_tox()","title":"A sample of patients to use in simulations. — PatientSample","text":"Set toxicity efficacy latent variables govern occurrence toxicity efficacy events. default, instances class automatically grow latent variables accommodate arbitrarily high sample sizes. However, set latent variables manually via function, override ability class self-manage, ability grow turned setting internal variable self$can_grow <- FALSE.","code":""},{"path":"/reference/PatientSample.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients to use in simulations. — PatientSample","text":"","code":"PatientSample$set_eff_and_tox(   tox_u,   eff_u,   tox_time = rep(0, length(tox_u)),   eff_time = rep(0, length(eff_u)) )"},{"path":"/reference/PatientSample.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients to use in simulations. — PatientSample","text":"tox_u (`numeric()`) Patient-level toxicity propensities. eff_u (`numeric()`) Patient-level efficacy propensities. tox_time (`numeric()`) Patient-level toxicity times, given toxicity occurs. eff_time (`numeric()`) Patient-level efficacy times, given efficacy occurs.","code":""},{"path":"/reference/PatientSample.html","id":"method-expand-to-","dir":"Reference","previous_headings":"","what":"Method expand_to()","title":"A sample of patients to use in simulations. — PatientSample","text":"Expand sample size least num_patients","code":""},{"path":"/reference/PatientSample.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients to use in simulations. — PatientSample","text":"","code":"PatientSample$expand_to(num_patients)"},{"path":"/reference/PatientSample.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients to use in simulations. — PatientSample","text":"num_patients (`integer(1)`).","code":""},{"path":"/reference/PatientSample.html","id":"method-get-tox-u-","dir":"Reference","previous_headings":"","what":"Method get_tox_u()","title":"A sample of patients to use in simulations. — PatientSample","text":"Get toxicity latent variable patient ","code":""},{"path":"/reference/PatientSample.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients to use in simulations. — PatientSample","text":"","code":"PatientSample$get_tox_u(i)"},{"path":"/reference/PatientSample.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients to use in simulations. — PatientSample","text":"(`integer(1)`) patient index","code":""},{"path":"/reference/PatientSample.html","id":"method-get-patient-tox-","dir":"Reference","previous_headings":"","what":"Method get_patient_tox()","title":"A sample of patients to use in simulations. — PatientSample","text":"Get 0 1 event marker whether toxicity occurred patient ","code":""},{"path":"/reference/PatientSample.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients to use in simulations. — PatientSample","text":"","code":"PatientSample$get_patient_tox(i, prob_tox, time = Inf)"},{"path":"/reference/PatientSample.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients to use in simulations. — PatientSample","text":"(`integer(1)`) patient index prob_tox (`numeric(1)`) probability toxicity time (`numeric(1)`) time","code":""},{"path":"/reference/PatientSample.html","id":"method-get-eff-u-","dir":"Reference","previous_headings":"","what":"Method get_eff_u()","title":"A sample of patients to use in simulations. — PatientSample","text":"Get efficacy latent variable patient ","code":""},{"path":"/reference/PatientSample.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients to use in simulations. — PatientSample","text":"","code":"PatientSample$get_eff_u(i)"},{"path":"/reference/PatientSample.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients to use in simulations. — PatientSample","text":"(`integer(1)`) patient index","code":""},{"path":"/reference/PatientSample.html","id":"method-get-patient-eff-","dir":"Reference","previous_headings":"","what":"Method get_patient_eff()","title":"A sample of patients to use in simulations. — PatientSample","text":"Get 0 1 event marker whether efficacy occurred patient ","code":""},{"path":"/reference/PatientSample.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients to use in simulations. — PatientSample","text":"","code":"PatientSample$get_patient_eff(i, prob_eff, time = Inf)"},{"path":"/reference/PatientSample.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients to use in simulations. — PatientSample","text":"(`integer(1)`) patient index prob_eff (`numeric(1)`) probability efficacy time (`numeric(1)`) time","code":""},{"path":"/reference/PatientSample.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"A sample of patients to use in simulations. — PatientSample","text":"objects class cloneable method.","code":""},{"path":"/reference/PatientSample.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"A sample of patients to use in simulations. — PatientSample","text":"","code":"PatientSample$clone(deep = FALSE)"},{"path":"/reference/PatientSample.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"A sample of patients to use in simulations. — PatientSample","text":"deep Whether make deep clone.","code":""},{"path":"/reference/as_tibble.dose_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast dose_paths object to tibble. — as_tibble.dose_paths","title":"Cast dose_paths object to tibble. — as_tibble.dose_paths","text":"Cast dose_paths object tibble.","code":""},{"path":"/reference/as_tibble.dose_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast dose_paths object to tibble. — as_tibble.dose_paths","text":"","code":"# S3 method for class 'dose_paths' as_tibble(x, ...)"},{"path":"/reference/as_tibble.dose_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast dose_paths object to tibble. — as_tibble.dose_paths","text":"x Object class dose_finding_paths. ... Extra args passed onwards.","code":""},{"path":"/reference/as_tibble.dose_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast dose_paths object to tibble. — as_tibble.dose_paths","text":"Object class tibble","code":""},{"path":"/reference/as_tibble.selector.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast dose_selector object to tibble. — as_tibble.selector","title":"Cast dose_selector object to tibble. — as_tibble.selector","text":"Cast dose_selector object tibble.","code":""},{"path":"/reference/as_tibble.selector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast dose_selector object to tibble. — as_tibble.selector","text":"","code":"# S3 method for class 'selector' as_tibble(x, ...)"},{"path":"/reference/as_tibble.selector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast dose_selector object to tibble. — as_tibble.selector","text":"x Object class dose_selector. ... Extra args passed onwards.","code":""},{"path":"/reference/as_tibble.selector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast dose_selector object to tibble. — as_tibble.selector","text":"Object class tibble","code":""},{"path":"/reference/as_tibble.simulations_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a simulations_collection to a tibble — as_tibble.simulations_collection","title":"Convert a simulations_collection to a tibble — as_tibble.simulations_collection","text":"Cumulative statistics shown gauge simulations converge.","code":""},{"path":"/reference/as_tibble.simulations_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a simulations_collection to a tibble — as_tibble.simulations_collection","text":"","code":"# S3 method for class 'simulations_collection' as_tibble(x, target_dose = NULL, alpha = 0.05, ...)"},{"path":"/reference/as_tibble.simulations_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a simulations_collection to a tibble — as_tibble.simulations_collection","text":"x object type simulations_collection target_dose numerical dose index, NULL (default) doses alpha significance level symmetrical confidence intervals ... extra args ignored","code":""},{"path":"/reference/as_tibble.simulations_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a simulations_collection to a tibble — as_tibble.simulations_collection","text":"tibble cols: dose, dose-level n, cumulative inference using first n simulated iterations design.x, first design comparison, aka design X hit.x, logical showing design X recommended dose iterate n design.y, second design comparison, aka design Y hit.x, logical showing design Y recommended dose iterate n X, cumulative sum hit.x within dose, .e. count recommendations X2, cumulative sum hit.x^2 within dose Y, cumulative sum hit.y within dose, .e. count recommendations Y2, cumulative sum hit.y^2 within dose XY, cumulative sum hit.x * hit.y within dose psi1, X / n psi2, Y / n v_psi1, variance psi1 v_psi2, variance psi2 cov_psi12, covariance psi1 psi2 delta, psi1 - psi2 v_delta, variance delta se_delta, standard error delta delta_l, delta - q * se_delta, q alpha / 2 normal quantile delta_u, delta + q * se_delta, q alpha / 2 normal quantile comparison, Label design.x vs design.y, using design names","code":""},{"path":"/reference/boin12_rds.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate rank-based desirability scores for a BOIN12 trial — boin12_rds","title":"Tabulate rank-based desirability scores for a BOIN12 trial — boin12_rds","text":"Tabulate rank-based desirability scores BOIN12 trial","code":""},{"path":"/reference/boin12_rds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate rank-based desirability scores for a BOIN12 trial — boin12_rds","text":"","code":"boin12_rds(   sample_sizes,   phi_t,   phi_e,   u1 = 100,   u2,   u3,   u4 = 0,   c_t = 0.95,   c_e = 0.9,   prior_alpha = 1,   prior_beta = 1 )"},{"path":"/reference/boin12_rds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate rank-based desirability scores for a BOIN12 trial — boin12_rds","text":"sample_sizes integer vector, cohort sample sizes consider phi_t Probability toxicity threshold phi_e Probability efficacy threshold u1 utility efficacy without toxicity, 100 default u2 utility efficacy toxicity, u1 u4 u3 utility efficacy toxicity, u1 u4 u4 utility toxicity without efficacy , 0 default c_t certainty required flag excess toxicity, 0.95 default c_e certainty required flag deficient efficacy, 0.9 default prior_alpha first shape param prior beta prior, 1 default prior_beta second shape param prior beta prior, 1 default","code":""},{"path":"/reference/boin12_rds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate rank-based desirability scores for a BOIN12 trial — boin12_rds","text":"data.frame columns Patients, Toxicity, Efficacy containing numbers patients, patients toxicitiy, patients efficacy; Admissble, containing character labels Admissble Admissible; RDS, containing character label numerical desirability score character string \"E\", combination eliminated; RDS_x, containing desirability scores numbers, NA combination eliminated.","code":""},{"path":"/reference/boin12_rds.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tabulate rank-based desirability scores for a BOIN12 trial — boin12_rds","text":"Lin, R., Zhou, Y., Yan, F., Li, D., & Yuan, Y. (2020). BOIN12: Bayesian optimal interval phase /II trial design utility-based dose finding immunotherapy targeted therapies. JCO Precision Oncology, 4, 1393-1402.","code":""},{"path":"/reference/boin12_rds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tabulate rank-based desirability scores for a BOIN12 trial — boin12_rds","text":"Bharat Bhushan, Kristian Brock","code":""},{"path":"/reference/boin12_rds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate rank-based desirability scores for a BOIN12 trial — boin12_rds","text":"","code":"# Table 3 in Lin et al. x <- boin12_rds(   sample_sizes = c(0, 3, 6, 9),   phi_t = 0.35,   phi_e = 0.25,   u1 = 100,   u2 = 40,   u3 = 60,   u4 = 0,   c_t = 0.95,   c_e = 0.9,   prior_alpha = 1,   prior_beta = 1 )"},{"path":"/reference/calculate_probabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dose-path probabilities — calculate_probabilities","title":"Calculate dose-path probabilities — calculate_probabilities","text":"Crystallise set dose_paths probabilities calculate likely path . probabilised way, probabilities terminal nodes set paths sum 1. allows users calculate operating characteristics.","code":""},{"path":"/reference/calculate_probabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dose-path probabilities — calculate_probabilities","text":"","code":"calculate_probabilities(dose_paths, true_prob_tox, true_prob_eff = NULL, ...)"},{"path":"/reference/calculate_probabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dose-path probabilities — calculate_probabilities","text":"dose_paths Object type dose_paths true_prob_tox Numeric vector, true probability toxicity. true_prob_eff vector true efficacy probabilities, optionally NULL efficacy analysed. ... Extra parameters","code":""},{"path":[]},{"path":"/reference/calculate_probabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate dose-path probabilities — calculate_probabilities","text":"","code":"# Phase 1 example. # Calculate dose paths for the first three cohorts in a 3+3 trial of 5 doses: paths <- get_three_plus_three(num_doses = 5) %>%   get_dose_paths(cohort_sizes = c(3, 3, 3))  # Set the true probabilities of toxicity true_prob_tox <- c(0.12, 0.27, 0.44, 0.53, 0.57) # And calculate exact operating performance x <- paths %>% calculate_probabilities(true_prob_tox) prob_recommend(x) #>     NoDose          1          2          3          4          5  #> 0.12854451 0.33600635 0.19081343 0.29807918 0.04655654 0.00000000   # Phase 1/2 example. prob_select = c(0.1, 0.3, 0.5, 0.07, 0.03) selector_factory <- get_random_selector(prob_select = prob_select,                                         supports_efficacy = TRUE) paths <- selector_factory %>% get_dose_paths(cohort_sizes = c(2, 2)) #> You have requested 100 paths. Be patient. true_prob_eff <- c(0.27, 0.35, 0.41, 0.44, 0.45) x <- paths %>% calculate_probabilities(true_prob_tox = true_prob_tox,                                        true_prob_eff = true_prob_eff) prob_recommend(x) #>     NoDose          1          2          3          4          5  #> 0.00000000 0.11213185 0.22139900 0.51985245 0.11179195 0.03482474"},{"path":"/reference/check_dose_selector_consistency.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the consistency of a dose_selector instance — check_dose_selector_consistency","title":"Check the consistency of a dose_selector instance — check_dose_selector_consistency","text":"Check consistency dose_selector instance","code":""},{"path":"/reference/check_dose_selector_consistency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the consistency of a dose_selector instance — check_dose_selector_consistency","text":"","code":"check_dose_selector_consistency(x)"},{"path":"/reference/check_dose_selector_consistency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the consistency of a dose_selector instance — check_dose_selector_consistency","text":"x dose_selector","code":""},{"path":"/reference/check_dose_selector_consistency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the consistency of a dose_selector instance — check_dose_selector_consistency","text":"","code":"boin_fitter <- get_boin(num_doses = 5, target = 0.3) x <- fit(boin_fitter, \"1NNN\") check_dose_selector_consistency(x)"},{"path":"/reference/check_simulations_consistency.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the consistency of a dose_selector instance — check_simulations_consistency","title":"Check the consistency of a dose_selector instance — check_simulations_consistency","text":"Check consistency dose_selector instance","code":""},{"path":"/reference/check_simulations_consistency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the consistency of a dose_selector instance — check_simulations_consistency","text":"","code":"check_simulations_consistency(x)"},{"path":"/reference/check_simulations_consistency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the consistency of a dose_selector instance — check_simulations_consistency","text":"x simulations object","code":""},{"path":"/reference/cohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Cohort numbers of evaluated patients. — cohort","title":"Cohort numbers of evaluated patients. — cohort","text":"Get vector integers reflect cohorts evaluated patients belong.","code":""},{"path":"/reference/cohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cohort numbers of evaluated patients. — cohort","text":"","code":"cohort(x, ...)"},{"path":"/reference/cohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cohort numbers of evaluated patients. — cohort","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/cohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cohort numbers of evaluated patients. — cohort","text":"integer vector","code":""},{"path":"/reference/cohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cohort numbers of evaluated patients. — cohort","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% cohort() #> [1] 1 1 1 2 2 2"},{"path":"/reference/cohorts_of_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample times between patient arrivals using the exponential distribution. — cohorts_of_n","title":"Sample times between patient arrivals using the exponential distribution. — cohorts_of_n","text":"Sample times patient arrivals using exponential distribution.","code":""},{"path":"/reference/cohorts_of_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample times between patient arrivals using the exponential distribution. — cohorts_of_n","text":"","code":"cohorts_of_n(n = 3, mean_time_delta = 1)"},{"path":"/reference/cohorts_of_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample times between patient arrivals using the exponential distribution. — cohorts_of_n","text":"n integer, sample arrival times many patients. mean_time_delta average gap patient arrival times. .e. reciprocal rate parameter Exponential distribution.","code":""},{"path":"/reference/cohorts_of_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample times between patient arrivals using the exponential distribution. — cohorts_of_n","text":"data.frame column time_delta containing durations time patient arrivals.","code":""},{"path":"/reference/cohorts_of_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample times between patient arrivals using the exponential distribution. — cohorts_of_n","text":"","code":"cohorts_of_n() #>   time_delta #> 1  1.4908931 #> 2  2.3729609 #> 3  0.3119653 cohorts_of_n(n = 10, mean_time_delta = 5) #>    time_delta #> 1   1.0200386 #> 2   1.5699583 #> 3   5.0520792 #> 4   2.4786463 #> 5   8.2815979 #> 6  16.2331258 #> 7   1.1691456 #> 8   0.9847499 #> 9   6.6028085 #> 10  1.7941463"},{"path":"/reference/combo_selector.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose selector for combinations of treatments — combo_selector","title":"Dose selector for combinations of treatments — combo_selector","text":"TODO","code":""},{"path":"/reference/combo_selector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose selector for combinations of treatments — combo_selector","text":"","code":"combo_selector()"},{"path":[]},{"path":"/reference/combo_selector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dose selector for combinations of treatments — combo_selector","text":"","code":"# TODO"},{"path":"/reference/continue.html","id":null,"dir":"Reference","previous_headings":"","what":"Should this dose-finding experiment continue? — continue","title":"Should this dose-finding experiment continue? — continue","text":"dose-finding experiment continue? circumstances prevailed dictate trial stop? method critical automatic calculation statistical operating characteristics dose-pathways. add stopping behaviours designs using calls like stop_at_n stop_when_too_toxic.","code":""},{"path":"/reference/continue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Should this dose-finding experiment continue? — continue","text":"","code":"continue(x, ...)"},{"path":"/reference/continue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Should this dose-finding experiment continue? — continue","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/continue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Should this dose-finding experiment continue? — continue","text":"logical","code":""},{"path":"/reference/continue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Should this dose-finding experiment continue? — continue","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model1 <- get_dfcrm(skeleton = skeleton, target = target) fit1 <- model1 %>% fit('1NNN 2NTN') fit1 %>% continue() #> [1] TRUE  model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 6) fit2 <- model2 %>% fit('1NNN 2NTN') fit2 %>% continue() #> [1] FALSE"},{"path":"/reference/convergence_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the convergence processes from a collection of simulations. — convergence_plot","title":"Plot the convergence processes from a collection of simulations. — convergence_plot","text":"Plot convergence processes collection simulations.","code":""},{"path":"/reference/convergence_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the convergence processes from a collection of simulations. — convergence_plot","text":"","code":"convergence_plot(x, ...)"},{"path":"/reference/convergence_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the convergence processes from a collection of simulations. — convergence_plot","text":"x object type simulations_collection ... extra args passed onwards stack_sims_vert","code":""},{"path":"/reference/convergence_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the convergence processes from a collection of simulations. — convergence_plot","text":"ggplot2 plot","code":""},{"path":"/reference/convergence_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the convergence processes from a collection of simulations. — convergence_plot","text":"","code":"design1 <- get_mtpi2(   num_doses = 5, target = 0.25,   epsilon1 = 0.05, epsilon2 = 0.05,   exclusion_certainty = 0.95 ) %>%   stop_at_n(n = 12) design2 <- get_mtpi2(   num_doses = 5, target = 0.25,   epsilon1 = 0.1, epsilon2 = 0.1,   exclusion_certainty = 0.95 ) %>%   stop_at_n(n = 12) designs <- list(   \"Design1\" = design1,   \"Design2\" = design2 ) sims <- simulate_compare(   designs = designs,   num_sims = 20,   true_prob_tox = c(0.1, 0.2, 0.3, 0.4, 0.5) ) #> Running Design1  #> Running Design2  convergence_plot(sims)"},{"path":"/reference/crystallised_dose_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose-paths with probabilities attached. — crystallised_dose_paths","title":"Dose-paths with probabilities attached. — crystallised_dose_paths","text":"dose_paths reflect possible paths dose-finding trial may take. probability paths calculated using assumed set true dose-event probabilities, package paths said crysallised. crystallised, operating charactersitics can calculated.","code":""},{"path":"/reference/crystallised_dose_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose-paths with probabilities attached. — crystallised_dose_paths","text":"","code":"crystallised_dose_paths(   dose_paths,   true_prob_tox,   true_prob_eff = NULL,   terminal_nodes )"},{"path":"/reference/crystallised_dose_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dose-paths with probabilities attached. — crystallised_dose_paths","text":"dose_paths Object type dose_paths true_prob_tox vector toxicity probabilities doses 1..n true_prob_eff vector efficacy probabilities doses 1..n, optionally NULL efficacy evaluated. terminal_nodes tibble terminal nodes dose-paths","code":""},{"path":"/reference/crystallised_dose_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dose-paths with probabilities attached. — crystallised_dose_paths","text":"object type crystallised_dose_paths","code":""},{"path":"/reference/crystallised_dose_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dose-paths with probabilities attached. — crystallised_dose_paths","text":"","code":"# Calculate dose paths for the first three cohorts in a 3+3 trial of 5 doses: paths <- get_three_plus_three(num_doses = 5) %>%   get_dose_paths(cohort_sizes = c(3, 3, 3))  # Set the true probabilities of toxicity true_prob_tox <- c(0.12, 0.27, 0.44, 0.53, 0.57) # Crytallise the paths with the probabilities of toxicity x <- paths %>% calculate_probabilities(true_prob_tox) # And then examine, for example, the probabilities of recommending each dose # at the terminal nodes of these paths: prob_recommend(x) #>     NoDose          1          2          3          4          5  #> 0.12854451 0.33600635 0.19081343 0.29807918 0.04655654 0.00000000"},{"path":"/reference/demand_n_at_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Demand there are n patients at a dose before condisdering stopping. — demand_n_at_dose","title":"Demand there are n patients at a dose before condisdering stopping. — demand_n_at_dose","text":"method continues dose-finding trial n patients dose. condition met, delegates stopping responsibility parent dose selector, whatever might . class greedy meets needs asking selectors chain want. Thus, different behaviours may achieved nesting dose selectors different orders. See examples.","code":""},{"path":"/reference/demand_n_at_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demand there are n patients at a dose before condisdering stopping. — demand_n_at_dose","text":"","code":"demand_n_at_dose(parent_selector_factory, n, dose)"},{"path":"/reference/demand_n_at_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demand there are n patients at a dose before condisdering stopping. — demand_n_at_dose","text":"parent_selector_factory Object type selector_factory. n Continue least n dose. dose '' continue n dose; 'recommended' continue n recommended dose; integer continue n particular dose-level.","code":""},{"path":"/reference/demand_n_at_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Demand there are n patients at a dose before condisdering stopping. — demand_n_at_dose","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/demand_n_at_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demand there are n patients at a dose before condisdering stopping. — demand_n_at_dose","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25  # This model will demand 9 at any dose before it countenances stopping. model1 <- get_dfcrm(skeleton = skeleton, target = target) %>%   demand_n_at_dose(n = 9, dose = 'any')  # This model will recommend continuing: model1 %>% fit('1NNT 1NNN 2TNN 2NNN') %>% continue() #> [1] TRUE # It tells you to continue because there is no selector considering when # you should stop - dfcrm implements no stopping rule by default.  # In contrast, we can add a stopping selector to discern the behaviour of # demand_n_at_dose. We will demand 9 are seen at the recommended dose before # stopping is permitted in model3: model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   demand_n_at_dose(n = 9, dose = 'recommended')  # This model advocates stopping because 12 patients are seen in total: model2 %>% fit('1NNN 1NNN 2TNN 2NNN') %>% continue() #> [1] FALSE # But this model advocates continuing because 9 patients have not been seen # at any dose yet: model3 %>% fit('1NNN 1NNN 2TNN 2NNN') %>% continue() #> [1] TRUE # This shows how demand_n_at_dose overrides stopping behaviours that come # before it in the daisychain.  # Once 9 are seen at the recommended dose, the decision to stop is made: fit <- model3 %>% fit('1NNN 1NNN 2TNN 2NNN 2TTN') fit %>% continue() #> [1] FALSE fit %>% recommended_dose() #> [1] 2"},{"path":"/reference/dont_skip_doses.html","id":null,"dir":"Reference","previous_headings":"","what":"Prevent skipping of doses. — dont_skip_doses","title":"Prevent skipping of doses. — dont_skip_doses","text":"method optionally prevents dose selectors skipping doses escalating / deescalating. default skipping escalating prevented skipping deescalating permitted, behaviours can altered.","code":""},{"path":"/reference/dont_skip_doses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prevent skipping of doses. — dont_skip_doses","text":"","code":"dont_skip_doses(   parent_selector_factory,   when_escalating = TRUE,   when_deescalating = FALSE )"},{"path":"/reference/dont_skip_doses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prevent skipping of doses. — dont_skip_doses","text":"parent_selector_factory Object type selector_factory. when_escalating TRUE prevent skipping attempting escalate. when_deescalating TRUE prevent skipping attempting deescalate.","code":""},{"path":"/reference/dont_skip_doses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prevent skipping of doses. — dont_skip_doses","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/dont_skip_doses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prevent skipping of doses. — dont_skip_doses","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model1 <- get_dfcrm(skeleton = skeleton, target = target) %>%   dont_skip_doses() fit1 <- model1 %>% fit('1NNN')  model2 <- get_dfcrm(skeleton = skeleton, target = target) fit2 <- model2 %>% fit('1NNN')  # fit1 will not skip doses fit1 %>% recommended_dose() #> [1] 2 # But fit2 will: fit2 %>% recommended_dose() #> [1] 4  # Similar demonstration for de-escalation model1 <- get_dfcrm(skeleton = skeleton, target = target) %>%   dont_skip_doses(when_deescalating = TRUE) fit1 <- model1 %>% fit('1NNN 2N 3TTT')  model2 <- get_dfcrm(skeleton = skeleton, target = target) fit2 <- model2 %>% fit('1NNN 2N 3TTT')  # fit1 will not skip doses fit1 %>% recommended_dose() #> [1] 2 # But fit2 will: fit2 %>% recommended_dose() #> [1] 1"},{"path":"/reference/dose_admissible.html","id":null,"dir":"Reference","previous_headings":"","what":"Is each dose admissible? — dose_admissible","title":"Is each dose admissible? — dose_admissible","text":"Get vector logical values reflecting whether dose admissible. Admissibility defined different ways different models, may defined models. instance, TPI method, doses inadmissible posterior probability high toxicity rate exceeds target value. contrast, admissibility defined general CRM model (can added auxiliary classes). latter case, doses implicitly considered admissible, default.","code":""},{"path":"/reference/dose_admissible.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is each dose admissible? — dose_admissible","text":"","code":"dose_admissible(x, ...)"},{"path":"/reference/dose_admissible.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is each dose admissible? — dose_admissible","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/dose_admissible.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is each dose admissible? — dose_admissible","text":"logical vector","code":""},{"path":"/reference/dose_admissible.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is each dose admissible? — dose_admissible","text":"","code":"outcomes <- '1NNN 2TTT'  # TPI example. This method defines admissibility. fit1 <- get_tpi(num_doses = 5, target = 0.3, k1 = 1, k2 = 1.5,                 exclusion_certainty = 0.95) %>%   fit(outcomes) fit1 %>% dose_admissible() #> [1]  TRUE FALSE FALSE FALSE FALSE  # Ordinary CRM example with no admissibility function. skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 fit2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   fit(outcomes) fit2 %>% dose_admissible() #> [1] TRUE TRUE TRUE TRUE TRUE  # Same CRM example with added admissibility function fit3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 1, tox_threshold = target, confidence = 0.8) %>%   fit(outcomes) fit3 %>% dose_admissible() #> [1]  TRUE FALSE FALSE FALSE FALSE"},{"path":"/reference/dose_escalation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a table of dose escalation vs de-escalation vs stop decisions — dose_escalation_table","title":"Plot a table of dose escalation vs de-escalation vs stop decisions — dose_escalation_table","text":"Plot table dose escalation vs de-escalation vs stop decisions","code":""},{"path":"/reference/dose_escalation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a table of dose escalation vs de-escalation vs stop decisions — dose_escalation_table","text":"","code":"dose_escalation_table(   mod,   stop_at_n_in_dose_level,   dose = as.integer(2),   stop_label = \"DU\" )"},{"path":"/reference/dose_escalation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a table of dose escalation vs de-escalation vs stop decisions — dose_escalation_table","text":"mod object type selector_factory like returned get_dfcrm get_mtpi2, instance. stop_at_n_in_dose_level integer, maximum dose sample size dose integer, current dose stop_label, label given outcome dose selected","code":""},{"path":"/reference/dose_escalation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a table of dose escalation vs de-escalation vs stop decisions — dose_escalation_table","text":"plot","code":""},{"path":"/reference/dose_escalation_table.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a table of dose escalation vs de-escalation vs stop decisions — dose_escalation_table","text":"Conor Norris, Kristian Brock","code":""},{"path":"/reference/dose_escalation_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a table of dose escalation vs de-escalation vs stop decisions — dose_escalation_table","text":"","code":"mymod <- get_mtpi2(num_doses = 9, target = 0.4, alpha = 2, beta = 2,                    epsilon1 = 0.15, epsilon2 = 0.03,                    exclusion_certainty = 0.8) dose_escalation_table(   mod = mymod,   stop_at_n_in_dose_level = 15 )"},{"path":"/reference/dose_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose indices — dose_indices","title":"Dose indices — dose_indices","text":"Get integers 1 number doses investigation.","code":""},{"path":"/reference/dose_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose indices — dose_indices","text":"","code":"dose_indices(x, ...)"},{"path":"/reference/dose_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dose indices — dose_indices","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/dose_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dose indices — dose_indices","text":"integer vector","code":""},{"path":"/reference/dose_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dose indices — dose_indices","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% dose_indices() #> [1] 1 2 3 4 5"},{"path":"/reference/dose_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose pathways — dose_paths","title":"Dose pathways — dose_paths","text":"dose-escalation design exists select doses response observed outcomes. entire space possible responses can calculated show behaviour design response feasible outcomes. get_dose_paths function performs task returns instance object.","code":""},{"path":"/reference/dose_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose pathways — dose_paths","text":"","code":"dose_paths()"},{"path":[]},{"path":"/reference/dose_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dose pathways — dose_paths","text":"","code":"# Calculate dose-paths for the 3+3 design: paths <- get_three_plus_three(num_doses = 5) %>%   get_dose_paths(cohort_sizes = c(3, 3))"},{"path":"/reference/dose_paths_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Get function for calculating dose pathways. — dose_paths_function","title":"Get function for calculating dose pathways. — dose_paths_function","text":"function need called users. used internally.","code":""},{"path":"/reference/dose_paths_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get function for calculating dose pathways. — dose_paths_function","text":"","code":"dose_paths_function(selector_factory)"},{"path":"/reference/dose_paths_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get function for calculating dose pathways. — dose_paths_function","text":"selector_factory Object type selector_factory.","code":""},{"path":"/reference/dose_paths_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get function for calculating dose pathways. — dose_paths_function","text":"function.","code":""},{"path":"/reference/dose_string_to_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Go from a single multi-treatment dose string to a vector of dose-indices — dose_string_to_vector","title":"Go from a single multi-treatment dose string to a vector of dose-indices — dose_string_to_vector","text":"Go single multi-treatment dose string vector dose-indices","code":""},{"path":"/reference/dose_string_to_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Go from a single multi-treatment dose string to a vector of dose-indices — dose_string_to_vector","text":"","code":"dose_string_to_vector(x)"},{"path":"/reference/dose_string_to_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Go from a single multi-treatment dose string to a vector of dose-indices — dose_string_to_vector","text":"x multi-treatment dose string like \"1.3\" \"3.2\"","code":""},{"path":"/reference/dose_string_to_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Go from a single multi-treatment dose string to a vector of dose-indices — dose_string_to_vector","text":"vector integer dose-indices","code":""},{"path":"/reference/dose_string_to_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Go from a single multi-treatment dose string to a vector of dose-indices — dose_string_to_vector","text":"","code":"dose_string_to_vector(\"1.3\") #> [1] 1 3"},{"path":"/reference/dose_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose strings — dose_strings","title":"Dose strings — dose_strings","text":"Get strings representing doses investigation, congruent dose_indices(x)","code":""},{"path":"/reference/dose_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose strings — dose_strings","text":"","code":"dose_strings(x, ...)"},{"path":"/reference/dose_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dose strings — dose_strings","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/dose_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dose strings — dose_strings","text":"character vector","code":""},{"path":"/reference/dose_strings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dose strings — dose_strings","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% dose_strings() #> [1] \"1\" \"2\" \"3\" \"4\" \"5\""},{"path":"/reference/dose_vector_to_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Go from a single multi-treatment vector of dose-indices to a dose string — dose_vector_to_string","title":"Go from a single multi-treatment vector of dose-indices to a dose string — dose_vector_to_string","text":"Go single multi-treatment vector dose-indices dose string","code":""},{"path":"/reference/dose_vector_to_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Go from a single multi-treatment vector of dose-indices to a dose string — dose_vector_to_string","text":"","code":"dose_vector_to_string(x)"},{"path":"/reference/dose_vector_to_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Go from a single multi-treatment vector of dose-indices to a dose string — dose_vector_to_string","text":"x vector integer dose indices","code":""},{"path":"/reference/dose_vector_to_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Go from a single multi-treatment vector of dose-indices to a dose string — dose_vector_to_string","text":"character","code":""},{"path":"/reference/dose_vector_to_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Go from a single multi-treatment vector of dose-indices to a dose string — dose_vector_to_string","text":"","code":"dose_vector_to_string(as.integer(c(1, 3))) # The indices must be integers! #> [1] \"1.3\""},{"path":"/reference/doses_given.html","id":null,"dir":"Reference","previous_headings":"","what":"Doses given to patients. — doses_given.boin_comb_selector","title":"Doses given to patients. — doses_given.boin_comb_selector","text":"Get vector dose-levels administered patients.","code":""},{"path":"/reference/doses_given.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Doses given to patients. — doses_given.boin_comb_selector","text":"","code":"# S3 method for class 'boin_comb_selector' doses_given(x, dose_string = FALSE, ...)  doses_given(x, ...)  # S3 method for class 'simulations' doses_given(x, dose_string = FALSE, ...)"},{"path":"/reference/doses_given.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Doses given to patients. — doses_given.boin_comb_selector","text":"x Object type selector. dose_string TRUE return vector character dose-strings; FALSE (default) get list matrices, one simulated trial, dose-indices different treatments columns patients rows. ... Extra args passed onwards.","code":""},{"path":"/reference/doses_given.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Doses given to patients. — doses_given.boin_comb_selector","text":"integer vector","code":""},{"path":"/reference/doses_given.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Doses given to patients. — doses_given.boin_comb_selector","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% doses_given() #> [1] 1 1 1 2 2 2"},{"path":"/reference/eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary efficacy outcomes. — eff","title":"Binary efficacy outcomes. — eff","text":"Get vector binary efficacy outcomes evaluated patients.","code":""},{"path":"/reference/eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary efficacy outcomes. — eff","text":"","code":"eff(x, ...)"},{"path":"/reference/eff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary efficacy outcomes. — eff","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/eff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary efficacy outcomes. — eff","text":"integer vector","code":""},{"path":"/reference/eff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary efficacy outcomes. — eff","text":"","code":"prob_select = c(0.1, 0.3, 0.5, 0.07, 0.03) model <- get_random_selector(prob_select = prob_select,                              supports_efficacy = TRUE) x <- model %>% fit('1NTN 2EN 5BB') eff(x) #> [1] 0 0 0 1 0 1 1"},{"path":"/reference/eff_at_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of toxicities seen at each dose. — eff_at_dose","title":"Number of toxicities seen at each dose. — eff_at_dose","text":"Get number toxicities seen dose investigation.","code":""},{"path":"/reference/eff_at_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of toxicities seen at each dose. — eff_at_dose","text":"","code":"eff_at_dose(x, ...)"},{"path":"/reference/eff_at_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of toxicities seen at each dose. — eff_at_dose","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/eff_at_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of toxicities seen at each dose. — eff_at_dose","text":"integer vector","code":""},{"path":"/reference/eff_at_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of toxicities seen at each dose. — eff_at_dose","text":"","code":"prob_select = c(0.1, 0.3, 0.5, 0.07, 0.03) model <- get_random_selector(prob_select = prob_select,                              supports_efficacy = TRUE) x <- model %>% fit('1NTN 2EN 5BB') eff_at_dose(x) #> [1] 0 1 0 0 2"},{"path":"/reference/eff_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficacy rate limit — eff_limit","title":"Efficacy rate limit — eff_limit","text":"Get minimum permissible efficacy rate, supported. NULL .","code":""},{"path":"/reference/eff_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficacy rate limit — eff_limit","text":"","code":"eff_limit(x, ...)"},{"path":"/reference/eff_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficacy rate limit — eff_limit","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/eff_limit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficacy rate limit — eff_limit","text":"numeric","code":""},{"path":"/reference/eff_limit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficacy rate limit — eff_limit","text":"","code":"efftox_priors <- trialr::efftox_priors p <- efftox_priors(alpha_mean = -7.9593, alpha_sd = 3.5487,                    beta_mean = 1.5482, beta_sd = 3.5018,                    gamma_mean = 0.7367, gamma_sd = 2.5423,                    zeta_mean = 3.4181, zeta_sd = 2.4406,                    eta_mean = 0, eta_sd = 0.2,                    psi_mean = 0, psi_sd = 1) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) model <- get_trialr_efftox(real_doses = real_doses,                            efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,                            p_e = 0.1, p_t = 0.1,                            eff0 = 0.5, tox1 = 0.65,                            eff_star = 0.7, tox_star = 0.25,                            priors = p, iter = 1000, chains = 1, seed = 2020) x <- model %>% fit('1N 2E 3B') eff_limit(x) #> [1] 0.5"},{"path":"/reference/empiric_eff_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Observed efficacy rate at each dose. — empiric_eff_rate","title":"Observed efficacy rate at each dose. — empiric_eff_rate","text":"Get empirical observed efficacy rate seen dose investigation. simply number efficacies divded number patients evaluated.","code":""},{"path":"/reference/empiric_eff_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observed efficacy rate at each dose. — empiric_eff_rate","text":"","code":"empiric_eff_rate(x, ...)"},{"path":"/reference/empiric_eff_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observed efficacy rate at each dose. — empiric_eff_rate","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/empiric_eff_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observed efficacy rate at each dose. — empiric_eff_rate","text":"numerical vector","code":""},{"path":"/reference/empiric_eff_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Observed efficacy rate at each dose. — empiric_eff_rate","text":"","code":"prob_select = c(0.1, 0.3, 0.5, 0.07, 0.03) model <- get_random_selector(prob_select = prob_select,                              supports_efficacy = TRUE) x <- model %>% fit('1NTN 2EN 5BB') empiric_tox_rate(x) #> [1] 0.3333333 0.0000000       NaN       NaN 1.0000000"},{"path":"/reference/empiric_tox_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Observed toxicity rate at each dose. — empiric_tox_rate","title":"Observed toxicity rate at each dose. — empiric_tox_rate","text":"Get empirical observed toxicity rate seen dose investigation. simply number toxicities divded number patients evaluated.","code":""},{"path":"/reference/empiric_tox_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observed toxicity rate at each dose. — empiric_tox_rate","text":"","code":"empiric_tox_rate(x, ...)"},{"path":"/reference/empiric_tox_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observed toxicity rate at each dose. — empiric_tox_rate","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/empiric_tox_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observed toxicity rate at each dose. — empiric_tox_rate","text":"numerical vector","code":""},{"path":"/reference/empiric_tox_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Observed toxicity rate at each dose. — empiric_tox_rate","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% empiric_tox_rate() #> [1] 0.0000000 0.3333333       NaN       NaN       NaN"},{"path":"/reference/enforce_three_plus_three.html","id":null,"dir":"Reference","previous_headings":"","what":"Enforce that a trial path has followed the 3+3 method. — enforce_three_plus_three","title":"Enforce that a trial path has followed the 3+3 method. — enforce_three_plus_three","text":"function stops en error detects outcomes describing  trial path diverged advocated 3+3 method.","code":""},{"path":"/reference/enforce_three_plus_three.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enforce that a trial path has followed the 3+3 method. — enforce_three_plus_three","text":"","code":"enforce_three_plus_three(outcomes, allow_deescalate = FALSE)"},{"path":"/reference/enforce_three_plus_three.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enforce that a trial path has followed the 3+3 method. — enforce_three_plus_three","text":"outcomes Outcomes observed. See parse_phase1_outcomes. allow_deescalate TRUE allow de-escalation, described Korn et al. Default FALSE.","code":""},{"path":"/reference/enforce_three_plus_three.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enforce that a trial path has followed the 3+3 method. — enforce_three_plus_three","text":"Nothing. Function stops problem detected.","code":""},{"path":"/reference/enforce_three_plus_three.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enforce that a trial path has followed the 3+3 method. — enforce_three_plus_three","text":"","code":"if (FALSE) { # \\dontrun{ enforce_three_plus_three('1NNN 2NTN 2NNN')  # OK enforce_three_plus_three('1NNN 2NTN 2N')  # OK too, albeit in-progress cohort enforce_three_plus_three('1NNN 1N')  # Not OK because should have escalated } # }"},{"path":"/reference/escalation-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'escalation' package. — escalation-package","title":"The 'escalation' package. — escalation-package","text":"escalation provides methods working dose-finding clinical trials. provide implementations many dose-finding clinical trial designs, ncluding continual reassessment method (CRM) O'Quigley et al. (1990) <doi:10.2307/2531628>, toxicity probability interval (TPI) design Ji et al. (2007) <doi:10.1177/1740774507079442>, modified TPI (mTPI) design Ji et al. (2010) <doi:10.1177/1740774510382799>, Bayesian optimal interval design (BOIN) Liu & Yuan (2015) <doi:10.1111/rssc.12089>, EffTox Thall & Cook (2004) <doi:10.1111/j.0006-341X.2004.00218.x>; design Wages & Tait (2015) <doi:10.1080/10543406.2014.920873>, 3+3 described Korn et al. (1994) <doi:10.1002/sim.4780131802>. designs implemented common interface. also offer optional additional classes tailor behaviour designs, including avoiding skipping doses, stopping n patients treated recommended dose, stopping toxicity condition met, demanding n patients treated stopping allowed. daisy-chaining together classes using pipe operator 'magrittr', simple tailor behaviour dose-finding design behaves trialist wants. provided flexible interface specifying designs, provide functions run simulations calculate dose-paths future cohorts patients.","code":""},{"path":[]},{"path":"/reference/escalation-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'escalation' package. — escalation-package","text":"Maintainer: Kristian Brock kristian.brock@gmail.com (ORCID) Authors: Daniel Slade (ORCID) Michael Sweeting (ORCID) contributors: Conor Norris (ORCID) [contributor] Bharat Bhushan (ORCID) [contributor]","code":""},{"path":"/reference/expand_last_dose_to_cohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand the cohort of the last given dose to at least n patients — expand_last_dose_to_cohort","title":"Expand the cohort of the last given dose to at least n patients — expand_last_dose_to_cohort","text":"Expand cohort last given dose least n patients","code":""},{"path":"/reference/expand_last_dose_to_cohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand the cohort of the last given dose to at least n patients — expand_last_dose_to_cohort","text":"","code":"expand_last_dose_to_cohort(parent_selector_factory, n)"},{"path":"/reference/expand_last_dose_to_cohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand the cohort of the last given dose to at least n patients — expand_last_dose_to_cohort","text":"parent_selector_factory Object type selector_factory. n Continue current dose least n patients evaluated.","code":""},{"path":"/reference/expand_last_dose_to_cohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand the cohort of the last given dose to at least n patients — expand_last_dose_to_cohort","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/expand_last_dose_to_cohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand the cohort of the last given dose to at least n patients — expand_last_dose_to_cohort","text":"","code":"model <- follow_path(path = \"1N 2N 3N\") %>%   expand_last_dose_to_cohort(n = 3) x <- model %>% fit(\"1N 2N 3T\") # Design will continue: continue(x) #> [1] TRUE # at dose 3: recommended_dose(x) #> [1] 3 # because it is expanding the last dose to a cohort of three."},{"path":"/reference/fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a dose-finding model. — fit","title":"Fit a dose-finding model. — fit","text":"Fit dose-finding model outcomes.","code":""},{"path":"/reference/fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a dose-finding model. — fit","text":"","code":"fit(selector_factory, outcomes, ...)"},{"path":"/reference/fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a dose-finding model. — fit","text":"selector_factory Object type selector_factory. outcomes Outcome string. See parse_phase1_outcomes. ... Extra args passed onwards.","code":""},{"path":"/reference/fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a dose-finding model. — fit","text":"Object generic type selector.","code":""},{"path":[]},{"path":"/reference/fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a dose-finding model. — fit","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% recommended_dose()  # Etc #> [1] 2"},{"path":"/reference/follow_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Follow a pre-determined dose administration path. — follow_path","title":"Follow a pre-determined dose administration path. — follow_path","text":"method creates dose selector follow pre-specified trial path. Whilst trial path matched realised outcomes, selector recommend next dose desired sequence. soon observed outcomes diverge desired path, selector stops giving dose recommendations. makes possible, instance, specify fixed escalation plan followed first toxicity seen. tactic used model-based designs get rapidly doses action . See, example, dfcrm package Cheung (2011).","code":""},{"path":"/reference/follow_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Follow a pre-determined dose administration path. — follow_path","text":"","code":"follow_path(path)"},{"path":"/reference/follow_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Follow a pre-determined dose administration path. — follow_path","text":"path Follow outcome path. See parse_phase1_outcomes.","code":""},{"path":"/reference/follow_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Follow a pre-determined dose administration path. — follow_path","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/follow_path.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Follow a pre-determined dose administration path. — follow_path","text":"Cheung. Dose Finding Continual Reassessment Method. 2011. Chapman Hall/CRC. ISBN 9781420091519","code":""},{"path":"/reference/follow_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Follow a pre-determined dose administration path. — follow_path","text":"","code":"model1 <- follow_path(path = '1NNN 2NNN 3NNN 4NNN')  fit1 <- model1 %>% fit('1NNN 2N') fit1 %>% recommended_dose() #> [1] 2 fit1 %>% continue() #> [1] TRUE # The model recommends continuing at dose 2 because the observed outcomes # perfectly match the desired escalation path.  fit2 <- model1 %>% fit('1NNN 2NT') fit2 %>% recommended_dose() #> [1] NA fit2 %>% continue() #> [1] FALSE # Uh oh. Toxicity has now been seen, the outcomes diverge from the sought # path, hence this class recommends no dose now. # At this point, we can hand over dose selection decisions to another class # by chaining them together, like: model2 <- follow_path(path = '1NNN 2NNN 3NNN 4NNN') %>%   get_dfcrm(skeleton = c(0.05, 0.1, 0.25, 0.4, 0.6), target = 0.25) fit3 <- model2 %>% fit('1NNN 2NT') # Now the CRM model is using all of the outcomes to calculate the next dose: fit3 %>% recommended_dose() #> [1] 2 fit3 %>% continue() #> [1] TRUE"},{"path":"/reference/get_boin.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the BOIN model using the BOIN package. — get_boin","title":"Get an object to fit the BOIN model using the BOIN package. — get_boin","text":"Get object fit BOIN model using BOIN package.","code":""},{"path":"/reference/get_boin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the BOIN model using the BOIN package. — get_boin","text":"","code":"get_boin(   num_doses,   target,   use_stopping_rule = TRUE,   stop_when_deescalation_impossible = FALSE,   ... )"},{"path":"/reference/get_boin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the BOIN model using the BOIN package. — get_boin","text":"num_doses Number doses investigation. target seek dose probability toxicity. use_stopping_rule TRUE use toxicity stopping rule described Yan et al. (2019). FALSE suppress authors' stopping rule, assumption test necessity stop early way. stop_when_deescalation_impossible TRUE stop trial recommend dose advice de-escalate de-escalation impossible already lowest dose. Note feature requested user. param FALSE default behaviour matches described publication. original authors advocate behaviour. ... Extra args passed get.boundary.","code":""},{"path":"/reference/get_boin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the BOIN model using the BOIN package. — get_boin","text":"object type selector_factory can fit BOIN model outcomes.","code":""},{"path":"/reference/get_boin.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the BOIN model using the BOIN package. — get_boin","text":"Yan, F., Pan, H., Zhang, L., Liu, S., & Yuan, Y. (2019). BOIN: R Package Designing Single-Agent Drug-Combination Dose-Finding Trials Using Bayesian Optimal Interval Designs. Journal Statistical Software, 27(November 2017), 0–35. https://doi.org/10.18637/jss.v094.i13 Liu, S., & Yuan, Y. (2015). Bayesian optimal interval designs phase clinical trials. J. R. Stat. Soc. C, 64, 507–523. https://doi.org/10.1111/rssc.12089","code":""},{"path":"/reference/get_boin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the BOIN model using the BOIN package. — get_boin","text":"","code":"target <- 0.25 model1 <- get_boin(num_doses = 5, target = target)  outcomes <- '1NNN 2NTN' model1 %>% fit(outcomes) %>% recommended_dose() #> [1] 1"},{"path":"/reference/get_boin12.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the BOIN12 model for phase I/II dose-finding. — get_boin12","title":"Get an object to fit the BOIN12 model for phase I/II dose-finding. — get_boin12","text":"function returns object can used fit BOIN12 model phase /II dose-finding, .e. selects doses according efficacy toxicity outcomes.","code":""},{"path":"/reference/get_boin12.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the BOIN12 model for phase I/II dose-finding. — get_boin12","text":"","code":"get_boin12(   num_doses,   phi_t,   phi_e,   u1 = 100,   u2,   u3,   u4 = 0,   n_star = 6,   c_t = 0.95,   c_e = 0.9,   start_dose = 1,   prior_alpha = 1,   prior_beta = 1,   ... )"},{"path":"/reference/get_boin12.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the BOIN12 model for phase I/II dose-finding. — get_boin12","text":"num_doses integer, num doses investigation phi_t Probability toxicity threshold phi_e Probability efficacy threshold u1 utility efficacy without toxicity, 100 default u2 utility efficacy toxicity, u1 u4 u3 utility efficacy toxicity, u1 u4 u4 utility toxicity without efficacy , 0 default n_star tox within bounds, stop exploring higher doses n dose greater equal value. 6 default. c_t certainty required flag excess toxicity, 0.95 default c_e certainty required flag deficient efficacy, 0.9 default start_dose index starting dose, 1 default (.e. lowest dose) prior_alpha first shape param prior beta prior, 1 default prior_beta second shape param prior beta prior, 1 default ... Extra args passed onwards.","code":""},{"path":"/reference/get_boin12.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the BOIN12 model for phase I/II dose-finding. — get_boin12","text":"object type selector_factory can fit BOIN12 model outcomes.","code":""},{"path":"/reference/get_boin12.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the BOIN12 model for phase I/II dose-finding. — get_boin12","text":"Lin, R., Zhou, Y., Yan, F., Li, D., & Yuan, Y. (2020). BOIN12: Bayesian optimal interval phase /II trial design utility-based dose finding immunotherapy targeted therapies. JCO precision oncology, 4, 1393-1402.","code":""},{"path":"/reference/get_boin12.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the BOIN12 model for phase I/II dose-finding. — get_boin12","text":"","code":"# Examples in Lin et al. model <- get_boin12(num_doses = 5, phi_t = 0.35, phi_e = 0.25,                     u2 = 40, u3 = 60, n_star = 6) fit <- model %>% fit('1NNN 2ENT 3ETT 2EEN') fit %>% recommended_dose() #> [1] 2 fit %>% continue() #> [1] TRUE fit %>% is_randomising() #> [1] FALSE fit %>% dose_admissible() #> [1]  TRUE  TRUE  TRUE FALSE FALSE fit %>% prob_administer() #>    1    2    3    4    5  #> 0.25 0.50 0.25 0.00 0.00"},{"path":"/reference/get_boin_comb.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the BOIN COMB model using the BOIN package. — get_boin_comb","title":"Get an object to fit the BOIN COMB model using the BOIN package. — get_boin_comb","text":"Get object fit BOIN COMB model using BOIN package.","code":""},{"path":"/reference/get_boin_comb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the BOIN COMB model using the BOIN package. — get_boin_comb","text":"","code":"get_boin_comb(   parent_selector_factory = NULL,   num_doses,   target,   use_stopping_rule = TRUE,   ... )"},{"path":"/reference/get_boin_comb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the BOIN COMB model using the BOIN package. — get_boin_comb","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just use CRM start. num_doses integer vector number doses treatment 1, 2 target seek dose probability toxicity. use_stopping_rule TODO ... Extra args passed next.comb.","code":""},{"path":"/reference/get_boin_comb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the BOIN COMB model using the BOIN package. — get_boin_comb","text":"object type selector_factory can fit BOIN COMB model outcomes.","code":""},{"path":"/reference/get_boin_comb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the BOIN COMB model using the BOIN package. — get_boin_comb","text":"Lin, R., & Yin, G. (2017). Bayesian optimal interval design dose finding drug-combination trials. Statistical methods medical research, 26(5), 2155-2167.","code":""},{"path":"/reference/get_boin_comb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the BOIN COMB model using the BOIN package. — get_boin_comb","text":"","code":"num_doses <- c(3, 4) target <- 0.25 boin_fitter <- get_boin_comb(num_doses = num_doses, target = target) x1 <- fit(boin_fitter, outcomes = \"1.1NNN\") x1 #> Patient-level data: #> # A tibble: 3 × 5 #>   Cohort Patient Dose_string Dose        Tox #>    <int>   <int> <chr>       <list>    <int> #> 1      1       1 1.1         <int [2]>     0 #> 2      1       2 1.1         <int [2]>     0 #> 3      1       3 1.1         <int [2]>     0 #>  #> Dose-level data: #> # A tibble: 13 × 8 #>    dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>    <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #>  1 NoDose     0     0                0        0          0           TRUE       #>  2 1.1        0     3                0        0.0161     0.000000215 TRUE       #>  3 1.2        0     0              NaN        0.5        0.500       TRUE       #>  4 1.3        0     0              NaN        0.5        0.500       TRUE       #>  5 1.4        0     0              NaN        0.5        0.500       TRUE       #>  6 2.1        0     0              NaN        0.5        0.500       TRUE       #>  7 2.2        0     0              NaN        0.5        0.500       TRUE       #>  8 2.3        0     0              NaN        0.5        0.500       TRUE       #>  9 2.4        0     0              NaN        0.5        0.500       TRUE       #> 10 3.1        0     0              NaN        0.5        0.500       TRUE       #> 11 3.2        0     0              NaN        0.5        0.500       TRUE       #> 12 3.3        0     0              NaN        0.5        0.500       TRUE       #> 13 3.4        0     0              NaN        0.5        0.500       TRUE       #> # ℹ 1 more variable: recommended <lgl> #>  #> The model targets a toxicity level of 0.25. #> The model advocates continuing at dose 1.2. x2 <- fit(boin_fitter, outcomes = \"1.1NNN 2.1TNT\") x2 #> Patient-level data: #> # A tibble: 6 × 5 #>   Cohort Patient Dose_string Dose        Tox #>    <int>   <int> <chr>       <list>    <int> #> 1      1       1 1.1         <int [2]>     0 #> 2      1       2 1.1         <int [2]>     0 #> 3      1       3 1.1         <int [2]>     0 #> 4      2       4 2.1         <int [2]>     1 #> 5      2       5 2.1         <int [2]>     0 #> 6      2       6 2.1         <int [2]>     1 #>  #> Dose-level data: #> # A tibble: 13 × 8 #>    dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>    <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #>  1 NoDose     0     0            0            0          0           TRUE       #>  2 1.1        0     3            0            0.0161     0.000000215 TRUE       #>  3 1.2        0     0          NaN            0.5        0.500       TRUE       #>  4 1.3        0     0          NaN            0.5        0.500       TRUE       #>  5 1.4        0     0          NaN            0.5        0.500       TRUE       #>  6 2.1        2     3            0.667        0.632      0.525       TRUE       #>  7 2.2        0     0          NaN            0.632      0.525       TRUE       #>  8 2.3        0     0          NaN            0.632      0.525       TRUE       #>  9 2.4        0     0          NaN            0.632      0.525       TRUE       #> 10 3.1        0     0          NaN            0.632      0.525       TRUE       #> 11 3.2        0     0          NaN            0.632      0.525       TRUE       #> 12 3.3        0     0          NaN            0.632      0.525       TRUE       #> 13 3.4        0     0          NaN            0.632      0.525       TRUE       #> # ℹ 1 more variable: recommended <lgl> #>  #> The model targets a toxicity level of 0.25. #> The model advocates continuing at dose 1.1."},{"path":"/reference/get_dfcrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the CRM model using the dfcrm package. — get_dfcrm","title":"Get an object to fit the CRM model using the dfcrm package. — get_dfcrm","text":"function returns object can used fit CRM model using methods provided dfcrm package. Dose selectors designed daisy-chained together achieve different behaviours. class **resumptive** selector, meaning carries previous dose selector, present, elected continue. example, allows instances class preceded selector follows fixed path initial escalation plan, provided follow_path. example, observed trial outcomes deviate initial plan, selector following fixed path elects continue responsibility passes class. See Examples. time--event variant, TITE-CRM, used via dfcrm::titecrm function specify tite = TRUE. weights observations allow dose-selections based partially observed outcomes.","code":""},{"path":"/reference/get_dfcrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the CRM model using the dfcrm package. — get_dfcrm","text":"","code":"get_dfcrm(parent_selector_factory = NULL, skeleton, target, tite = FALSE, ...)"},{"path":"/reference/get_dfcrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the CRM model using the dfcrm package. — get_dfcrm","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just use CRM start. skeleton Dose-toxicity skeleton, non-decreasing vector probabilities. target seek dose probability toxicity. tite FALSE use regular CRM; TRUE use TITE-CRM. See Description. ... Extra args passed crm.","code":""},{"path":"/reference/get_dfcrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the CRM model using the dfcrm package. — get_dfcrm","text":"object type selector_factory can fit CRM model outcomes.","code":""},{"path":"/reference/get_dfcrm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the CRM model using the dfcrm package. — get_dfcrm","text":"Cheung, K. 2019. dfcrm: Dose-Finding Continual Reassessment Method. R package version 0.2-2.1. https://CRAN.R-project.org/package=dfcrm Cheung, K. 2011. Dose Finding Continual Reassessment Method. Chapman Hall/CRC. ISBN 9781420091519 O’Quigley J, Pepe M, Fisher L. Continual reassessment method: practical design phase 1 clinical trials cancer. Biometrics. 1990;46(1):33-48. doi:10.2307/2531628","code":""},{"path":"/reference/get_dfcrm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the CRM model using the dfcrm package. — get_dfcrm","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model1 <- get_dfcrm(skeleton = skeleton, target = target)  # By default, dfcrm fits the empiric model: outcomes <- '1NNN 2NTN' model1 %>% fit(outcomes) %>% recommended_dose() #> [1] 2  # But we can provide extra args to get_dfcrm that are than passed onwards to # the call to dfcrm::crm to override the defaults. For example, if we want # the one-parameter logistic model: model2 <- get_dfcrm(skeleton = skeleton, target = target, model = 'logistic') model2 %>% fit(outcomes) %>% recommended_dose() #> [1] 2 # dfcrm does not offer a two-parameter logistic model but other classes do.  # We can use an initial dose-escalation plan, a pre-specified path that # should be followed until trial outcomes deviate, at which point the CRM # model takes over. For instance, if we want to use two patients at each of # the first three doses in the absence of toxicity, irrespective the model's # advice, we would run: model1 <- follow_path('1NN 2NN 3NN') %>%   get_dfcrm(skeleton = skeleton, target = target)  # If outcomes match the desired path, the path is followed further: model1 %>% fit('1NN 2N') %>% recommended_dose() #> [1] 2  # But when the outcomes diverge: model1 %>% fit('1NN 2T') %>% recommended_dose() #> [1] 1  # Or the pre-specified path comes to an end: model1 %>% fit('1NN 2NN 3NN') %>% recommended_dose() #> [1] 5 # The CRM model takes over."},{"path":"/reference/get_dfcrm_tite.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the TITE-CRM model using the dfcrm package. — get_dfcrm_tite","title":"Get an object to fit the TITE-CRM model using the dfcrm package. — get_dfcrm_tite","text":"Get object fit TITE-CRM model using dfcrm package.","code":""},{"path":"/reference/get_dfcrm_tite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the TITE-CRM model using the dfcrm package. — get_dfcrm_tite","text":"","code":"get_dfcrm_tite(parent_selector_factory = NULL, skeleton, target, ...)"},{"path":"/reference/get_dfcrm_tite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the TITE-CRM model using the dfcrm package. — get_dfcrm_tite","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just use CRM start. skeleton Dose-toxicity skeleton, non-decreasing vector probabilities. target seek dose probability toxicity. ... Extra args passed crm.","code":""},{"path":"/reference/get_dfcrm_tite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the TITE-CRM model using the dfcrm package. — get_dfcrm_tite","text":"object type selector_factory can fit CRM model outcomes.","code":""},{"path":"/reference/get_dfcrm_tite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get an object to fit the TITE-CRM model using the dfcrm package. — get_dfcrm_tite","text":"function short-cut get_dfcrm(tite = TRUE). See get_dfcrm full details.","code":""},{"path":"/reference/get_dfcrm_tite.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the TITE-CRM model using the dfcrm package. — get_dfcrm_tite","text":"Cheung, K. 2019. dfcrm: Dose-Finding Continual Reassessment Method. R package version 0.2-2.1. https://CRAN.R-project.org/package=dfcrm Cheung, K. 2011. Dose Finding Continual Reassessment Method. Chapman Hall/CRC. ISBN 9781420091519","code":""},{"path":"/reference/get_dfcrm_tite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the TITE-CRM model using the dfcrm package. — get_dfcrm_tite","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model1 <- get_dfcrm_tite(skeleton = skeleton, target = target) outcomes <- data.frame(   dose = c(1, 1, 2, 2, 3, 3),   tox = c(0, 0, 0, 0, 1, 0),   weight = c(1, 1, 1, 0.9, 1, 0.5),   cohort = c(1, 2, 3, 4, 5, 6) ) fit <- model1 %>% fit(outcomes)"},{"path":"/reference/get_dose_combo_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all combinations of dose indices — get_dose_combo_indices","title":"Get all combinations of dose indices — get_dose_combo_indices","text":"Get combinations dose indices","code":""},{"path":"/reference/get_dose_combo_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all combinations of dose indices — get_dose_combo_indices","text":"","code":"get_dose_combo_indices(num_doses)"},{"path":"/reference/get_dose_combo_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all combinations of dose indices — get_dose_combo_indices","text":"num_doses integer vector number doses length(num_doses) treatments","code":""},{"path":"/reference/get_dose_combo_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all combinations of dose indices — get_dose_combo_indices","text":"list, element integer vector","code":""},{"path":"/reference/get_dose_combo_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all combinations of dose indices — get_dose_combo_indices","text":"","code":"get_dose_combo_indices(num_doses = c(1, 2)) #> [[1]] #> [1] 1 1 #>  #> [[2]] #> [1] 1 2 #>  # returns list(c(1, 1), c(1, 2))"},{"path":"/reference/get_dose_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate future dose paths. — get_dose_paths","title":"Calculate future dose paths. — get_dose_paths","text":"dose-escalation design exists select doses response observed outcomes. entire space possible responses can calculated show behaviour design response feasible outcomes. function performs task.","code":""},{"path":"/reference/get_dose_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate future dose paths. — get_dose_paths","text":"","code":"get_dose_paths(selector_factory, cohort_sizes, ...)"},{"path":"/reference/get_dose_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate future dose paths. — get_dose_paths","text":"selector_factory Object type selector_factory. cohort_sizes Integer vector representing sizes ... Extra args passed onwards.","code":""},{"path":"/reference/get_dose_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate future dose paths. — get_dose_paths","text":"Object type dose_paths.","code":""},{"path":"/reference/get_dose_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate future dose paths. — get_dose_paths","text":"","code":"# Calculate paths for a 3+3 design for the next two cohorts of three patients paths <- get_three_plus_three(num_doses = 5) %>%   get_dose_paths(cohort_sizes = c(3, 3))"},{"path":"/reference/get_empiric_crm_skeleton_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get posterior model weights for several empiric CRM skeletons. — get_empiric_crm_skeleton_weights","title":"Get posterior model weights for several empiric CRM skeletons. — get_empiric_crm_skeleton_weights","text":"Get posterior model weights several empiric CRM skeletons, assuming normal prior beta model parameter","code":""},{"path":"/reference/get_empiric_crm_skeleton_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get posterior model weights for several empiric CRM skeletons. — get_empiric_crm_skeleton_weights","text":"","code":"get_empiric_crm_skeleton_weights(   skeletons,   events_at_dose,   n_at_dose,   prior = rep(1, nrow(skeletons)) )"},{"path":"/reference/get_empiric_crm_skeleton_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get posterior model weights for several empiric CRM skeletons. — get_empiric_crm_skeleton_weights","text":"skeletons matrix one skeleton per row, number columns number doses investigation. events_at_dose integer vector number events doses n_at_dose integer vector number patients doses prior vector prior model weights. Length number rows skeletons. Default equal weighting.","code":""},{"path":"/reference/get_empiric_crm_skeleton_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get posterior model weights for several empiric CRM skeletons. — get_empiric_crm_skeleton_weights","text":"numerical vector, posterior weights skeletons.","code":""},{"path":"/reference/get_mtpi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the mTPI dose-finding model. — get_mtpi","title":"Get an object to fit the mTPI dose-finding model. — get_mtpi","text":"modified toxicity probability interval (mTPI)dose-escalation design Ji et al. name suggests, adaptation TPI design.","code":""},{"path":"/reference/get_mtpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the mTPI dose-finding model. — get_mtpi","text":"","code":"get_mtpi(   parent_selector_factory = NULL,   num_doses,   target,   epsilon1,   epsilon2,   exclusion_certainty,   alpha = 1,   beta = 1,   stop_when_deescalation_impossible = FALSE,   ... )"},{"path":"/reference/get_mtpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the mTPI dose-finding model. — get_mtpi","text":"parent_selector_factory Object type selector_factory. num_doses Number doses investigation. target seek dose probability toxicity. epsilon1 parameter determines lower bound equivalence interval. See Details. epsilon2 parameter determines upper bound equivalence interval. See Details. exclusion_certainty Numeric, threshold posterior certainty required exclude dose excessively toxic. authors discuss values range 0.7 - 0.95. Set value > 1 suppress dose exclusion mechanism. authors use Greek letter xi parameter. alpha First shape parameter beta prior distribution probability toxicity. beta Second shape parameter beta prior distribution probability toxicity. stop_when_deescalation_impossible TRUE stop trial recommend dose advice de-escalate de-escalation impossible already lowest dose. Note feature requested user. param FALSE default behaviour matches described publication. original authors advocate behaviour. ... Extra args passed onwards.","code":""},{"path":"/reference/get_mtpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the mTPI dose-finding model. — get_mtpi","text":"object type selector_factory can fit TPI model outcomes.","code":""},{"path":"/reference/get_mtpi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get an object to fit the mTPI dose-finding model. — get_mtpi","text":"design seeks dose probability toxicity \\(p_{}\\) close target probability \\(p_{T}\\) iteratively calculating interval $$p_{T} - \\epsilon_{1} < p_{} < p_{T} + \\epsilon_{2}$$ model, \\(\\epsilon_{1}\\) \\(\\epsilon_{2}\\) specified constants. \\(p_{}\\) estimated Bayesian beta-binomial conjugate model $$p_{} | data \\sim Beta(\\alpha + x_{1}, \\beta + n_{} - x_{}),$$ \\(x_{}\\) number toxicities observed \\(n_{}\\) number patients treated dose \\(\\), \\(\\alpha\\) \\(\\beta\\) hyperparameters beta prior \\(p_{}\\). dose excluded inadmissible $$P(p_{} > p_{T} | data) > \\xi$$ trial commences starting dose, possibly dose 1. dose \\(\\) just evaluated patient(s), dose selection decisions proceed calculating unit probability mass true toxicity rate dose \\(\\) using partition probability space \\(p_{} < p_{T} - \\epsilon_{1}\\), \\(p_{T} - \\epsilon_{1} < p_{} < p_{T} + \\epsilon_{2}\\), \\(p_{} > p_{T} + \\epsilon_{2}\\). unit probability mass (UPM) interval posterior probability true toxicity rate belongs interval divided width interval. interval maximal UPM determines recommendation next patient(s), intervals corresponding decisions tp escalate, stay, de-escalate dose, respectively. rules prevent escalation inadmissible dose. paper, authors demonstrate acceptable operating performance using \\(\\alpha = \\beta = 1\\), \\(K_{1} = 1\\), \\(K_{2} = 1.5\\) \\(\\xi = 0.95\\). See publications full details.","code":""},{"path":"/reference/get_mtpi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the mTPI dose-finding model. — get_mtpi","text":"Ji, Y., Liu, P., Li, Y., & Bekele, B. N. (2010).  modified toxicity probability interval method dose-finding trials.  Clinical Trials, 7(6), 653-663. https://doi.org/10.1177/1740774510382799 Ji, Y., & Yang, S. (2017). Interval-Based Dose-Finding Designs, 1-26. Retrieved https://arxiv.org/abs/1706.03277","code":""},{"path":"/reference/get_mtpi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the mTPI dose-finding model. — get_mtpi","text":"","code":"target <- 0.25 model1 <- get_mtpi(num_doses = 5, target = target, epsilon1 = 0.05,   epsilon2 = 0.05, exclusion_certainty = 0.95)  outcomes <- '1NNN 2NTN' model1 %>% fit(outcomes) %>% recommended_dose() #> [1] 2"},{"path":"/reference/get_mtpi2.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the mTPI-2 dose-finding model. — get_mtpi2","title":"Get an object to fit the mTPI-2 dose-finding model. — get_mtpi2","text":"modified toxicity probability interval 2 (mTPI-2) dose-escalation design Guo et al. name suggests, adaptation mTPI design.","code":""},{"path":"/reference/get_mtpi2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the mTPI-2 dose-finding model. — get_mtpi2","text":"","code":"get_mtpi2(   parent_selector_factory = NULL,   num_doses,   target,   epsilon1,   epsilon2,   exclusion_certainty,   alpha = 1,   beta = 1,   stop_when_deescalation_impossible = FALSE,   ... )"},{"path":"/reference/get_mtpi2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the mTPI-2 dose-finding model. — get_mtpi2","text":"parent_selector_factory Object type selector_factory. num_doses Number doses investigation. target seek dose probability toxicity. epsilon1 parameter determines lower bound equivalence interval. See Details. epsilon2 parameter determines upper bound equivalence interval. See Details. exclusion_certainty Numeric, threshold posterior certainty required exclude dose excessively toxic. authors discuss values range 0.7 - 0.95. Set value > 1 suppress dose exclusion mechanism. authors use Greek letter xi parameter. alpha First shape parameter beta prior distribution probability toxicity. beta Second shape parameter beta prior distribution probability toxicity. stop_when_deescalation_impossible TRUE stop trial recommend dose advice de-escalate de-escalation impossible already lowest dose. Note feature requested user. param FALSE default behaviour matches described publication. original authors advocate behaviour. ... Extra args passed onwards.","code":""},{"path":"/reference/get_mtpi2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the mTPI-2 dose-finding model. — get_mtpi2","text":"object type selector_factory can fit mTPI-2 model outcomes.","code":""},{"path":"/reference/get_mtpi2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get an object to fit the mTPI-2 dose-finding model. — get_mtpi2","text":"design seeks dose probability toxicity \\(p_{}\\) close target probability \\(p_{T}\\) iteratively calculating interval $$p_{T} - \\epsilon_{1} < p_{} < p_{T} + \\epsilon_{2}$$ model, \\(\\epsilon_{1}\\) \\(\\epsilon_{2}\\) specified constants. \\(p_{}\\) estimated Bayesian beta-binomial conjugate model $$p_{} | data \\sim Beta(\\alpha + x_{1}, \\beta + n_{} - x_{}),$$ \\(x_{}\\) number toxicities observed \\(n_{}\\) number patients treated dose \\(\\), \\(\\alpha\\) \\(\\beta\\) hyperparameters beta prior \\(p_{}\\). dose excluded inadmissible $$P(p_{} > p_{T} | data) > \\xi$$ trial commences starting dose, possibly dose 1. dose \\(\\) just evaluated patient(s), dose selection decisions proceed calculating unit probability mass true toxicity rate dose \\(\\) using partition probability space subintervals equal length given \\((\\epsilon_{1} + \\epsilon_{2})\\). \\(EI\\) equivalence interval \\(p_{T} - epsilon_{1}, p_{T} - epsilon_{2}\\), \\(LI\\) set intervals , \\(HI\\) set intervals . unit probability mass (UPM) interval posterior probability true toxicity rate belongs interval divided width interval. interval maximal UPM determines recommendation next patient(s), intervals corresponding decisions escalate, stay, de-escalate dose, respectively. rules prevent escalation inadmissible dose. original mTPI paper, authors demonstrate acceptable operating performance using \\(\\alpha = \\beta = 1\\), \\(K_{1} = 1\\), \\(K_{2} = 1.5\\)  \\(\\xi = 0.95\\). authors mTPI-2 approach show desirable performance compared original mTPI method, particular parameter choices. See publications full details.","code":""},{"path":"/reference/get_mtpi2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the mTPI-2 dose-finding model. — get_mtpi2","text":"Ji, Y., Liu, P., Li, Y., & Bekele, B. N. (2010).  modified toxicity probability interval method dose-finding trials.  Clinical Trials, 7(6), 653–663. https://doi.org/10.1177/1740774510382799 Ji, Y., & Yang, S. (2017). Interval-Based Dose-Finding Designs, 1–26. Retrieved https://arxiv.org/abs/1706.03277 Guo, W., Wang, SJ., Yang, S., Lynn, H., Ji, Y. (2017). Bayesian Interval Dose-Finding Design Addressing Ockham's Razor: mTPI-2. https://doi.org/10.1016/j.cct.2017.04.006","code":""},{"path":"/reference/get_mtpi2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the mTPI-2 dose-finding model. — get_mtpi2","text":"","code":"target <- 0.25 model1 <- get_mtpi2(num_doses = 5, target = target, epsilon1 = 0.05,   epsilon2 = 0.05, exclusion_certainty = 0.95)  outcomes <- '1NNN 2NTN' model1 %>% fit(outcomes) %>% recommended_dose() #> [1] 1"},{"path":"/reference/get_potential_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get potential outcomes from a list of PatientSamples — get_potential_outcomes","title":"Get potential outcomes from a list of PatientSamples — get_potential_outcomes","text":"instance PatientSample, one subclasses like CorrelatedPatientSample, reflects one particular state world, patient reliably experience toxicity efficacy event treated particular dose. function, given true toxicity efficacy probabilities doses 1, ..., num_doses, calculates 0/1 matrices reflect whether patients samples experienced toxicity efficacy doses, dosed . Using vernacular causal inference, _potential outcomes_. single instant, patient can dosed one dose, one outcomes patient reality observed; rest counterfactual.","code":""},{"path":"/reference/get_potential_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get potential outcomes from a list of PatientSamples — get_potential_outcomes","text":"","code":"get_potential_outcomes(patient_samples, true_prob_tox, true_prob_eff)"},{"path":"/reference/get_potential_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get potential outcomes from a list of PatientSamples — get_potential_outcomes","text":"patient_samples list PatientSample objects, subclass thereof. true_prob_tox vector probabilities toxicity outcomes doses true_prob_eff vector probabilities efficacy outcomes doses","code":""},{"path":"/reference/get_potential_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get potential outcomes from a list of PatientSamples — get_potential_outcomes","text":"list lists, names tox eff, mapping matrix potential outcomes.","code":""},{"path":"/reference/get_potential_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get potential outcomes from a list of PatientSamples — get_potential_outcomes","text":"","code":"num_sims <- 10 ps <- lapply(1:num_sims, function(x) PatientSample$new()) # Set tox_u and eff_u for each simulation set.seed(2024) lapply(1:num_sims, function(x) {   tox_u_new <- runif(n = 20)   eff_u_new <- runif(n = 20)   ps[[x]]$set_eff_and_tox(tox_u = tox_u_new, eff_u = eff_u_new) }) #> [[1]] #> [1] FALSE #>  #> [[2]] #> [1] FALSE #>  #> [[3]] #> [1] FALSE #>  #> [[4]] #> [1] FALSE #>  #> [[5]] #> [1] FALSE #>  #> [[6]] #> [1] FALSE #>  #> [[7]] #> [1] FALSE #>  #> [[8]] #> [1] FALSE #>  #> [[9]] #> [1] FALSE #>  #> [[10]] #> [1] FALSE #>  true_prob_tox <- c(0.05, 0.10, 0.15, 0.18, 0.45) true_prob_eff <- c(0.40, 0.50, 0.52, 0.53, 0.53) get_potential_outcomes(   patient_samples = ps,   true_prob_tox = true_prob_tox,   true_prob_eff = true_prob_eff ) #> [[1]] #> [[1]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    0    0    0    0    1 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    0    0    0 #>  [5,]    0    0    0    0    0 #>  [6,]    0    0    0    0    0 #>  [7,]    0    0    0    0    1 #>  [8,]    0    0    0    0    1 #>  [9,]    0    0    0    0    0 #> [10,]    0    0    1    1    1 #> [11,]    0    0    0    0    0 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    0 #> [14,]    0    0    0    0    0 #> [15,]    0    0    0    0    1 #> [16,]    0    0    0    0    0 #> [17,]    0    0    1    1    1 #> [18,]    0    0    0    0    0 #> [19,]    0    0    1    1    1 #> [20,]    0    0    0    0    1 #>  #> [[1]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    1    1    1    1    1 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    0    0    0 #>  [5,]    0    0    0    0    0 #>  [6,]    1    1    1    1    1 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    0 #>  [9,]    1    1    1    1    1 #> [10,]    1    1    1    1    1 #> [11,]    0    1    1    1    1 #> [12,]    1    1    1    1    1 #> [13,]    1    1    1    1    1 #> [14,]    0    0    0    0    0 #> [15,]    0    0    0    0    0 #> [16,]    0    0    0    0    0 #> [17,]    1    1    1    1    1 #> [18,]    0    0    0    0    0 #> [19,]    1    1    1    1    1 #> [20,]    0    0    0    0    0 #>  #>  #> [[2]] #> [[2]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    0    0    0    0    0 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    0    0    1 #>  [5,]    0    0    0    0    0 #>  [6,]    0    0    0    0    1 #>  [7,]    0    0    0    0    1 #>  [8,]    0    0    0    0    1 #>  [9,]    0    0    0    0    0 #> [10,]    0    0    0    0    0 #> [11,]    0    1    1    1    1 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    0 #> [14,]    0    0    0    0    0 #> [15,]    0    0    0    0    0 #> [16,]    0    0    0    0    0 #> [17,]    1    1    1    1    1 #> [18,]    0    0    0    0    1 #> [19,]    0    0    0    0    0 #> [20,]    0    0    0    0    1 #>  #> [[2]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    0    1    1    1    1 #>  [3,]    1    1    1    1    1 #>  [4,]    0    0    0    0    0 #>  [5,]    1    1    1    1    1 #>  [6,]    0    0    0    0    0 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    0 #>  [9,]    1    1    1    1    1 #> [10,]    1    1    1    1    1 #> [11,]    0    0    0    0    0 #> [12,]    1    1    1    1    1 #> [13,]    0    0    0    0    0 #> [14,]    0    1    1    1    1 #> [15,]    1    1    1    1    1 #> [16,]    0    0    0    0    0 #> [17,]    1    1    1    1    1 #> [18,]    1    1    1    1    1 #> [19,]    0    0    0    0    0 #> [20,]    1    1    1    1    1 #>  #>  #> [[3]] #> [[3]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    1 #>  [2,]    0    0    0    0    1 #>  [3,]    0    0    0    0    0 #>  [4,]    1    1    1    1    1 #>  [5,]    0    0    0    0    0 #>  [6,]    0    0    0    0    0 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    1 #>  [9,]    0    0    1    1    1 #> [10,]    0    0    0    0    0 #> [11,]    0    0    0    0    0 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    0 #> [14,]    1    1    1    1    1 #> [15,]    0    0    0    0    0 #> [16,]    0    0    0    0    1 #> [17,]    0    0    0    0    0 #> [18,]    0    0    0    0    0 #> [19,]    0    0    0    0    0 #> [20,]    0    0    0    0    0 #>  #> [[3]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    0    0    0    0    0 #>  [3,]    1    1    1    1    1 #>  [4,]    0    0    0    0    0 #>  [5,]    1    1    1    1    1 #>  [6,]    0    0    0    0    0 #>  [7,]    1    1    1    1    1 #>  [8,]    1    1    1    1    1 #>  [9,]    1    1    1    1    1 #> [10,]    0    0    0    0    0 #> [11,]    1    1    1    1    1 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    0 #> [14,]    1    1    1    1    1 #> [15,]    0    1    1    1    1 #> [16,]    0    0    0    0    0 #> [17,]    0    0    0    0    0 #> [18,]    1    1    1    1    1 #> [19,]    0    1    1    1    1 #> [20,]    1    1    1    1    1 #>  #>  #> [[4]] #> [[4]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    0    1    1    1    1 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    1    1    1 #>  [5,]    0    0    0    0    0 #>  [6,]    1    1    1    1    1 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    0 #>  [9,]    0    0    0    0    0 #> [10,]    0    0    0    0    0 #> [11,]    0    0    0    0    1 #> [12,]    1    1    1    1    1 #> [13,]    1    1    1    1    1 #> [14,]    0    0    0    0    1 #> [15,]    0    0    0    0    0 #> [16,]    0    0    0    0    0 #> [17,]    0    0    0    0    0 #> [18,]    0    1    1    1    1 #> [19,]    1    1    1    1    1 #> [20,]    0    0    0    0    0 #>  #> [[4]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    1    1    1    1    1 #>  [3,]    1    1    1    1    1 #>  [4,]    0    1    1    1    1 #>  [5,]    0    0    0    0    0 #>  [6,]    0    0    0    0    0 #>  [7,]    0    0    0    1    1 #>  [8,]    1    1    1    1    1 #>  [9,]    0    0    0    0    0 #> [10,]    1    1    1    1    1 #> [11,]    1    1    1    1    1 #> [12,]    0    1    1    1    1 #> [13,]    0    0    0    0    0 #> [14,]    1    1    1    1    1 #> [15,]    0    0    0    0    0 #> [16,]    0    1    1    1    1 #> [17,]    1    1    1    1    1 #> [18,]    1    1    1    1    1 #> [19,]    0    0    1    1    1 #> [20,]    1    1    1    1    1 #>  #>  #> [[5]] #> [[5]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    1    1    1 #>  [2,]    0    0    0    0    0 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    0    1    1 #>  [5,]    0    0    0    0    0 #>  [6,]    0    0    0    0    0 #>  [7,]    1    1    1    1    1 #>  [8,]    0    0    0    0    0 #>  [9,]    0    0    0    0    0 #> [10,]    0    0    0    0    1 #> [11,]    0    0    0    0    0 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    1 #> [14,]    0    0    0    0    0 #> [15,]    0    0    0    0    1 #> [16,]    0    0    0    0    0 #> [17,]    0    0    0    0    1 #> [18,]    1    1    1    1    1 #> [19,]    0    0    0    0    0 #> [20,]    0    0    0    0    0 #>  #> [[5]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    0    0    0    0    0 #>  [3,]    1    1    1    1    1 #>  [4,]    0    0    0    0    0 #>  [5,]    1    1    1    1    1 #>  [6,]    0    0    0    0    0 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    0 #>  [9,]    0    0    0    0    0 #> [10,]    1    1    1    1    1 #> [11,]    1    1    1    1    1 #> [12,]    1    1    1    1    1 #> [13,]    1    1    1    1    1 #> [14,]    1    1    1    1    1 #> [15,]    1    1    1    1    1 #> [16,]    1    1    1    1    1 #> [17,]    0    1    1    1    1 #> [18,]    0    1    1    1    1 #> [19,]    0    0    0    0    0 #> [20,]    0    0    0    0    0 #>  #>  #> [[6]] #> [[6]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    1    1    1    1    1 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    1    1    1 #>  [5,]    0    0    0    0    0 #>  [6,]    1    1    1    1    1 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    1 #>  [9,]    0    0    1    1    1 #> [10,]    0    0    0    0    0 #> [11,]    0    0    0    0    0 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    1 #> [14,]    0    0    0    0    0 #> [15,]    0    0    0    0    0 #> [16,]    0    0    0    0    0 #> [17,]    0    0    0    0    1 #> [18,]    0    0    0    0    0 #> [19,]    0    0    1    1    1 #> [20,]    0    0    1    1    1 #>  #> [[6]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    0    0    0    0    0 #>  [3,]    0    0    0    0    0 #>  [4,]    0    1    1    1    1 #>  [5,]    1    1    1    1    1 #>  [6,]    0    0    0    0    0 #>  [7,]    0    1    1    1    1 #>  [8,]    0    0    0    0    0 #>  [9,]    1    1    1    1    1 #> [10,]    0    1    1    1    1 #> [11,]    1    1    1    1    1 #> [12,]    1    1    1    1    1 #> [13,]    0    0    0    0    0 #> [14,]    1    1    1    1    1 #> [15,]    0    0    0    0    0 #> [16,]    0    0    0    0    0 #> [17,]    1    1    1    1    1 #> [18,]    1    1    1    1    1 #> [19,]    0    0    0    0    0 #> [20,]    0    0    0    0    0 #>  #>  #> [[7]] #> [[7]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    1 #>  [2,]    1    1    1    1    1 #>  [3,]    0    0    0    0    1 #>  [4,]    0    0    0    0    1 #>  [5,]    0    1    1    1    1 #>  [6,]    0    0    1    1    1 #>  [7,]    0    0    0    0    1 #>  [8,]    0    0    0    0    0 #>  [9,]    0    0    0    0    1 #> [10,]    0    0    0    0    0 #> [11,]    0    0    0    0    0 #> [12,]    0    0    1    1    1 #> [13,]    0    0    1    1    1 #> [14,]    0    0    0    0    0 #> [15,]    0    0    1    1    1 #> [16,]    0    0    0    0    1 #> [17,]    0    0    0    0    1 #> [18,]    0    0    0    0    1 #> [19,]    0    0    0    0    0 #> [20,]    1    1    1    1    1 #>  #> [[7]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    1    1    1    1    1 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    0    0    0 #>  [5,]    1    1    1    1    1 #>  [6,]    0    0    0    0    0 #>  [7,]    0    0    1    1    1 #>  [8,]    1    1    1    1    1 #>  [9,]    0    0    0    0    0 #> [10,]    0    0    0    0    0 #> [11,]    1    1    1    1    1 #> [12,]    1    1    1    1    1 #> [13,]    1    1    1    1    1 #> [14,]    1    1    1    1    1 #> [15,]    0    0    0    0    0 #> [16,]    0    1    1    1    1 #> [17,]    0    0    0    0    0 #> [18,]    1    1    1    1    1 #> [19,]    1    1    1    1    1 #> [20,]    0    0    0    0    0 #>  #>  #> [[8]] #> [[8]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    0    0    0    0    0 #>  [3,]    0    0    1    1    1 #>  [4,]    0    0    0    0    0 #>  [5,]    0    0    0    0    1 #>  [6,]    0    0    0    0    1 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    0 #>  [9,]    0    0    0    0    0 #> [10,]    1    1    1    1    1 #> [11,]    0    0    0    0    0 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    0 #> [14,]    0    0    0    0    0 #> [15,]    0    0    0    0    0 #> [16,]    0    0    0    0    1 #> [17,]    0    0    0    0    0 #> [18,]    0    0    0    0    0 #> [19,]    0    0    0    0    0 #> [20,]    0    0    0    0    1 #>  #> [[8]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    0    0    0    0    0 #>  [3,]    0    1    1    1    1 #>  [4,]    0    0    0    0    0 #>  [5,]    0    0    0    0    0 #>  [6,]    1    1    1    1    1 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    0 #>  [9,]    1    1    1    1    1 #> [10,]    0    0    0    0    0 #> [11,]    1    1    1    1    1 #> [12,]    1    1    1    1    1 #> [13,]    0    0    0    0    0 #> [14,]    1    1    1    1    1 #> [15,]    1    1    1    1    1 #> [16,]    1    1    1    1    1 #> [17,]    1    1    1    1    1 #> [18,]    0    0    0    0    0 #> [19,]    0    0    0    0    0 #> [20,]    1    1    1    1    1 #>  #>  #> [[9]] #> [[9]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    0    0    0    0    0 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    0    0    0 #>  [5,]    0    0    0    0    0 #>  [6,]    0    0    0    0    1 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    0 #>  [9,]    0    0    0    0    1 #> [10,]    0    0    0    0    1 #> [11,]    0    0    0    0    1 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    0 #> [14,]    0    0    0    0    0 #> [15,]    1    1    1    1    1 #> [16,]    0    0    0    0    0 #> [17,]    0    0    0    0    0 #> [18,]    0    0    0    0    0 #> [19,]    0    0    0    0    0 #> [20,]    0    0    0    0    0 #>  #> [[9]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    0    0    0    0    0 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    0    0    0 #>  [5,]    1    1    1    1    1 #>  [6,]    1    1    1    1    1 #>  [7,]    0    0    0    0    0 #>  [8,]    1    1    1    1    1 #>  [9,]    0    0    0    0    0 #> [10,]    0    0    0    0    0 #> [11,]    0    0    0    0    0 #> [12,]    0    0    0    1    1 #> [13,]    0    0    0    0    0 #> [14,]    0    0    0    0    0 #> [15,]    0    0    0    0    0 #> [16,]    1    1    1    1    1 #> [17,]    0    0    0    0    0 #> [18,]    0    0    0    0    0 #> [19,]    1    1    1    1    1 #> [20,]    0    0    0    0    0 #>  #>  #> [[10]] #> [[10]]$tox #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    0    0    0    0    0 #>  [2,]    0    1    1    1    1 #>  [3,]    0    0    0    0    0 #>  [4,]    0    0    0    0    0 #>  [5,]    0    0    0    0    0 #>  [6,]    0    0    0    0    0 #>  [7,]    0    0    0    0    1 #>  [8,]    0    0    0    0    0 #>  [9,]    0    0    0    0    1 #> [10,]    0    0    0    0    0 #> [11,]    0    0    0    0    0 #> [12,]    0    0    0    0    0 #> [13,]    0    0    0    0    0 #> [14,]    1    1    1    1    1 #> [15,]    0    0    0    0    1 #> [16,]    0    0    0    0    0 #> [17,]    0    0    0    0    1 #> [18,]    0    1    1    1    1 #> [19,]    0    0    0    0    0 #> [20,]    0    0    1    1    1 #>  #> [[10]]$eff #>       [,1] [,2] [,3] [,4] [,5] #>  [1,]    1    1    1    1    1 #>  [2,]    1    1    1    1    1 #>  [3,]    1    1    1    1    1 #>  [4,]    0    0    0    0    0 #>  [5,]    0    0    0    0    0 #>  [6,]    0    1    1    1    1 #>  [7,]    0    0    0    0    0 #>  [8,]    0    0    0    0    0 #>  [9,]    0    0    0    0    0 #> [10,]    1    1    1    1    1 #> [11,]    0    0    0    0    0 #> [12,]    1    1    1    1    1 #> [13,]    0    0    0    0    0 #> [14,]    1    1    1    1    1 #> [15,]    0    0    0    0    0 #> [16,]    0    0    0    0    0 #> [17,]    0    0    0    0    0 #> [18,]    0    0    0    0    0 #> [19,]    1    1    1    1    1 #> [20,]    0    0    0    0    0 #>  #>"},{"path":"/reference/get_random_selector.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit a dose-selector that randomly selects doses. — get_random_selector","title":"Get an object to fit a dose-selector that randomly selects doses. — get_random_selector","text":"Get object fit dose-selector randomly selects doses. Whilst design unlikely pass ethical hurdles investigating truly experimental treatments, class useful illustrating methods can useful benchmarking.","code":""},{"path":"/reference/get_random_selector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit a dose-selector that randomly selects doses. — get_random_selector","text":"","code":"get_random_selector(   parent_selector_factory = NULL,   prob_select,   supports_efficacy = FALSE,   ... )"},{"path":"/reference/get_random_selector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit a dose-selector that randomly selects doses. — get_random_selector","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just select random doses start. prob_select vector probabilities, probability selecting dose 1...n supports_efficacy TRUE monitor toxicity efficacy outcomes; FALSE (default) just monitor toxicity outcomes. ... Extra args ignored.","code":""},{"path":"/reference/get_random_selector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit a dose-selector that randomly selects doses. — get_random_selector","text":"object type selector_factory.","code":""},{"path":"/reference/get_random_selector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit a dose-selector that randomly selects doses. — get_random_selector","text":"","code":"prob_select = c(0.1, 0.3, 0.5, 0.07, 0.03) model <- get_random_selector(prob_select = prob_select) fit <- model %>% fit('1NTN') fit %>% recommended_dose() # This is random #> [1] 2 # We could also precede this selector with a set path: model <- follow_path('1NN 2NN 3NN') %>%   get_random_selector(prob_select = prob_select) fit <- model %>% fit('1NN') fit %>% recommended_dose() # This is not-random; it comes from the path. #> [1] 2 fit <- model %>% fit('1NN 2NT') fit %>% recommended_dose() # This is random; the path is discarded. #> [1] 5"},{"path":"/reference/get_three_plus_three.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the 3+3 model. — get_three_plus_three","title":"Get an object to fit the 3+3 model. — get_three_plus_three","text":"Get object fit 3+3 model.","code":""},{"path":"/reference/get_three_plus_three.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the 3+3 model. — get_three_plus_three","text":"","code":"get_three_plus_three(num_doses, allow_deescalate = FALSE, ...)"},{"path":"/reference/get_three_plus_three.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the 3+3 model. — get_three_plus_three","text":"num_doses Number doses investigation. allow_deescalate TRUE allow de-escalation, described Korn et al. Default FALSE. ... Extra args currently used.","code":""},{"path":"/reference/get_three_plus_three.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the 3+3 model. — get_three_plus_three","text":"object type selector_factory can fit 3+3 model outcomes.","code":""},{"path":"/reference/get_three_plus_three.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the 3+3 model. — get_three_plus_three","text":"Storer . Design Analysis Phase Clinical Trials. Biometrics. 1989;45(3):925-937. doi:10.2307/2531693 Korn EL, Midthune D, Chen TT, Rubinstein LV, Christian MC, Simon RM. comparison two phase trial designs. Statistics Medicine. 1994;13(18):1799-1806. doi:10.1002/sim.4780131802","code":""},{"path":"/reference/get_three_plus_three.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the 3+3 model. — get_three_plus_three","text":"","code":"model <- get_three_plus_three(num_doses = 5)  fit1 <- model %>% fit('1NNN 2NTN') fit1 %>% recommended_dose() #> [1] 2 fit1 %>% continue() #> [1] TRUE  fit2 <- model %>% fit('1NNN 2NTN 2NNT') fit2 %>% recommended_dose() #> [1] 1 fit2 %>% continue() #> [1] FALSE"},{"path":"/reference/get_tpi.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the TPI dose-finding model. — get_tpi","title":"Get an object to fit the TPI dose-finding model. — get_tpi","text":"toxicity probability interval (TPI)dose-escalation design Ji et al.","code":""},{"path":"/reference/get_tpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the TPI dose-finding model. — get_tpi","text":"","code":"get_tpi(   num_doses,   target,   k1,   k2,   exclusion_certainty,   alpha = 0.005,   beta = 0.005,   stop_when_deescalation_impossible = FALSE,   ... )"},{"path":"/reference/get_tpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the TPI dose-finding model. — get_tpi","text":"num_doses Number doses investigation. target seek dose probability toxicity. k1 K1 parameter TPI determines upper bound equivalence interval. See Details. k2 K2 parameter TPI determines lower bound equivalence interval. See Details. exclusion_certainty Numeric, threshold posterior certainty required exclude dose excessively toxic. authors discuss values range 0.7 - 0.95. Set value > 1 suppress dose exclusion mechanism. authors use Greek letter xi parameter. alpha First shape parameter beta prior distribution probability toxicity. beta Second shape parameter beta prior distribution probability toxicity. stop_when_deescalation_impossible TRUE stop trial recommend dose advice de-escalate de-escalation impossible already lowest dose. Note feature requested user. param FALSE default behaviour matches described publication. original authors advocate behaviour. ... Extra args passed onwards.","code":""},{"path":"/reference/get_tpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the TPI dose-finding model. — get_tpi","text":"object type selector_factory can fit TPI model outcomes.","code":""},{"path":"/reference/get_tpi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get an object to fit the TPI dose-finding model. — get_tpi","text":"design seeks dose probability toxicity \\(p_{}\\) close target probability \\(p_{T}\\) iteratively calculating interval $$p_{T} - K_{2} \\sigma_{} < p_{} < p_{T} + K_{1} \\sigma_{}$$ model, \\(K_{1}\\) \\(K_{2}\\) specified constants \\(\\sigma_{}\\) standard deviation \\(p_{}\\) arising Bayesian beta-binomial conjugate model $$p_{} | data \\sim Beta(\\alpha + x_{}, \\beta + n_{} - x_{}),$$ \\(x_{}\\) number toxicities observed \\(n_{}\\) number patients treated dose \\(\\), \\(\\alpha\\) \\(\\beta\\) hyperparameters beta prior \\(p_{}\\). dose excluded inadmissible $$P(p_{} > p_{T} | data) > \\xi$$ trial commences starting dose, possibly dose 1. dose \\(\\) just evaluated patient(s), dose selection decisions proceed calculating posterior probability true toxicity rate dose \\(\\) belongs three partition regions \\(p_{} < p_{T} - K_{2} \\sigma_{}\\), \\(p_{T} - K_{2} \\sigma_{} < p_{} < p_{T} + K_{1} \\sigma_{}\\), \\(p_{} > p_{T} + K_{2} \\sigma_{}\\), corresponding decisions escalate, stay, de-escalate dose, respectively. rules prevent escalation inadmissible dose. paper, authors demonstrate acceptable operating performance using \\(\\alpha = \\beta = 0.005\\), \\(K_{1} = 1\\), \\(K_{2} = 1.5\\) \\(\\xi = 0.95\\). See publications full details.","code":""},{"path":"/reference/get_tpi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the TPI dose-finding model. — get_tpi","text":"Ji, Y., Li, Y., & Bekele, B. N. (2007). Dose-finding phase clinical trials based toxicity probability intervals. Clinical Trials, 4(3), 235–244. https://doi.org/10.1177/1740774507079442 Ji, Y., & Yang, S. (2017). Interval-Based Dose-Finding Designs, 1–26. Retrieved https://arxiv.org/abs/1706.03277","code":""},{"path":"/reference/get_tpi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the TPI dose-finding model. — get_tpi","text":"","code":"target <- 0.25 model1 <- get_tpi(num_doses = 5, target = target, k1 = 1, k2 = 1.5,   exclusion_certainty = 0.95)  outcomes <- '1NNN 2NTN' model1 %>% fit(outcomes) %>% recommended_dose() #> [1] 2"},{"path":"/reference/get_trialr_crm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the CRM model using the trialr package. — get_trialr_crm","title":"Get an object to fit the CRM model using the trialr package. — get_trialr_crm","text":"function returns object can used fit CRM model using methods provided trialr package. Dose selectors designed daisy-chained together achieve different behaviours. class **resumptive** selector, meaning carries previous dose selector, present, elected continue. example, allows instances class preceded selector follows fixed path initial escalation plan, provided follow_path. example, observed trial outcomes deviate initial plan, selector following fixed path elects continue responsibility passes class. See Examples. time--event variant, TITE-CRM, used specify tite = TRUE. weights observations allow dose-selections based partially observed outcomes.","code":""},{"path":"/reference/get_trialr_crm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the CRM model using the trialr package. — get_trialr_crm","text":"","code":"get_trialr_crm(   parent_selector_factory = NULL,   skeleton,   target,   model,   tite = FALSE,   ... )"},{"path":"/reference/get_trialr_crm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the CRM model using the trialr package. — get_trialr_crm","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just use CRM start. skeleton Dose-toxicity skeleton, non-decreasing vector probabilities. target seek dose probability toxicity. model character string identifying model form use. Options include empiric, logistic, logistic2. model form chosen determines prior hyperparameters required. See stan_crm details. tite FALSE use regular CRM; TRUE use TITE-CRM. See Description. ... Extra args passed stan_crm.","code":""},{"path":"/reference/get_trialr_crm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the CRM model using the trialr package. — get_trialr_crm","text":"object type selector_factory can fit CRM model outcomes.","code":""},{"path":"/reference/get_trialr_crm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the CRM model using the trialr package. — get_trialr_crm","text":"Kristian Brock (2020). trialr: Clinical Trial Designs 'rstan'. R package version 0.1.5. https://github.com/brockk/trialr Kristian Brock (2019). trialr: Bayesian Clinical Trial Designs R Stan. arXiv preprint arXiv:1907.00161.","code":""},{"path":"/reference/get_trialr_crm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the CRM model using the trialr package. — get_trialr_crm","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 # The model to use must be specified in trialr: model1 <- get_trialr_crm(skeleton = skeleton, target = target,                          model = 'empiric', beta_sd = 1.34) # Refer to the trialr documentation for more details on model forms. outcomes <- '1NNN 2NTN' model1 %>% fit(outcomes) %>% recommended_dose() #> [1] 2  # But we can provide extra args to trialr that are than passed onwards to # the call to trialr::stan_crm to override the defaults. # For example, if we want the one-parameter logistic model, we run: model2 <- get_trialr_crm(skeleton = skeleton, target = target,                          model = 'logistic', a0 = 3,                          beta_mean = 0, beta_sd = 1) model2 %>% fit(outcomes) %>% recommended_dose() #> [1] 2 # And, if we want the two-parameter logistic model, we run: model3 <- get_trialr_crm(skeleton = skeleton, target = target,                          model = 'logistic2',                          alpha_mean = 0, alpha_sd = 2,                          beta_mean = 0, beta_sd = 1) model3 %>% fit(outcomes) %>% recommended_dose() #> [1] 2  # We can use an initial dose-escalation plan, a pre-specified path that # should be followed until trial outcomes deviate, at which point the CRM # model takes over. For instance, if we want to use two patients at each of # the first three doses in the absence of toxicity, irrespective the model's # advice, we would run: model1 <- follow_path('1NN 2NN 3NN') %>%   get_trialr_crm(skeleton = skeleton, target = target, model = 'empiric',                  beta_sd = 1.34)  # If outcomes match the desired path, the path is followed further: model1 %>% fit('1NN 2N') %>% recommended_dose() #> [1] 2  # But when the outcomes diverge: model1 %>% fit('1NN 2T') %>% recommended_dose() #> [1] 1  # Or the pre-specified path comes to an end: model1 %>% fit('1NN 2NN 3NN') %>% recommended_dose() #> [1] 5 # ...the CRM model takes over."},{"path":"/reference/get_trialr_crm_tite.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the TITE-CRM model using the trialr package. — get_trialr_crm_tite","title":"Get an object to fit the TITE-CRM model using the trialr package. — get_trialr_crm_tite","text":"Get object fit TITE-CRM model using trialr package.","code":""},{"path":"/reference/get_trialr_crm_tite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the TITE-CRM model using the trialr package. — get_trialr_crm_tite","text":"","code":"get_trialr_crm_tite(   parent_selector_factory = NULL,   skeleton,   target,   model,   ... )"},{"path":"/reference/get_trialr_crm_tite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the TITE-CRM model using the trialr package. — get_trialr_crm_tite","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just use CRM start. skeleton Dose-toxicity skeleton, non-decreasing vector probabilities. target seek dose probability toxicity. model character string identifying model form use. Options include empiric, logistic, logistic2. model form chosen determines prior hyperparameters required. See stan_crm details. ... Extra args passed stan_crm.","code":""},{"path":"/reference/get_trialr_crm_tite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the TITE-CRM model using the trialr package. — get_trialr_crm_tite","text":"object type selector_factory can fit CRM model outcomes.","code":""},{"path":"/reference/get_trialr_crm_tite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get an object to fit the TITE-CRM model using the trialr package. — get_trialr_crm_tite","text":"function short-cut get_trialr_crm(tite = TRUE). See get_trialr_crm full details.","code":""},{"path":"/reference/get_trialr_crm_tite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the TITE-CRM model using the trialr package. — get_trialr_crm_tite","text":"","code":"# TODO"},{"path":"/reference/get_trialr_efftox.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the EffTox model using the trialr package. — get_trialr_efftox","title":"Get an object to fit the EffTox model using the trialr package. — get_trialr_efftox","text":"function returns object can used fit EffTox model phase /II dose-finding using methods provided trialr package.","code":""},{"path":"/reference/get_trialr_efftox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the EffTox model using the trialr package. — get_trialr_efftox","text":"","code":"get_trialr_efftox(   parent_selector_factory = NULL,   real_doses,   efficacy_hurdle,   toxicity_hurdle,   p_e,   p_t,   eff0,   tox1,   eff_star,   tox_star,   priors,   ... )"},{"path":"/reference/get_trialr_efftox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the EffTox model using the trialr package. — get_trialr_efftox","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just use EffTox start. real_doses vector numbers, doses investigation. ordered lowest highest consistent units. E.g. conduct dose-finding trial doses 10mg, 20mg 50mg, use c(10, 20, 50). efficacy_hurdle Minimum acceptable efficacy probability. number 0 1. toxicity_hurdle Maximum acceptable toxicity probability. number 0 1. p_e Certainty required infer dose acceptable regards probably efficacious; number 0 1. p_t Certainty required infer dose acceptable regards probably tolerable; number 0 1. eff0 Efficacy probability required toxicity impossible; number 0 1 (see Details). tox1 Toxicity probability permitted efficacy guaranteed; number 0 1 (see Details). eff_star Efficacy probability equi-utility third point (see Details). tox_star Toxicity probability equi-utility third point (see Details). priors instance class efftox_priors, hyperparameters normal priors six model parameters. ... Extra args passed stan_efftox.","code":""},{"path":"/reference/get_trialr_efftox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the EffTox model using the trialr package. — get_trialr_efftox","text":"object type selector_factory can fit EffTox model outcomes.","code":""},{"path":"/reference/get_trialr_efftox.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the EffTox model using the trialr package. — get_trialr_efftox","text":"Thall, P., & Cook, J. (2004). Dose-Finding Based Efficacy-Toxicity Trade-Offs. Biometrics, 60(3), 684-693. https://doi.org/10.1111/j.0006-341X.2004.00218.x Thall, P., Herrick, R., Nguyen, H., Venier, J., & Norris, J. (2014). Effective sample size computing prior hyperparameters Bayesian phase -II dose-finding. Clinical Trials, 11(6), 657-666. https://doi.org/10.1177/1740774514547397 Brock, K. (2020). trialr: Clinical Trial Designs 'rstan'. R package version 0.1.5. https://github.com/brockk/trialr Brock, K. (2019). trialr: Bayesian Clinical Trial Designs R Stan. arXiv preprint arXiv:1907.00161.","code":""},{"path":"/reference/get_trialr_efftox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the EffTox model using the trialr package. — get_trialr_efftox","text":"","code":"efftox_priors <- trialr::efftox_priors p <- efftox_priors(alpha_mean = -7.9593, alpha_sd = 3.5487,                    beta_mean = 1.5482, beta_sd = 3.5018,                    gamma_mean = 0.7367, gamma_sd = 2.5423,                    zeta_mean = 3.4181, zeta_sd = 2.4406,                    eta_mean = 0, eta_sd = 0.2,                    psi_mean = 0, psi_sd = 1) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) model <- get_trialr_efftox(real_doses = real_doses,                            efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,                            p_e = 0.1, p_t = 0.1,                            eff0 = 0.5, tox1 = 0.65,                            eff_star = 0.7, tox_star = 0.25,                            priors = p, iter = 1000, chains = 1, seed = 2020)"},{"path":"/reference/get_trialr_nbg.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit the NBG dose-finding model using the trialr package. — get_trialr_nbg","title":"Get an object to fit the NBG dose-finding model using the trialr package. — get_trialr_nbg","text":"function returns object can used fit Neuenschwander, Branson Gsponer (NBG) model dose-finding using methods provided trialr package.","code":""},{"path":"/reference/get_trialr_nbg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit the NBG dose-finding model using the trialr package. — get_trialr_nbg","text":"","code":"get_trialr_nbg(   parent_selector_factory = NULL,   real_doses,   d_star,   target,   alpha_mean,   alpha_sd,   beta_mean,   beta_sd,   tite = FALSE,   ... )"},{"path":"/reference/get_trialr_nbg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit the NBG dose-finding model using the trialr package. — get_trialr_nbg","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just use model start. real_doses Doses investigation, non-decreasing vector numbers. d_star Numeric, reference dose calculating covariate log(dose / d_star) fitting model. Sometimes (always) taken max dose real_doses. target seek dose probability toxicity. alpha_mean Prior mean intercept variable normal prior. See Details. Also see documentation trialr package details. alpha_sd Prior standard deviation intercept variable normal prior. See Details. Also see documentation trialr package details. beta_mean Prior mean gradient variable normal prior. See Details. Also see documentation trialr package details. beta_sd Prior standard deviation slope variable normal prior. See Details. Also see documentation trialr package details. tite FALSE use regular model; TRUE use TITE version See Description. ... Extra args passed stan_nbg.","code":""},{"path":"/reference/get_trialr_nbg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit the NBG dose-finding model using the trialr package. — get_trialr_nbg","text":"object type selector_factory can fit NBG model outcomes.","code":""},{"path":"/reference/get_trialr_nbg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get an object to fit the NBG dose-finding model using the trialr package. — get_trialr_nbg","text":"model form implemented trialr : \\(F(x_{}, \\alpha, \\beta) = 1 / (1 + \\exp{-(\\alpha + \\exp{(\\beta)} log(x_i / d_*))}) \\) normal priors alpha beta. Dose selectors designed daisy-chained together achieve different behaviours. class **resumptive** selector, meaning carries previous dose selector, present, elected continue. example, allows instances class preceded selector follows fixed path initial escalation plan, provided follow_path. example, observed trial outcomes deviate initial plan, selector following fixed path elects continue responsibility passes class. See examples get_dfcrm. time--event variant, like TITE-CRM, used specify tite = TRUE. weights observations allow dose-selections based partially observed outcomes.","code":""},{"path":"/reference/get_trialr_nbg.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit the NBG dose-finding model using the trialr package. — get_trialr_nbg","text":"Neuenschwander, B., Branson, M., & Gsponer, T. (2008). Critical aspects Bayesian approach phase cancer trials. Statistics Medicine, 27, 2420–2439. https://doi.org/10.1002/sim.3230 Brock, K. (2020). trialr: Clinical Trial Designs 'rstan'. R package version 0.1.5. https://github.com/brockk/trialr Brock, K. (2019). trialr: Bayesian Clinical Trial Designs R Stan. arXiv preprint arXiv:1907.00161.","code":""},{"path":"/reference/get_trialr_nbg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit the NBG dose-finding model using the trialr package. — get_trialr_nbg","text":"","code":"real_doses <- c(5, 10, 25, 40, 60) d_star <- 60 target <- 0.25  model <- get_trialr_nbg(real_doses = real_doses, d_star = d_star,                         target = target,                         alpha_mean = 2, alpha_sd = 1,                         beta_mean = 0.5, beta_sd = 1) # Refer to the trialr documentation for more details on model & priors. outcomes <- '1NNN 2NTN' fit <- model %>% fit(outcomes) fit %>% recommended_dose() #> [1] 2 fit %>% mean_prob_tox() #> [1] 0.1284100 0.2567463 0.5695736 0.7301087 0.8268793"},{"path":"/reference/get_trialr_nbg_tite.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit a TITE version of the NBG dose-finding model using trialr — get_trialr_nbg_tite","title":"Get an object to fit a TITE version of the NBG dose-finding model using trialr — get_trialr_nbg_tite","text":"Get object fit TITE version NBG dose-finding model using trialr","code":""},{"path":"/reference/get_trialr_nbg_tite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit a TITE version of the NBG dose-finding model using trialr — get_trialr_nbg_tite","text":"","code":"get_trialr_nbg_tite(   parent_selector_factory = NULL,   real_doses,   d_star,   target,   alpha_mean,   alpha_sd,   beta_mean,   beta_sd,   ... )"},{"path":"/reference/get_trialr_nbg_tite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit a TITE version of the NBG dose-finding model using trialr — get_trialr_nbg_tite","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just use model start. real_doses Doses investigation, non-decreasing vector numbers. d_star Numeric, reference dose calculating covariate log(dose / d_star) fitting model. Sometimes (always) taken max dose real_doses. target seek dose probability toxicity. alpha_mean Prior mean intercept variable normal prior. See Details. Also see documentation trialr package details. alpha_sd Prior standard deviation intercept variable normal prior. See Details. Also see documentation trialr package details. beta_mean Prior mean gradient variable normal prior. See Details. Also see documentation trialr package details. beta_sd Prior standard deviation slope variable normal prior. See Details. Also see documentation trialr package details. ... Extra args passed stan_nbg.","code":""},{"path":"/reference/get_trialr_nbg_tite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit a TITE version of the NBG dose-finding model using trialr — get_trialr_nbg_tite","text":"object type selector_factory can fit NBG model outcomes.","code":""},{"path":"/reference/get_trialr_nbg_tite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit a TITE version of the NBG dose-finding model using trialr — get_trialr_nbg_tite","text":"","code":"# TODO"},{"path":"/reference/get_wages_and_tait.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an object to fit Wages & Tait's model for phase I/II dose-finding. — get_wages_and_tait","title":"Get an object to fit Wages & Tait's model for phase I/II dose-finding. — get_wages_and_tait","text":"function returns object can used fit Wages & Taits model phase /II dose-finding, .e. selects doses according efficacy toxicity outcomes. function delegates prior--posterior calculations dfcrm package.","code":""},{"path":"/reference/get_wages_and_tait.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an object to fit Wages & Tait's model for phase I/II dose-finding. — get_wages_and_tait","text":"","code":"get_wages_and_tait(   parent_selector_factory = NULL,   tox_skeleton,   eff_skeletons,   eff_skeleton_weights = rep(1, nrow(eff_skeletons)),   tox_limit,   eff_limit,   num_randomise,   ... )"},{"path":"/reference/get_wages_and_tait.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an object to fit Wages & Tait's model for phase I/II dose-finding. — get_wages_and_tait","text":"parent_selector_factory optional object type selector_factory charge dose selection class gets involved. Leave NULL just use model start. tox_skeleton Dose-toxicity skeleton, non-decreasing vector probabilities. eff_skeletons Matrix dose-efficacy skeletons, skeletons rows. .e. number cols equal number doses, number rows equal number efficacy skeletons consideration. eff_skeleton_weights numerical vector, prior weights efficacy skeletons. length equal number rows eff_skeletons. Default equal weights. tox_limit seek dose probability toxicity greater . Value determines admissible set. See Wages & Tait (2015). eff_limit seek dose probability efficacy less . num_randomise integer, maximum number patients use adaptive randomisation phase trial. ... Extra args passed onwards.","code":""},{"path":"/reference/get_wages_and_tait.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an object to fit Wages & Tait's model for phase I/II dose-finding. — get_wages_and_tait","text":"object type selector_factory.","code":""},{"path":"/reference/get_wages_and_tait.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an object to fit Wages & Tait's model for phase I/II dose-finding. — get_wages_and_tait","text":"Wages, N. ., & Tait, C. (2015). Seamless Phase /II Adaptive Design Oncology Trials Molecularly Targeted Agents. Journal Biopharmaceutical Statistics, 25(5), 903–920. https://doi.org/10.1080/10543406.2014.920873","code":""},{"path":"/reference/get_wages_and_tait.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an object to fit Wages & Tait's model for phase I/II dose-finding. — get_wages_and_tait","text":"","code":"# Example in Wages & Tait (2015) tox_skeleton = c(0.01, 0.08, 0.15, 0.22, 0.29, 0.36) eff_skeletons = matrix(nrow=11, ncol=6) eff_skeletons[1,] <- c(0.60, 0.50, 0.40, 0.30, 0.20, 0.10) eff_skeletons[2,] <- c(0.50, 0.60, 0.50, 0.40, 0.30, 0.20) eff_skeletons[3,] <- c(0.40, 0.50, 0.60, 0.50, 0.40, 0.30) eff_skeletons[4,] <- c(0.30, 0.40, 0.50, 0.60, 0.50, 0.40) eff_skeletons[5,] <- c(0.20, 0.30, 0.40, 0.50, 0.60, 0.50) eff_skeletons[6,] <- c(0.10, 0.20, 0.30, 0.40, 0.50, 0.60) eff_skeletons[7,] <- c(0.20, 0.30, 0.40, 0.50, 0.60, 0.60) eff_skeletons[8,] <- c(0.30, 0.40, 0.50, 0.60, 0.60, 0.60) eff_skeletons[9,] <- c(0.40, 0.50, 0.60, 0.60, 0.60, 0.60) eff_skeletons[10,] <- c(0.50, 0.60, 0.60, 0.60, 0.60, 0.60) eff_skeletons[11,] <- c(rep(0.60, 6)) eff_skeleton_weights = rep(1, nrow(eff_skeletons)) tox_limit = 0.33 eff_limit = 0.05 model <- get_wages_and_tait(tox_skeleton = tox_skeleton,                             eff_skeletons = eff_skeletons,                             tox_limit = tox_limit, eff_limit = eff_limit,                             num_randomise = 20) fit <- model %>% fit('1NN 2EN 3BE') fit %>% recommended_dose() #> [1] 1 fit %>% is_randomising() #> [1] TRUE fit %>% dose_admissible() #> [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE fit %>% prob_administer() #> [1] 0.2017701 0.2500917 0.2980465 0.2500917 0.0000000 0.0000000"},{"path":"/reference/graph_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise dose-paths as a graph — graph_paths","title":"Visualise dose-paths as a graph — graph_paths","text":"Visualise dose-paths graph","code":""},{"path":"/reference/graph_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise dose-paths as a graph — graph_paths","text":"","code":"graph_paths(paths, viridis_palette = \"viridis\", RColorBrewer_palette = NULL)"},{"path":"/reference/graph_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise dose-paths as a graph — graph_paths","text":"paths Object type dose_paths viridis_palette optional name colour palette viridis package. RColorBrewer_palette optional name colour palette RColorBrewer package.","code":""},{"path":"/reference/graph_paths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualise dose-paths as a graph — graph_paths","text":"viridis package supports palettes: viridis, magma, plasma, inferno, cividis. RColorBrewer package supports many palettes. Refer packages CRAN details.","code":""},{"path":"/reference/graph_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise dose-paths as a graph — graph_paths","text":"","code":"paths <- get_three_plus_three(num_doses = 5) %>%   get_dose_paths(cohort_sizes = c(3, 3, 3)) if (FALSE) { # \\dontrun{ graph_paths(paths) graph_paths(paths, viridis_palette = 'plasma') graph_paths(paths, RColorBrewer_palette = 'YlOrRd') } # }"},{"path":"/reference/is_randomising.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this selector currently randomly allocating doses? — is_randomising","title":"Is this selector currently randomly allocating doses? — is_randomising","text":"Get percentage patients evaluated dose investigation.","code":""},{"path":"/reference/is_randomising.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this selector currently randomly allocating doses? — is_randomising","text":"","code":"is_randomising(x, ...)"},{"path":"/reference/is_randomising.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is this selector currently randomly allocating doses? — is_randomising","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/is_randomising.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is this selector currently randomly allocating doses? — is_randomising","text":"logical value","code":""},{"path":"/reference/is_randomising.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is this selector currently randomly allocating doses? — is_randomising","text":"","code":"outcomes <- '1NNN 2NTN' fit <- get_random_selector(prob_select = c(0.1, 0.6, 0.3)) %>%   fit(outcomes) fit %>% is_randomising() #> [1] TRUE"},{"path":"/reference/linear_follow_up_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Weights for tolerance and toxicity events using linear function of time — linear_follow_up_weight","title":"Weights for tolerance and toxicity events using linear function of time — linear_follow_up_weight","text":"Weights tolerance toxicity events using linear function time","code":""},{"path":"/reference/linear_follow_up_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weights for tolerance and toxicity events using linear function of time — linear_follow_up_weight","text":"","code":"linear_follow_up_weight(   now_time,   recruited_time,   tox,   max_time,   tox_has_weight_1 = TRUE )"},{"path":"/reference/linear_follow_up_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weights for tolerance and toxicity events using linear function of time — linear_follow_up_weight","text":"now_time time now recruited_time vector recruitment times patients tox integer vector toxicity variables patients, 1 means tox max_time maximum window evaluation tox_has_weight_1 logical, TRUE set weight tox 1 identically","code":""},{"path":"/reference/linear_follow_up_weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weights for tolerance and toxicity events using linear function of time — linear_follow_up_weight","text":"numerical vector weights","code":""},{"path":"/reference/linear_follow_up_weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weights for tolerance and toxicity events using linear function of time — linear_follow_up_weight","text":"","code":"linear_follow_up_weight(   now_time = 10,   recruited_time = 4:7,   tox = c(0, 0, 0, 1),   max_time = 6,   tox_has_weight_1 = TRUE ) #> [1] 1.0000000 0.8333333 0.6666667 1.0000000  linear_follow_up_weight(   now_time = 10,   recruited_time = 4:7,   tox = c(0, 0, 0, 1),   max_time = 6,   tox_has_weight_1 = FALSE ) #> [1] 1.0000000 0.8333333 0.6666667 0.5000000"},{"path":"/reference/mean_prob_eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean efficacy rate at each dose. — mean_prob_eff","title":"Mean efficacy rate at each dose. — mean_prob_eff","text":"Get estimated mean efficacy rate dose investigation. set modelled statistics. underlying models estimate efficacy probabilities different ways. model-based estimate mean available, function return vector NAs.","code":""},{"path":"/reference/mean_prob_eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean efficacy rate at each dose. — mean_prob_eff","text":"","code":"mean_prob_eff(x, ...)"},{"path":"/reference/mean_prob_eff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean efficacy rate at each dose. — mean_prob_eff","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/mean_prob_eff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean efficacy rate at each dose. — mean_prob_eff","text":"numerical vector","code":""},{"path":"/reference/mean_prob_eff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean efficacy rate at each dose. — mean_prob_eff","text":"","code":"efftox_priors <- trialr::efftox_priors p <- efftox_priors(alpha_mean = -7.9593, alpha_sd = 3.5487,                    beta_mean = 1.5482, beta_sd = 3.5018,                    gamma_mean = 0.7367, gamma_sd = 2.5423,                    zeta_mean = 3.4181, zeta_sd = 2.4406,                    eta_mean = 0, eta_sd = 0.2,                    psi_mean = 0, psi_sd = 1) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) model <- get_trialr_efftox(real_doses = real_doses,                            efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,                            p_e = 0.1, p_t = 0.1,                            eff0 = 0.5, tox1 = 0.65,                            eff_star = 0.7, tox_star = 0.25,                            priors = p, iter = 1000, chains = 1, seed = 2020) x <- model %>% fit('1N 2E 3B') mean_prob_eff(x) #> [1] 0.2201596 0.5977496 0.9008855 0.9530408 0.9673690"},{"path":"/reference/mean_prob_tox.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean toxicity rate at each dose. — mean_prob_tox","title":"Mean toxicity rate at each dose. — mean_prob_tox","text":"Get estimated mean toxicity rate dose investigation. set modelled statistics. underlying models estimate toxicity probabilities different ways. model-based estimate mean available, function return vector NAs.","code":""},{"path":"/reference/mean_prob_tox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean toxicity rate at each dose. — mean_prob_tox","text":"","code":"mean_prob_tox(x, ...)"},{"path":"/reference/mean_prob_tox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean toxicity rate at each dose. — mean_prob_tox","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/mean_prob_tox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean toxicity rate at each dose. — mean_prob_tox","text":"numerical vector","code":""},{"path":"/reference/mean_prob_tox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean toxicity rate at each dose. — mean_prob_tox","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% mean_prob_tox() #> [1] 0.1133680 0.1876121 0.3651400 0.5138087 0.6898804"},{"path":"/reference/median_prob_eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Median efficacy rate at each dose. — median_prob_eff","title":"Median efficacy rate at each dose. — median_prob_eff","text":"Get estimated median efficacy rate dose investigation. set modelled statistics. underlying models estimate efficacy probabilities different ways. model-based estimate median available, function return vector NAs.","code":""},{"path":"/reference/median_prob_eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median efficacy rate at each dose. — median_prob_eff","text":"","code":"median_prob_eff(x, ...)"},{"path":"/reference/median_prob_eff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median efficacy rate at each dose. — median_prob_eff","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/median_prob_eff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median efficacy rate at each dose. — median_prob_eff","text":"numerical vector","code":""},{"path":"/reference/median_prob_eff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Median efficacy rate at each dose. — median_prob_eff","text":"","code":"efftox_priors <- trialr::efftox_priors p <- efftox_priors(alpha_mean = -7.9593, alpha_sd = 3.5487,                    beta_mean = 1.5482, beta_sd = 3.5018,                    gamma_mean = 0.7367, gamma_sd = 2.5423,                    zeta_mean = 3.4181, zeta_sd = 2.4406,                    eta_mean = 0, eta_sd = 0.2,                    psi_mean = 0, psi_sd = 1) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) model <- get_trialr_efftox(real_doses = real_doses,                            efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,                            p_e = 0.1, p_t = 0.1,                            eff0 = 0.5, tox1 = 0.65,                            eff_star = 0.7, tox_star = 0.25,                            priors = p, iter = 1000, chains = 1, seed = 2020) x <- model %>% fit('1N 2E 3B') median_prob_eff(x) #> [1] 0.1231745 0.6242540 0.9589366 0.9932508 0.9984876"},{"path":"/reference/median_prob_tox.html","id":null,"dir":"Reference","previous_headings":"","what":"Median toxicity rate at each dose. — median_prob_tox.boin_comb_selector","title":"Median toxicity rate at each dose. — median_prob_tox.boin_comb_selector","text":"Get estimated median toxicity rate dose investigation. set modelled statistics. underlying models estimate toxicity probabilities different ways. model-based estimate median available, function return vector NAs.","code":""},{"path":"/reference/median_prob_tox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median toxicity rate at each dose. — median_prob_tox.boin_comb_selector","text":"","code":"# S3 method for class 'boin_comb_selector' median_prob_tox(x, iso = TRUE, ...)  median_prob_tox(x, ...)"},{"path":"/reference/median_prob_tox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median toxicity rate at each dose. — median_prob_tox.boin_comb_selector","text":"x Object class selector iso TRUE use isotonic regression posterior medians; FALSE return just posterior medians, may monotonically increasing dose. ... arguments passed methods","code":""},{"path":"/reference/median_prob_tox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median toxicity rate at each dose. — median_prob_tox.boin_comb_selector","text":"numerical vector","code":""},{"path":"/reference/median_prob_tox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Median toxicity rate at each dose. — median_prob_tox.boin_comb_selector","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% median_prob_tox() #> [1] 0.1133680 0.1876121 0.3651400 0.5138087 0.6898804"},{"path":"/reference/model_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Model data-frame. — model_frame","title":"Model data-frame. — model_frame","text":"Get model data-frame dose-finding analysis, inlcuding columns patient id, cohort id, dose administered, toxicity outcome. scenarios, columns provided.","code":""},{"path":"/reference/model_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model data-frame. — model_frame","text":"","code":"model_frame(x, ...)"},{"path":"/reference/model_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model data-frame. — model_frame","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/model_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model data-frame. — model_frame","text":"tibble, acts like data.frame.","code":""},{"path":"/reference/model_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model data-frame. — model_frame","text":"","code":"# In a toxicity-only setting: skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% model_frame() #> # A tibble: 6 × 5 #>   patient cohort  dose   tox weight #>     <int>  <int> <int> <int>  <dbl> #> 1       1      1     1     0      1 #> 2       2      1     1     0      1 #> 3       3      1     1     0      1 #> 4       4      2     2     0      1 #> 5       5      2     2     1      1 #> 6       6      2     2     0      1  # In an efficacy-toxicity setting prob_select = c(0.1, 0.3, 0.5, 0.07, 0.03) model <- get_random_selector(prob_select = prob_select,                              supports_efficacy = TRUE) x <- model %>% fit('1NTN 2EN 5BB', supports_efficacy = TRUE) fit %>% model_frame() #> # A tibble: 6 × 5 #>   patient cohort  dose   tox weight #>     <int>  <int> <int> <int>  <dbl> #> 1       1      1     1     0      1 #> 2       2      1     1     0      1 #> 3       3      1     1     0      1 #> 4       4      2     2     0      1 #> 5       5      2     2     1      1 #> 6       6      2     2     0      1"},{"path":"/reference/n_at_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of patients treated at each dose. — n_at_dose","title":"Number of patients treated at each dose. — n_at_dose","text":"Get number patients evaluated dose investigation.","code":""},{"path":"/reference/n_at_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of patients treated at each dose. — n_at_dose","text":"","code":"n_at_dose(x, ...)"},{"path":"/reference/n_at_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of patients treated at each dose. — n_at_dose","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/n_at_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of patients treated at each dose. — n_at_dose","text":"integer vector","code":""},{"path":"/reference/n_at_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of patients treated at each dose. — n_at_dose","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% n_at_dose() #> [1] 3 3 0 0 0"},{"path":"/reference/n_at_recommended_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of patients treated at the recommended dose. — n_at_recommended_dose","title":"Number of patients treated at the recommended dose. — n_at_recommended_dose","text":"Get number patients evaluated recommended dose.","code":""},{"path":"/reference/n_at_recommended_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of patients treated at the recommended dose. — n_at_recommended_dose","text":"","code":"n_at_recommended_dose(x, ...)"},{"path":"/reference/n_at_recommended_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of patients treated at the recommended dose. — n_at_recommended_dose","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/n_at_recommended_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of patients treated at the recommended dose. — n_at_recommended_dose","text":"integer","code":""},{"path":"/reference/n_at_recommended_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of patients treated at the recommended dose. — n_at_recommended_dose","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% n_at_recommended_dose() #> [1] 3"},{"path":"/reference/num_cohort_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of different possible outcomes for a cohort of patients — num_cohort_outcomes","title":"Number of different possible outcomes for a cohort of patients — num_cohort_outcomes","text":"Number different possible outcomes cohort patients, experience one number discrete outcomes. instance, typical phase dose-finding trial, patient experience: -toxicity (N); toxicity (T). number possible outcomes per patient two. cohort three patients, number cohort outcomes four: NNN, NNT, NTT, TTT. Consider complex example: seamless phase /II trial efficacy toxicity outcomes, individual patient experience one four distinct outcomes: efficacy (E); toxicity (T); efficacy toxicity (B) neither. many different outcomes cohort three patients? answer 20 non-trivial see . convenience function calculates number using formula number combinations replacement,","code":""},{"path":"/reference/num_cohort_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of different possible outcomes for a cohort of patients — num_cohort_outcomes","text":"","code":"num_cohort_outcomes(num_patient_outcomes, cohort_size)"},{"path":"/reference/num_cohort_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of different possible outcomes for a cohort of patients — num_cohort_outcomes","text":"num_patient_outcomes integer, number distinct possible outcomes single patient cohort_size integer, number patients cohort","code":""},{"path":"/reference/num_cohort_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of different possible outcomes for a cohort of patients — num_cohort_outcomes","text":"integer, number distinct possible cohort outcomes","code":""},{"path":"/reference/num_cohort_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of different possible outcomes for a cohort of patients — num_cohort_outcomes","text":"","code":"# As described in example, N or T in a cohort of three: num_cohort_outcomes(num_patient_outcomes = 2, cohort_size = 3) #> [1] 4 # Also described in example, E, T, B or N in a cohort of three: num_cohort_outcomes(num_patient_outcomes = 4, cohort_size = 3) #> [1] 20"},{"path":"/reference/num_dose_path_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of nodes in dose-paths analysis — num_dose_path_nodes","title":"Number of nodes in dose-paths analysis — num_dose_path_nodes","text":"Number possible nodes exhaustive analysis dose-paths dose-finding trial. number nodes depth number nodes depth -1 multiplied number possible cohort outcomes depth . instance, 16 nodes previous depth four possible cohort outcomes current depth, 64 possible nodes current depth. Knowing number nodes dose-paths analysis helps analyst decide whether simulation dose-paths better tool assessing operating characteristics dose-finding design.","code":""},{"path":"/reference/num_dose_path_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of nodes in dose-paths analysis — num_dose_path_nodes","text":"","code":"num_dose_path_nodes(num_patient_outcomes, cohort_sizes)"},{"path":"/reference/num_dose_path_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of nodes in dose-paths analysis — num_dose_path_nodes","text":"num_patient_outcomes integer, number distinct possible outcomes single patient cohort_sizes integer vector cohort sizes","code":""},{"path":"/reference/num_dose_path_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of nodes in dose-paths analysis — num_dose_path_nodes","text":"integer vector, number nodes increasing depths. total number nodes sum vector.","code":""},{"path":"/reference/num_dose_path_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of nodes in dose-paths analysis — num_dose_path_nodes","text":"","code":"# In a 3+3 design, there are two possible outcomes for each patient and # patients are evaluated in cohorts of three. In an analysis of dose-paths in # the first two cohorts of three, how many nodes are there? num_dose_path_nodes(num_patient_outcomes = 2, cohort_sizes = rep(3, 2)) #> [1]  1  4 16 # In contrast, using an EffTox design there are four possible outcomes for # each patient. In a similar analysis of dose-paths in the first two cohorts # of three, how many nodes are there now? num_dose_path_nodes(num_patient_outcomes = 4, cohort_sizes = rep(3, 2)) #> [1]   1  20 400"},{"path":"/reference/num_doses.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of doses. — num_doses","title":"Number of doses. — num_doses","text":"Get number doses investigation dose-finding trial.","code":""},{"path":"/reference/num_doses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of doses. — num_doses","text":"","code":"num_doses(x, ...)"},{"path":"/reference/num_doses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of doses. — num_doses","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/num_doses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of doses. — num_doses","text":"integer","code":""},{"path":"/reference/num_doses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of doses. — num_doses","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% num_doses() #> [1] 5"},{"path":"/reference/num_eff.html","id":null,"dir":"Reference","previous_headings":"","what":"Total number of efficacies seen. — num_eff","title":"Total number of efficacies seen. — num_eff","text":"Get number efficacies seen dose-finding trial.","code":""},{"path":"/reference/num_eff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total number of efficacies seen. — num_eff","text":"","code":"num_eff(x, ...)"},{"path":"/reference/num_eff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total number of efficacies seen. — num_eff","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/num_eff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total number of efficacies seen. — num_eff","text":"integer","code":""},{"path":"/reference/num_eff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total number of efficacies seen. — num_eff","text":"","code":"prob_select = c(0.1, 0.3, 0.5, 0.07, 0.03) model <- get_random_selector(prob_select = prob_select,                              supports_efficacy = TRUE) x <- model %>% fit('1NTN 2EN 5BB') num_eff(x) #> [1] 3"},{"path":"/reference/num_patients.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of patients evaluated. — num_patients","title":"Number of patients evaluated. — num_patients","text":"Get number patients evaluated dose-finding trial.","code":""},{"path":"/reference/num_patients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of patients evaluated. — num_patients","text":"","code":"num_patients(x, ...)"},{"path":"/reference/num_patients.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of patients evaluated. — num_patients","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/num_patients.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of patients evaluated. — num_patients","text":"integer","code":""},{"path":"/reference/num_patients.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of patients evaluated. — num_patients","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% num_patients() #> [1] 6"},{"path":"/reference/num_tox.html","id":null,"dir":"Reference","previous_headings":"","what":"Total number of toxicities seen. — num_tox","title":"Total number of toxicities seen. — num_tox","text":"Get number toxicities seen dose-finding trial.","code":""},{"path":"/reference/num_tox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total number of toxicities seen. — num_tox","text":"","code":"num_tox(x, ...)"},{"path":"/reference/num_tox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total number of toxicities seen. — num_tox","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/num_tox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total number of toxicities seen. — num_tox","text":"integer","code":""},{"path":"/reference/num_tox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total number of toxicities seen. — num_tox","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% num_tox() #> [1] 1"},{"path":"/reference/parse_phase1_2_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a string of phase I/II dose-finding outcomes to vector notation. — parse_phase1_2_outcomes","title":"Parse a string of phase I/II dose-finding outcomes to vector notation. — parse_phase1_2_outcomes","text":"Parse string phase /II dose-finding outcomes binary vector notation necessary model invocation. outcome string describes doses given, outcomes observed groups patients cohorts. format string described Brock et al. (2017). See Examples. letters E, T, N B used represents patients experienced (E)fficacy , (T)oxicity , (B)oth efficacy toxicity, (N)either. letters concatenated numerical dose-levels convey outcomes cohorts patients. instance, 2ETB represents cohort three patients treated dose-level 2, experienced efficacy, toxicity events, respectively. results cohorts separated spaces. Thus, 2ETB 1NN extends previous example, next cohort two treated dose-level 1 patients experienced neither efficacy toxicity. See Examples.","code":""},{"path":"/reference/parse_phase1_2_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a string of phase I/II dose-finding outcomes to vector notation. — parse_phase1_2_outcomes","text":"","code":"parse_phase1_2_outcomes(outcomes, as_list = TRUE)"},{"path":"/reference/parse_phase1_2_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a string of phase I/II dose-finding outcomes to vector notation. — parse_phase1_2_outcomes","text":"outcomes character string, conveying doses given outcomes observed. as_list TRUE (default) return list; FALSE return data.frame","code":""},{"path":"/reference/parse_phase1_2_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a string of phase I/II dose-finding outcomes to vector notation. — parse_phase1_2_outcomes","text":"as_list == TRUE, list elements eff, tox, dose num_patients. as_list == FALSE, data.frame columns eff, tox dose.","code":""},{"path":"/reference/parse_phase1_2_outcomes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse a string of phase I/II dose-finding outcomes to vector notation. — parse_phase1_2_outcomes","text":"Brock, K., Billingham, L., Copland, M., Siddique, S., Sirovica, M., & Yap, C. (2017). Implementing EffTox dose-finding design Matchpoint trial. BMC Medical Research Methodology, 17(1), 112. https://doi.org/10.1186/s12874-017-0381-x","code":""},{"path":"/reference/parse_phase1_2_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a string of phase I/II dose-finding outcomes to vector notation. — parse_phase1_2_outcomes","text":"","code":"x = parse_phase1_2_outcomes('1NNE 2EEN 3TBB') # Three cohorts of three patients. The first cohort was treated at dose 1 and # had no toxicity with one efficacy, etc. x$num_patients  # 9 #> [1] 9 x$dose         # c(1, 1, 1, 2, 2, 2, 3, 3, 3) #> [1] 1 1 1 2 2 2 3 3 3 x$eff           # c(0, 0, 1, 1, 1, 0, 0, 1, 1) #> [1] 0 0 1 1 1 0 0 1 1 sum(x$eff)      # 5 #> [1] 5 x$tox           # c(0, 0, 0, 0, 0, 0, 1, 1, 1) #> [1] 0 0 0 0 0 0 1 1 1 sum(x$tox)      # 3 #> [1] 3  # The same information can be parsed to a data-frame: y = parse_phase1_2_outcomes('1NNE 2EEN 3TBB', as_list = FALSE) y #> # A tibble: 9 × 6 #>   cohort patient dose_string  dose   tox   eff #>    <int>   <int> <chr>       <int> <int> <int> #> 1      1       1 1               1     0     0 #> 2      1       2 1               1     0     0 #> 3      1       3 1               1     0     1 #> 4      2       4 2               2     0     1 #> 5      2       5 2               2     0     1 #> 6      2       6 2               2     0     0 #> 7      3       7 3               3     1     0 #> 8      3       8 3               3     1     1 #> 9      3       9 3               3     1     1"},{"path":"/reference/parse_phase1_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse a string of phase I dose-finding outcomes to vector notation. — parse_phase1_outcomes","title":"Parse a string of phase I dose-finding outcomes to vector notation. — parse_phase1_outcomes","text":"Parse string phase dose-finding outcomes binary vector notation necessary model invocation. outcome string describes doses given, outcomes observed groups patients cohorts. format string described Brock (2019), phase analogue similar idea described Brock et al. (2017). See Examples. letters T N used represents patients experienced (T)oxicity (N)o toxicity. letters concatenated numerical dose-levels convey outcomes cohorts patients. instance, 2NNT represents cohort three patients treated dose-level 2, one experienced toxicity, two . results cohorts separated spaces. Thus, 2NNT 1NN extends previous example, next cohort two treated dose-level 1 neither experienced toxicity. See examples.","code":""},{"path":"/reference/parse_phase1_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse a string of phase I dose-finding outcomes to vector notation. — parse_phase1_outcomes","text":"","code":"parse_phase1_outcomes(outcomes, as_list = TRUE)"},{"path":"/reference/parse_phase1_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse a string of phase I dose-finding outcomes to vector notation. — parse_phase1_outcomes","text":"outcomes character string, conveying doses given outcomes observed. as_list TRUE (default) return list; FALSE return data.frame","code":""},{"path":"/reference/parse_phase1_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse a string of phase I dose-finding outcomes to vector notation. — parse_phase1_outcomes","text":"as_list == TRUE, list elements tox, doses num_patients. as_list == FALSE, data.frame columns tox doses.","code":""},{"path":"/reference/parse_phase1_outcomes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parse a string of phase I dose-finding outcomes to vector notation. — parse_phase1_outcomes","text":"Brock, K. (2019). trialr: Bayesian Clinical Trial Designs R Stan. arXiv:1907.00161 [stat.CO] Brock, K., Billingham, L., Copland, M., Siddique, S., Sirovica, M., & Yap, C. (2017). Implementing EffTox dose-finding design Matchpoint trial. BMC Medical Research Methodology, 17(1), 112. https://doi.org/10.1186/s12874-017-0381-x","code":""},{"path":"/reference/parse_phase1_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse a string of phase I dose-finding outcomes to vector notation. — parse_phase1_outcomes","text":"","code":"x = parse_phase1_outcomes('1NNN 2NTN 3TTT') # Three cohorts of three patients. The first cohort was treated at dose 1 and # none had toxicity. The second cohort was treated at dose 2 and one of the # three had toxicity. Finally, cohort three was treated at dose 3 and all # patients had toxicity. x$num_patients  # 9 #> [1] 9 x$doses         # c(1, 1, 1, 2, 2, 2, 3, 3, 3) #> NULL x$tox           # c(0, 0, 0, 0, 1, 0, 1, 1, 1) #> [1] 0 0 0 0 1 0 1 1 1 sum(x$tox)      # 4 #> [1] 4  # The same information can be parsed to a data-frame: y = parse_phase1_outcomes('1NNN 2NTN 3TTT', as_list = FALSE) y #> # A tibble: 9 × 5 #>   cohort patient dose_string  dose   tox #>    <int>   <int> <chr>       <int> <int> #> 1      1       1 1               1     0 #> 2      1       2 1               1     0 #> 3      1       3 1               1     0 #> 4      2       4 2               2     0 #> 5      2       5 2               2     1 #> 6      2       6 2               2     0 #> 7      3       7 3               3     1 #> 8      3       8 3               3     1 #> 9      3       9 3               3     1"},{"path":"/reference/phase1_2_outcomes_to_cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Break a phase I/II outcome string into a list of cohort parts. — phase1_2_outcomes_to_cohorts","title":"Break a phase I/II outcome string into a list of cohort parts. — phase1_2_outcomes_to_cohorts","text":"Break phase /II outcome string list cohort parts. Break phase /II outcome string list cohort parts. outcome string describes doses given, outcomes observed timing analyses recommend dose. format string described Brock _et al_. (2017). letters E, T, N & B used represents patients experienced (E)fficacy, (T)oxicity, (N)either (B)oth. letters concatenated numerical dose-levels convey outcomes cohorts patients. instance, 2NET represents cohort three patients treated dose-level 2, one experienced toxicity , one experienced efficacy , one neither. results cohorts separated spaces assumed dose-finding decision takes place end cohort. Thus, 2NET 1NN builds previous example, next cohort two treated dose-level 1 neither patients experienced either event See examples.","code":""},{"path":"/reference/phase1_2_outcomes_to_cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break a phase I/II outcome string into a list of cohort parts. — phase1_2_outcomes_to_cohorts","text":"","code":"phase1_2_outcomes_to_cohorts(outcomes)"},{"path":"/reference/phase1_2_outcomes_to_cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break a phase I/II outcome string into a list of cohort parts. — phase1_2_outcomes_to_cohorts","text":"outcomes character string representing doses given, outcomes observed, timing analyses. See Description.","code":""},{"path":"/reference/phase1_2_outcomes_to_cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break a phase I/II outcome string into a list of cohort parts. — phase1_2_outcomes_to_cohorts","text":"list slot cohort. cohort slot list, containing elements: * dose, integer dose delivered cohort; * outcomes, character string representing E, T N B outcomes patients cohort.","code":""},{"path":"/reference/phase1_2_outcomes_to_cohorts.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Break a phase I/II outcome string into a list of cohort parts. — phase1_2_outcomes_to_cohorts","text":"Brock, K., Billingham, L., Copland, M., Siddique, S., Sirovica, M., & Yap, C. (2017). Implementing EffTox dose-finding design Matchpoint trial. BMC Medical Research Methodology, 17(1), 112. https://doi.org/10.1186/s12874-017-0381-x","code":""},{"path":"/reference/phase1_2_outcomes_to_cohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Break a phase I/II outcome string into a list of cohort parts. — phase1_2_outcomes_to_cohorts","text":"","code":"x = phase1_2_outcomes_to_cohorts('1NEN 2ENT 3TB') length(x) #> [1] 3 x[[1]]$dose #> [1] 1 x[[1]]$outcomes #> [1] \"NEN\" x[[2]]$dose #> [1] 2 x[[2]]$outcomes #> [1] \"ENT\" x[[3]]$dose #> [1] 3 x[[3]]$outcomes #> [1] \"TB\""},{"path":"/reference/phase1_outcomes_to_cohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Break a phase I outcome string into a list of cohort parts. — phase1_outcomes_to_cohorts","title":"Break a phase I outcome string into a list of cohort parts. — phase1_outcomes_to_cohorts","text":"Break phase outcome string list cohort parts. Break phase outcome string list cohort parts. outcome string describes doses given, outcomes observed timing analyses recommend dose. format string described Brock (2019), phase analogue similar idea described Brock _et al_. (2017). letters T N used represents patients experienced (T)oxicity (N)o toxicity. letters concatenated numerical dose-levels convey outcomes cohorts patients. instance, 2NNT represents cohort three patients treated dose-level 2, one experienced toxicity, two . results cohorts separated spaces assumed dose-finding decision takes place end cohort. Thus, 2NNT 1NN builds previous example, next cohort two treated dose-level 1 neither patients experienced toxicity. See examples.","code":""},{"path":"/reference/phase1_outcomes_to_cohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break a phase I outcome string into a list of cohort parts. — phase1_outcomes_to_cohorts","text":"","code":"phase1_outcomes_to_cohorts(outcomes)"},{"path":"/reference/phase1_outcomes_to_cohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break a phase I outcome string into a list of cohort parts. — phase1_outcomes_to_cohorts","text":"outcomes character string representing doses given, outcomes observed, timing analyses. See Description.","code":""},{"path":"/reference/phase1_outcomes_to_cohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break a phase I outcome string into a list of cohort parts. — phase1_outcomes_to_cohorts","text":"list slot cohort. cohort slot list, containing elements: * dose, integer dose delivered cohort; * outcomes, character string representing T N  outcomes patients cohort.","code":""},{"path":"/reference/phase1_outcomes_to_cohorts.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Break a phase I outcome string into a list of cohort parts. — phase1_outcomes_to_cohorts","text":"Brock, K. (2019). trialr: Bayesian Clinical Trial Designs R Stan. arXiv:1907.00161 [stat.CO] Brock, K., Billingham, L., Copland, M., Siddique, S., Sirovica, M., & Yap, C. (2017). Implementing EffTox dose-finding design Matchpoint trial. BMC Medical Research Methodology, 17(1), 112. https://doi.org/10.1186/s12874-017-0381-x","code":""},{"path":"/reference/phase1_outcomes_to_cohorts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Break a phase I outcome string into a list of cohort parts. — phase1_outcomes_to_cohorts","text":"","code":"x = phase1_outcomes_to_cohorts('1NNN 2NNT 3TT') length(x) #> [1] 3 x[[1]]$dose #> [1] 1 x[[1]]$outcomes #> [1] \"NNN\" x[[2]]$dose #> [1] 2 x[[2]]$outcomes #> [1] \"NNT\" x[[3]]$dose #> [1] 3 x[[3]]$outcomes #> [1] \"TT\""},{"path":"/reference/prob_administer.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentage of patients treated at each dose. — prob_administer","title":"Percentage of patients treated at each dose. — prob_administer","text":"Get percentage patients evaluated dose investigation.","code":""},{"path":"/reference/prob_administer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentage of patients treated at each dose. — prob_administer","text":"","code":"prob_administer(x, ...)"},{"path":"/reference/prob_administer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percentage of patients treated at each dose. — prob_administer","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/prob_administer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percentage of patients treated at each dose. — prob_administer","text":"numerical vector","code":""},{"path":"/reference/prob_administer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percentage of patients treated at each dose. — prob_administer","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% prob_administer() #>   1   2   3   4   5  #> 0.5 0.5 0.0 0.0 0.0"},{"path":"/reference/prob_eff_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile of the efficacy rate at each dose. — prob_eff_quantile","title":"Quantile of the efficacy rate at each dose. — prob_eff_quantile","text":"Get estimated quantile efficacy rate dose investigation. set modelled statistics. underlying models estimate efficacy probabilities different ways. model-based estimate median available, function return vector NAs.","code":""},{"path":"/reference/prob_eff_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile of the efficacy rate at each dose. — prob_eff_quantile","text":"","code":"prob_eff_quantile(x, p, ...)"},{"path":"/reference/prob_eff_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile of the efficacy rate at each dose. — prob_eff_quantile","text":"x Object class selector p quantile probability, decimal value 0 1 ... arguments passed methods","code":""},{"path":"/reference/prob_eff_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile of the efficacy rate at each dose. — prob_eff_quantile","text":"numerical vector","code":""},{"path":"/reference/prob_eff_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile of the efficacy rate at each dose. — prob_eff_quantile","text":"","code":"efftox_priors <- trialr::efftox_priors p <- efftox_priors(alpha_mean = -7.9593, alpha_sd = 3.5487,                    beta_mean = 1.5482, beta_sd = 3.5018,                    gamma_mean = 0.7367, gamma_sd = 2.5423,                    zeta_mean = 3.4181, zeta_sd = 2.4406,                    eta_mean = 0, eta_sd = 0.2,                    psi_mean = 0, psi_sd = 1) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) model <- get_trialr_efftox(real_doses = real_doses,                            efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,                            p_e = 0.1, p_t = 0.1,                            eff0 = 0.5, tox1 = 0.65,                            eff_star = 0.7, tox_star = 0.25,                            priors = p, iter = 1000, chains = 1, seed = 2020) x <- model %>% fit('1N 2E 3B') prob_tox_quantile(x, p = 0.9) #> [1] 0.1256015 0.2433478 0.7657587 0.9888866 0.9993879"},{"path":"/reference/prob_recommend.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability of recommendation — prob_recommend","title":"Probability of recommendation — prob_recommend","text":"Get probabilities doses investigation recommended.","code":""},{"path":"/reference/prob_recommend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability of recommendation — prob_recommend","text":"","code":"prob_recommend(x, ...)"},{"path":"/reference/prob_recommend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability of recommendation — prob_recommend","text":"x Object type simulations. ... arguments passed methods","code":""},{"path":"/reference/prob_recommend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability of recommendation — prob_recommend","text":"vector probabilities","code":""},{"path":"/reference/prob_recommend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability of recommendation — prob_recommend","text":"","code":"true_prob_tox <- c(0.12, 0.27, 0.44, 0.53, 0.57) sims <- get_three_plus_three(num_doses = 5) %>%   simulate_trials(num_sims = 50, true_prob_tox = true_prob_tox) sims %>% prob_recommend #> NoDose      1      2      3      4      5  #>   0.14   0.42   0.26   0.16   0.02   0.00"},{"path":"/reference/prob_tox_exceeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability that the toxicity rate exceeds some threshold. — prob_tox_exceeds.boin_comb_selector","title":"Probability that the toxicity rate exceeds some threshold. — prob_tox_exceeds.boin_comb_selector","text":"Get probability toxicity rate dose exceeds threshold. Get probability efficacy rate dose exceeds threshold.","code":""},{"path":"/reference/prob_tox_exceeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability that the toxicity rate exceeds some threshold. — prob_tox_exceeds.boin_comb_selector","text":"","code":"# S3 method for class 'boin_comb_selector' prob_tox_exceeds(x, threshold, iso = TRUE, ...)  prob_tox_exceeds(x, threshold, ...)  prob_eff_exceeds(x, threshold, ...)"},{"path":"/reference/prob_tox_exceeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability that the toxicity rate exceeds some threshold. — prob_tox_exceeds.boin_comb_selector","text":"x Object type selector threshold Probability efficacy rate exceeds ? iso TRUE use isotonic regression posterior probabilities; FALSE return just posterior quantiles, may monotonically increasing dose. ... arguments passed methods","code":""},{"path":"/reference/prob_tox_exceeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probability that the toxicity rate exceeds some threshold. — prob_tox_exceeds.boin_comb_selector","text":"numerical vector probabilities numerical vector probabilities","code":""},{"path":"/reference/prob_tox_exceeds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability that the toxicity rate exceeds some threshold. — prob_tox_exceeds.boin_comb_selector","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) # What is probability that tox rate at each dose exceeds target by >= 10%? fit %>% prob_tox_exceeds(threshold = target + 0.1) #> [1] 0.06487018 0.16640298 0.53408008 0.82783385 0.98459064 efftox_priors <- trialr::efftox_priors p <- efftox_priors(alpha_mean = -7.9593, alpha_sd = 3.5487,                    beta_mean = 1.5482, beta_sd = 3.5018,                    gamma_mean = 0.7367, gamma_sd = 2.5423,                    zeta_mean = 3.4181, zeta_sd = 2.4406,                    eta_mean = 0, eta_sd = 0.2,                    psi_mean = 0, psi_sd = 1) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) model <- get_trialr_efftox(real_doses = real_doses,                            efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,                            p_e = 0.1, p_t = 0.1,                            eff0 = 0.5, tox1 = 0.65,                            eff_star = 0.7, tox_star = 0.25,                            priors = p, iter = 1000, chains = 1, seed = 2020) x <- model %>% fit('1N 2E 3B') prob_tox_exceeds(x, threshold = 0.45) #> [1] 0.018 0.018 0.324 0.664 0.776"},{"path":"/reference/prob_tox_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile of the toxicity rate at each dose. — prob_tox_quantile.boin_comb_selector","title":"Quantile of the toxicity rate at each dose. — prob_tox_quantile.boin_comb_selector","text":"Get estimated quantile toxicity rate dose investigation. set modelled statistics. underlying models estimate toxicity probabilities different ways. model-based estimate median available, function return vector NAs.","code":""},{"path":"/reference/prob_tox_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile of the toxicity rate at each dose. — prob_tox_quantile.boin_comb_selector","text":"","code":"# S3 method for class 'boin_comb_selector' prob_tox_quantile(x, p, iso = TRUE, ...)  prob_tox_quantile(x, p, ...)"},{"path":"/reference/prob_tox_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile of the toxicity rate at each dose. — prob_tox_quantile.boin_comb_selector","text":"x Object class selector p quantile probability, decimal value 0 1 iso TRUE use isotonic regression posterior quantiles; FALSE return just posterior quantiles, may monotonically increasing dose. ... arguments passed methods","code":""},{"path":"/reference/prob_tox_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile of the toxicity rate at each dose. — prob_tox_quantile.boin_comb_selector","text":"numerical vector","code":""},{"path":"/reference/prob_tox_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile of the toxicity rate at each dose. — prob_tox_quantile.boin_comb_selector","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% prob_tox_quantile(p = 0.9) #> [1] 0.3088932 0.4053738 0.5806381 0.6981521 0.8184709"},{"path":"/reference/prob_tox_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get samples of the probability of toxicity. — prob_tox_samples","title":"Get samples of the probability of toxicity. — prob_tox_samples","text":"Get samples probability toxicity. instance, Bayesian approach supports sampling expected return posterior samples probability toxicity. class support sampling, function raise error. can check whether class supports sampling calling supports_sampling. Get samples probability efficacy instance, Bayesian approach supports sampling expected return posterior samples probability toxicity. class support sampling, function raise error. can check whether class supports sampling calling supports_sampling.","code":""},{"path":"/reference/prob_tox_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get samples of the probability of toxicity. — prob_tox_samples","text":"","code":"prob_tox_samples(x, tall = FALSE, ...)  prob_eff_samples(x, tall = FALSE, ...)"},{"path":"/reference/prob_tox_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get samples of the probability of toxicity. — prob_tox_samples","text":"x Object type selector tall logical, FALSE, wide data-frame returned columns pertaining doses column names dose indices. TRUE, tall data-frame returned data doses stacked vertically. mode, column names include dose prob_eff. ... arguments passed methods","code":""},{"path":"/reference/prob_tox_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get samples of the probability of toxicity. — prob_tox_samples","text":"data-frame like object data-frame like object","code":""},{"path":"/reference/prob_tox_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get samples of the probability of toxicity. — prob_tox_samples","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% prob_tox_samples() #> # A tibble: 4,000 × 6 #>    .draw    `1`    `2`   `3`   `4`   `5` #>    <chr>  <dbl>  <dbl> <dbl> <dbl> <dbl> #>  1 1     0.188  0.277  0.462 0.600 0.752 #>  2 2     0.0719 0.132  0.296 0.447 0.638 #>  3 3     0.114  0.189  0.366 0.515 0.691 #>  4 4     0.173  0.260  0.444 0.585 0.742 #>  5 5     0.0191 0.0478 0.160 0.298 0.509 #>  6 6     0.184  0.272  0.456 0.595 0.749 #>  7 7     0.0104 0.0300 0.121 0.248 0.459 #>  8 8     0.212  0.304  0.488 0.623 0.768 #>  9 9     0.272  0.368  0.548 0.672 0.801 #> 10 10    0.313  0.410  0.585 0.701 0.821 #> # ℹ 3,990 more rows fit %>% prob_tox_samples(tall = TRUE) #> # A tibble: 20,000 × 3 #>    .draw dose  prob_tox #>    <chr> <chr>    <dbl> #>  1 1     1      0.0864  #>  2 2     1      0.482   #>  3 3     1      0.0511  #>  4 4     1      0.161   #>  5 5     1      0.00770 #>  6 6     1      0.0529  #>  7 7     1      0.00650 #>  8 8     1      0.0175  #>  9 9     1      0.0896  #> 10 10    1      0.273   #> # ℹ 19,990 more rows efftox_priors <- trialr::efftox_priors p <- efftox_priors(alpha_mean = -7.9593, alpha_sd = 3.5487,                    beta_mean = 1.5482, beta_sd = 3.5018,                    gamma_mean = 0.7367, gamma_sd = 2.5423,                    zeta_mean = 3.4181, zeta_sd = 2.4406,                    eta_mean = 0, eta_sd = 0.2,                    psi_mean = 0, psi_sd = 1) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) model <- get_trialr_efftox(real_doses = real_doses,                            efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,                            p_e = 0.1, p_t = 0.1,                            eff0 = 0.5, tox1 = 0.65,                            eff_star = 0.7, tox_star = 0.25,                            priors = p, iter = 1000, chains = 1, seed = 2020) x <- model %>% fit('1N 2E 3B') prob_tox_samples(x, tall = TRUE) #> # A tibble: 2,500 × 3 #>    .draw dose  prob_tox #>    <chr> <chr>    <dbl> #>  1 1     1     0.0230   #>  2 2     1     0.00670  #>  3 3     1     0.00529  #>  4 4     1     0.0378   #>  5 5     1     0.000390 #>  6 6     1     0.000237 #>  7 7     1     0.000277 #>  8 8     1     0.00113  #>  9 9     1     0.0536   #> 10 10    1     0.00169  #> # ℹ 2,490 more rows"},{"path":"/reference/recommended_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Recommended dose for next patient or cohort. — recommended_dose","title":"Recommended dose for next patient or cohort. — recommended_dose","text":"Get dose recommended next patient cohort dose-finding trial.","code":""},{"path":"/reference/recommended_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recommended dose for next patient or cohort. — recommended_dose","text":"","code":"recommended_dose(x, ...)  # S3 method for class 'simulations' recommended_dose(x, dose_string = FALSE, ...)"},{"path":"/reference/recommended_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recommended dose for next patient or cohort. — recommended_dose","text":"x Object type selector. ... Extra args passed onwards. dose_string TRUE return vector character dose-strings; FALSE (default) get numerical vector recommended dose-indices monotherapy studies, matrix recommended dose-indices combination studies different treatments columns simulated outcomes rows.","code":""},{"path":"/reference/recommended_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recommended dose for next patient or cohort. — recommended_dose","text":"integer","code":""},{"path":"/reference/recommended_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recommended dose for next patient or cohort. — recommended_dose","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% recommended_dose() #> [1] 2"},{"path":"/reference/select_boin12_obd.html","id":null,"dir":"Reference","previous_headings":"","what":"Select dose by BOIN12's OBD-choosing algorithm. — select_boin12_obd","title":"Select dose by BOIN12's OBD-choosing algorithm. — select_boin12_obd","text":"Note: use selector, almost certainly needs last example chain - see Example . method selects dose algorithm identifying optimal biological dose (OBD) described Lin et al. (2020). class intended used BOIN12 trial reached maximum sample size. Thus, intends make final dose recommendation regular BOIN12 dose selection algorithm, implemented get_boin12, gracefully concluded dose-finding trial. However, class can used scenario limit toxicity rate. See Examples. Note - class override parent dose selector parent advocating dose. Thus class reinstate dangerous dose.","code":""},{"path":"/reference/select_boin12_obd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select dose by BOIN12's OBD-choosing algorithm. — select_boin12_obd","text":"","code":"select_boin12_obd(   parent_selector_factory,   when = c(\"finally\", \"always\"),   tox_limit = NULL,   ... )"},{"path":"/reference/select_boin12_obd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select dose by BOIN12's OBD-choosing algorithm. — select_boin12_obd","text":"parent_selector_factory Object type selector_factory. Either : 'finally' select dose parent dose-selector finished, returning continue() == FALSE; 'always' use dose-selection algorithm every dose decision. per authors' original intentions, default 'finally'. tox_limit seek dose toxicity probability greater . provided, value sought parent dose-selector. ... Extra args ignored.","code":""},{"path":"/reference/select_boin12_obd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select dose by BOIN12's OBD-choosing algorithm. — select_boin12_obd","text":"object type selector_factory.","code":""},{"path":"/reference/select_boin12_obd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select dose by BOIN12's OBD-choosing algorithm. — select_boin12_obd","text":"Lin, R., Zhou, Y., Yan, F., Li, D., & Yuan, Y. (2020). BOIN12: Bayesian optimal interval phase /II trial design utility-based dose finding immunotherapy targeted therapies. JCO precision oncology, 4, 1393-1402.","code":""},{"path":"/reference/select_boin12_obd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select dose by BOIN12's OBD-choosing algorithm. — select_boin12_obd","text":"","code":"# This class is intended to make the final dose selection in a BOIN12 trial: tox_limit <- 0.35 model <- get_boin12(num_doses = 5, phi_t = 0.35, phi_e = 0.25,                     u2 = 40, u3 = 60, n_star = 6) %>%   stop_at_n(n = 12) %>%   select_boin12_obd()  outcomes <- '1NNN 2NTN 2NNN 3NTT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 1  # However, since behaviour is modular in this package, we can use this method # to select dose at every dose decision: model2 <- get_boin12(num_doses = 5, phi_t = 0.35, phi_e = 0.25,                     u2 = 40, u3 = 60, n_star = 6) %>%   select_boin12_obd(when = 'always') model2 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model2 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 1"},{"path":"/reference/select_boin_comb_mtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Select dose by BOIN-COMB's MTD-choosing algorithm. — select_boin_comb_mtd","title":"Select dose by BOIN-COMB's MTD-choosing algorithm. — select_boin_comb_mtd","text":"Note: use selector, almost certainly needs last example chain - see Example . method selects dose algorithm identifying maximum tolerable dose (MTD) described Yan et al. (2019). class intended used BOIN trial reached maximum sample size. Thus, intends make final dose recommendation regular BOIN dose selection algorithm, implemented get_boin, including additional behaviours govern stopping (etc), gracefully concluded dose-finding trial. However, class can used scenario target toxicity rate. See Examples. Note - class override parent dose selector parent advocating dose. Thus class reinstate dangerous dose.","code":""},{"path":"/reference/select_boin_comb_mtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select dose by BOIN-COMB's MTD-choosing algorithm. — select_boin_comb_mtd","text":"","code":"select_boin_comb_mtd(   parent_selector_factory,   when = c(\"finally\", \"always\"),   target = NULL,   ... )"},{"path":"/reference/select_boin_comb_mtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select dose by BOIN-COMB's MTD-choosing algorithm. — select_boin_comb_mtd","text":"parent_selector_factory Object type selector_factory. Either : 'finally' select dose parent dose-selector finished, returning continue() == FALSE; 'always' use dose-selection algorithm every dose decision. per authors' original intentions, default 'finally'. target seek dose probability toxicity. provided, value sought parent dose-selector. ... Extra args passed select.mtd.comb.","code":""},{"path":"/reference/select_boin_comb_mtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select dose by BOIN-COMB's MTD-choosing algorithm. — select_boin_comb_mtd","text":"object type selector_factory.","code":""},{"path":"/reference/select_boin_comb_mtd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select dose by BOIN-COMB's MTD-choosing algorithm. — select_boin_comb_mtd","text":"Yan, F., Pan, H., Zhang, L., Liu, S., & Yuan, Y. (2019). BOIN:   R Package Designing Single-Agent Drug-Combination Dose-Finding   Trials Using Bayesian Optimal Interval Designs. Journal Statistical   Software, 27(November 2017), 0–35. https://doi.org/10.18637/jss.v094.i13","code":""},{"path":"/reference/select_boin_comb_mtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select dose by BOIN-COMB's MTD-choosing algorithm. — select_boin_comb_mtd","text":"","code":"# This class is intended to make the final dose selection in a BOIN-COMB # trial: # TODO  target <- 0.25 model <- get_boin(num_doses = 5, target = target) %>%   stop_at_n(n = 12) %>%   select_boin_mtd()  outcomes <- '1NNN 2NTN 2NNN 3NTT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 2  # However, since behaviour is modular in this package, we can use this method # to select dose at every dose decision if we wanted: model2 <- get_boin(num_doses = 5, target = target) %>%   select_boin_mtd(when = 'always') model2 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model2 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 2  # and with any underlying model: skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   select_boin_mtd(when = 'always') model3 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model3 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 2"},{"path":"/reference/select_boin_mtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Select dose by BOIN's MTD-choosing algorithm. — select_boin_mtd","title":"Select dose by BOIN's MTD-choosing algorithm. — select_boin_mtd","text":"Note: use selector, almost certainly needs last example chain - see Example . method selects dose algorithm identifying maximum tolerable dose (MTD) described Yan et al. (2019). class intended used BOIN trial reached maximum sample size. Thus, intends make final dose recommendation regular BOIN dose selection algorithm, implemented get_boin, including additional behaviours govern stopping (etc), gracefully concluded dose-finding trial. However, class can used scenario target toxicity rate. See Examples. Note - class override parent dose selector parent advocating dose. Thus class reinstate dangerous dose.","code":""},{"path":"/reference/select_boin_mtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select dose by BOIN's MTD-choosing algorithm. — select_boin_mtd","text":"","code":"select_boin_mtd(   parent_selector_factory,   when = c(\"finally\", \"always\"),   target = NULL,   ... )"},{"path":"/reference/select_boin_mtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select dose by BOIN's MTD-choosing algorithm. — select_boin_mtd","text":"parent_selector_factory Object type selector_factory. Either : 'finally' select dose parent dose-selector finished, returning continue() == FALSE; 'always' use dose-selection algorithm every dose decision. per authors' original intentions, default 'finally'. target seek dose probability toxicity. provided, value sought parent dose-selector. ... Extra args passed select.mtd.","code":""},{"path":"/reference/select_boin_mtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select dose by BOIN's MTD-choosing algorithm. — select_boin_mtd","text":"object type selector_factory.","code":""},{"path":"/reference/select_boin_mtd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select dose by BOIN's MTD-choosing algorithm. — select_boin_mtd","text":"Yan, F., Pan, H., Zhang, L., Liu, S., & Yuan, Y. (2019). BOIN:   R Package Designing Single-Agent Drug-Combination Dose-Finding   Trials Using Bayesian Optimal Interval Designs. Journal Statistical   Software, 27(November 2017), 0–35. https://doi.org/10.18637/jss.v094.i13","code":""},{"path":"/reference/select_boin_mtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select dose by BOIN's MTD-choosing algorithm. — select_boin_mtd","text":"","code":"# This class is intended to make the final dose selection in a BOIN trial: target <- 0.25 model <- get_boin(num_doses = 5, target = target) %>%   stop_at_n(n = 12) %>%   select_boin_mtd()  outcomes <- '1NNN 2NTN 2NNN 3NTT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 2  # However, since behaviour is modular in this package, we can use this method # to select dose at every dose decision if we wanted: model2 <- get_boin(num_doses = 5, target = target) %>%   select_boin_mtd(when = 'always') model2 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model2 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 2  # and with any underlying model: skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   select_boin_mtd(when = 'always') model3 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model3 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 2"},{"path":"/reference/select_dose_by_cibp.html","id":null,"dir":"Reference","previous_headings":"","what":"Select dose by the CIBP selection criterion. — select_dose_by_cibp","title":"Select dose by the CIBP selection criterion. — select_dose_by_cibp","text":"method selects dose convex infinite bounds penalisation (CIBP) criterion Mozgunov & Jaki. method mindful uncertainty estimates probability toxicity uses asymmetry parameter penalise escalation risky doses.","code":""},{"path":"/reference/select_dose_by_cibp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select dose by the CIBP selection criterion. — select_dose_by_cibp","text":"","code":"select_dose_by_cibp(parent_selector_factory, a, target = NULL)"},{"path":"/reference/select_dose_by_cibp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select dose by the CIBP selection criterion. — select_dose_by_cibp","text":"parent_selector_factory Object type selector_factory. Number 0 2, asymmetry parameter. See References. target seek dose probability toxicity. provided, value sought parent dose-selector.","code":""},{"path":"/reference/select_dose_by_cibp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select dose by the CIBP selection criterion. — select_dose_by_cibp","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/select_dose_by_cibp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select dose by the CIBP selection criterion. — select_dose_by_cibp","text":"Mozgunov P, Jaki T. Improving safety continual reassessment method via modified allocation rule. Statistics Medicine.1-17. doi:10.1002/sim.8450","code":""},{"path":"/reference/select_dose_by_cibp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select dose by the CIBP selection criterion. — select_dose_by_cibp","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.33  # Let's compare escalation behaviour of a CRM model without CIBP criterion: model1 <- get_dfcrm(skeleton = skeleton, target = target) # To one with the CIBP criterion: model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   select_dose_by_cibp(a = 0.3)  # Despite one-in-three tox at first dose, regular model is ready to escalate: model1 %>% fit('1NTN') %>% recommended_dose() #> [1] 2 # But the model using CIBP is more risk averse: model2 %>% fit('1NTN') %>% recommended_dose() #> [1] 1"},{"path":"/reference/select_mtpi2_mtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Select dose by mTPI2's MTD-choosing algorithm. — select_mtpi2_mtd","title":"Select dose by mTPI2's MTD-choosing algorithm. — select_mtpi2_mtd","text":"Note: use selector, almost certainly needs last example chain - see Example . method selects dose algorithm identifying maximum tolerable dose (MTD) described Guo et al. (2017). class intended used mTPI2 trial reached maximum sample size. Thus, intends make final dose recommendation regular mTPI2 dose selection algorithm, implemented get_mtpi2, including additional behaviours govern stopping (etc), gracefully concluded dose-finding trial. However, class can used scenario target toxicity rate. See Examples. Note - class override parent dose selector parent advocating dose. Thus class reinstate dangerous dose.","code":""},{"path":"/reference/select_mtpi2_mtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select dose by mTPI2's MTD-choosing algorithm. — select_mtpi2_mtd","text":"","code":"select_mtpi2_mtd(   parent_selector_factory,   when = c(\"finally\", \"always\"),   target = NULL,   exclusion_certainty,   alpha = 1,   beta = 1,   pava_just_tested_doses = FALSE,   ... )"},{"path":"/reference/select_mtpi2_mtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select dose by mTPI2's MTD-choosing algorithm. — select_mtpi2_mtd","text":"parent_selector_factory Object type selector_factory. Either : 'finally' select dose parent dose-selector finished, returning continue() == FALSE; 'always' use dose-selection algorithm every dose decision. per authors' original intentions, default 'finally'. target seek dose probability toxicity. provided, value sought parent dose-selector. exclusion_certainty Numeric, threshold posterior certainty required exclude dose excessively toxic. authors discuss values range 0.7 - 0.95. Set value > 1 suppress dose exclusion mechanism. authors use Greek letter xi parameter. alpha First shape parameter beta prior distribution probability toxicity. beta Second shape parameter beta prior distribution probability toxicity. pava_just_tested_doses design uses PAVA method estimate monotonic Prob(Tox) doses. default, estimates Prob(Tox) doses tested trial can lead untested doses recommended. Set option TRUE use PAVA tested doses, leaving untested doses NA -recommendable. Set FALSE use PAVA doses potentially recommend untested dose. Default FALSE. ... Extra args passed onwards.","code":""},{"path":"/reference/select_mtpi2_mtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select dose by mTPI2's MTD-choosing algorithm. — select_mtpi2_mtd","text":"object type selector_factory.","code":""},{"path":"/reference/select_mtpi2_mtd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select dose by mTPI2's MTD-choosing algorithm. — select_mtpi2_mtd","text":"Guo, W., Wang, SJ., Yang, S., Lynn, H., Ji, Y. (2017). Bayesian Interval Dose-Finding Design Addressing Ockham's Razor: mTPI-2. https://doi.org/10.1016/j.cct.2017.04.006","code":""},{"path":"/reference/select_mtpi2_mtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select dose by mTPI2's MTD-choosing algorithm. — select_mtpi2_mtd","text":"","code":"# This class is intended to make the final dose selection in a mTPI2 trial: target <- 0.25 model <- get_mtpi2(num_doses = 5, target = target,                    epsilon1 = 0.05, epsilon2 = 0.05,                    exclusion_certainty = 0.95) %>%   stop_at_n(n = 12) %>%   select_mtpi2_mtd(exclusion_certainty = 0.95)  outcomes <- '1NNN 2NTN 2NNN 3NTT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 2  # However, since behaviour is modular in this package, we can use this method # to select dose at every dose decision if we wanted: model2 <- get_mtpi2(num_doses = 5, target = target,                     epsilon1 = 0.05, epsilon2 = 0.05,                     exclusion_certainty = 0.95) %>%   select_mtpi2_mtd(when = 'always', exclusion_certainty = 0.95) model2 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model2 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 1  # and with any underlying model: skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   select_mtpi2_mtd(when = 'always', exclusion_certainty = 0.95) model3 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model3 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 1"},{"path":"/reference/select_mtpi_mtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Select dose by mTPI's MTD-choosing algorithm. — select_mtpi_mtd","title":"Select dose by mTPI's MTD-choosing algorithm. — select_mtpi_mtd","text":"Note: use selector, almost certainly needs last example chain - see Example . method selects dose algorithm identifying maximum tolerable dose (MTD) described Ji et al. (2010). class intended used mTPI trial reached maximum sample size. Thus, intends make final dose recommendation regular mTPI dose selection algorithm, implemented get_mtpi, including additional behaviours govern stopping (etc), gracefully concluded dose-finding trial. However, class can used scenario target toxicity rate. See Examples. Note - class override parent dose selector parent advocating dose. Thus class reinstate dangerous dose.","code":""},{"path":"/reference/select_mtpi_mtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select dose by mTPI's MTD-choosing algorithm. — select_mtpi_mtd","text":"","code":"select_mtpi_mtd(   parent_selector_factory,   when = c(\"finally\", \"always\"),   target = NULL,   exclusion_certainty,   alpha = 1,   beta = 1,   pava_just_tested_doses = FALSE,   ... )"},{"path":"/reference/select_mtpi_mtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select dose by mTPI's MTD-choosing algorithm. — select_mtpi_mtd","text":"parent_selector_factory Object type selector_factory. Either : 'finally' select dose parent dose-selector finished, returning continue() == FALSE; 'always' use dose-selection algorithm every dose decision. per authors' original intentions, default 'finally'. target seek dose probability toxicity. provided, value sought parent dose-selector. exclusion_certainty Numeric, threshold posterior certainty required exclude dose excessively toxic. authors discuss values range 0.7 - 0.95. Set value > 1 suppress dose exclusion mechanism. authors use Greek letter xi parameter. alpha First shape parameter beta prior distribution probability toxicity. beta Second shape parameter beta prior distribution probability toxicity. pava_just_tested_doses design uses PAVA method estimate monotonic Prob(Tox) doses. default, estimates Prob(Tox) doses tested trial can lead untested doses recommended. Set option TRUE use PAVA tested doses, leaving untested doses NA -recommendable. Set FALSE use PAVA doses potentially recommend untested dose. Default FALSE. ... Extra args passed onwards.","code":""},{"path":"/reference/select_mtpi_mtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select dose by mTPI's MTD-choosing algorithm. — select_mtpi_mtd","text":"object type selector_factory.","code":""},{"path":"/reference/select_mtpi_mtd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select dose by mTPI's MTD-choosing algorithm. — select_mtpi_mtd","text":"Ji, Y., Liu, P., Li, Y., & Bekele, B. N. (2010). modified toxicity probability interval method dose-finding trials. Clinical Trials, 7(6), 653-663. https://doi.org/10.1177/1740774510382799 Ji, Y., & Yang, S. (2017). Interval-Based Dose-Finding Designs, 1-26. Retrieved https://arxiv.org/abs/1706.03277","code":""},{"path":"/reference/select_mtpi_mtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select dose by mTPI's MTD-choosing algorithm. — select_mtpi_mtd","text":"","code":"# This class is intended to make the final dose selection in a mTPI trial: target <- 0.25 model <- get_mtpi(num_doses = 5, target = target,                   epsilon1 = 0.05, epsilon2 = 0.05,                   exclusion_certainty = 0.95) %>%   stop_at_n(n = 12) %>%   select_mtpi_mtd(exclusion_certainty = 0.95)  outcomes <- '1NNN 2NTN 2NNN 3NTT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 2  # However, since behaviour is modular in this package, we can use this method # to select dose at every dose decision if we wanted: model2 <- get_mtpi(num_doses = 5, target = target,                    epsilon1 = 0.05, epsilon2 = 0.05,                    exclusion_certainty = 0.95) %>%   select_mtpi_mtd(when = 'always', exclusion_certainty = 0.95) model2 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model2 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 1  # and with any underlying model: skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   select_mtpi_mtd(when = 'always', exclusion_certainty = 0.95) model3 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model3 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 1"},{"path":"/reference/select_tpi_mtd.html","id":null,"dir":"Reference","previous_headings":"","what":"Select dose by TPI's MTD-choosing algorithm. — select_tpi_mtd","title":"Select dose by TPI's MTD-choosing algorithm. — select_tpi_mtd","text":"Note: use selector, almost certainly needs last example chain - see Example . method selects dose algorithm identifying maximum tolerable dose (MTD) described Ji et al. (2007). class intended used TPI trial reached maximum sample size. Thus, intends make final dose recommendation regular TPI dose selection algorithm, implemented get_tpi, including additional behaviours govern stopping (etc), gracefully concluded dose-finding trial. However, class can used scenario target toxicity rate. See Examples. Note - class override parent dose selector parent advocating dose. Thus class reinstate dangerous dose.","code":""},{"path":"/reference/select_tpi_mtd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select dose by TPI's MTD-choosing algorithm. — select_tpi_mtd","text":"","code":"select_tpi_mtd(   parent_selector_factory,   when = c(\"finally\", \"always\"),   target = NULL,   exclusion_certainty,   alpha = 1,   beta = 1,   pava_just_tested_doses = FALSE,   ... )"},{"path":"/reference/select_tpi_mtd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select dose by TPI's MTD-choosing algorithm. — select_tpi_mtd","text":"parent_selector_factory Object type selector_factory. Either : 'finally' select dose parent dose-selector finished, returning continue() == FALSE; 'always' use dose-selection algorithm every dose decision. per authors' original intentions, default 'finally'. target seek dose probability toxicity. provided, value sought parent dose-selector. exclusion_certainty Numeric, threshold posterior certainty required exclude dose excessively toxic. authors discuss values range 0.7 - 0.95. Set value > 1 suppress dose exclusion mechanism. authors use Greek letter xi parameter. alpha First shape parameter beta prior distribution probability toxicity. beta Second shape parameter beta prior distribution probability toxicity. pava_just_tested_doses design uses PAVA method estimate monotonic Prob(Tox) doses. default, estimates Prob(Tox) doses tested trial can lead untested doses recommended. Set option TRUE use PAVA tested doses, leaving untested doses NA -recommendable. Set FALSE use PAVA doses potentially recommend untested dose. Default FALSE. ... Extra args passed onwards.","code":""},{"path":"/reference/select_tpi_mtd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select dose by TPI's MTD-choosing algorithm. — select_tpi_mtd","text":"object type selector_factory.","code":""},{"path":"/reference/select_tpi_mtd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select dose by TPI's MTD-choosing algorithm. — select_tpi_mtd","text":"Ji, Y., Li, Y., & Bekele, B. N. (2007). Dose-finding phase clinical trials based toxicity probability intervals. Clinical Trials, 4(3), 235–244. https://doi.org/10.1177/1740774507079442","code":""},{"path":"/reference/select_tpi_mtd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select dose by TPI's MTD-choosing algorithm. — select_tpi_mtd","text":"","code":"# This class is intended to make the final dose selection in a mTPI2 trial: target <- 0.25 model <- get_tpi(num_doses = 5, target = target,                  k1 = 1, k2 = 1.5,                  exclusion_certainty = 0.95) %>%   stop_at_n(n = 12) %>%   select_tpi_mtd(exclusion_certainty = 0.95)  outcomes <- '1NNN 2NTN 2NNN 3NTT' model %>% fit(outcomes) %>% recommended_dose() #> [1] 2  # However, since behaviour is modular in this package, we can use this method # to select dose at every dose decision if we wanted: model2 <- get_tpi(num_doses = 5, target = target,                   k1 = 1, k2 = 1.5,                   exclusion_certainty = 0.95) %>%   select_tpi_mtd(when = 'always', exclusion_certainty = 0.95) model2 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model2 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 1  # and with any underlying model: skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   select_tpi_mtd(when = 'always', exclusion_certainty = 0.95) model3 %>% fit('1NNT') %>% recommended_dose() #> [1] 1 model3 %>% fit('1NNN 2NNT') %>% recommended_dose() #> [1] 1"},{"path":"/reference/selector.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose selector. — selector","title":"Dose selector. — selector","text":"core class package. encapsulates object (e.g. CRM model, 3+3 model) able recommend doses, keep track many patients treated doses, toxicity outcomes seen, whether trial continue. offers consistent interface many dose-finding methods, including CRM, TPI, mTPI, BOIN, EffTox, 3+3, . standardised interface, modularisation offers powerful way adorn dose-finding methods extra desirable behaviour. selector objects can daisy-chained togther using magrittr's pipe operator. instance, CRM fitting method dfcrm fantastic runs quickly simple call. However, recommend trial stops dose toxic n patients already treated recommended dose. behaviours can bolted via additional selectors. Furthermore, behaviours can bolted dose selector modular approach implemented escalation. See Examples. selector objects obtained calling fit function selector_factory object. selector_factory object obtained initially calling function like get_dfcrm, get_three_plus_three get_boin. Users may add desired extra behaviour subsequent calls functions like stop_when_n_at_dose stop_when_too_toxic. selector class also supports object able perform inferential calculations rates toxicity via functions like mean_prob_tox, median_prob_tox, prob_tox_exceeds. However, naturally sophistication calculations vary model implementation. example, full MCMC method able quantify probability like working posterior samples. contrast, method like crm function dfcrm uses plug-method estimate posterior dose-toxicity curves natively estimate median probability tox.","code":""},{"path":"/reference/selector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose selector. — selector","text":"","code":"selector()"},{"path":"/reference/selector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dose selector. — selector","text":"Every selector object implements following functions: tox_target num_patients cohort doses_given tox num_tox model_frame num_doses dose_indices dose_strings recommended_dose continue n_at_dose n_at_recommended_dose is_randomising prob_administer tox_at_dose empiric_tox_rate mean_prob_tox median_prob_tox dose_admissible prob_tox_quantile prob_tox_exceeds supports_sampling prob_tox_samples selectors also add: tox_limit eff_limit eff num_eff eff_at_dose empiric_eff_rate mean_prob_eff median_prob_eff prob_eff_quantile prob_eff_exceeds prob_eff_samples","code":""},{"path":[]},{"path":"/reference/selector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dose selector. — selector","text":"","code":"# Start with a simple CRM model skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model1 <- get_dfcrm(skeleton = skeleton, target = target)  # Add a rule to stop when 9 patients are treated at the recommended dose model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_n_at_dose(n = 9, dose = 'recommended')  # Add a rule to stop if toxicity rate at lowest dose likely exceeds target model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_n_at_dose(n = 9, dose = 'recommended') %>%   stop_when_too_toxic(dose = 1, tox_threshold = target, confidence = 0.5)  # We now have three CRM models that differ in their stopping behaviour. # Let's fit each to some outcomes to see those differences:  outcomes <- '1NNN 2NTT 1NNT' fit1 <- model1 %>% fit(outcomes) fit2 <- model2 %>% fit(outcomes) fit3 <- model3 %>% fit(outcomes)  fit1 %>% recommended_dose() #> [1] 1 fit1 %>% continue() #> [1] TRUE  fit2 %>% recommended_dose() #> [1] 1 fit2 %>% continue() #> [1] TRUE  fit3 %>% recommended_dose() #> [1] NA fit3 %>% continue() #> [1] FALSE # Already model3 wants to stop because of excessive toxicity.  # Let's carry on with models 1 and 2 by adding another cohort:  outcomes <- '1NNN 2NTT 1NNT 1NNN' fit1 <- model1 %>% fit(outcomes) fit2 <- model2 %>% fit(outcomes)  fit1 %>% recommended_dose() #> [1] 1 fit1 %>% continue() #> [1] TRUE  fit2 %>% recommended_dose() #> [1] 1 fit2 %>% continue() #> [1] FALSE  # Model1 wants to continue - in fact it will never stop. # In contrast, model2 has seen 9 at dose 1 so, rather than suggest dose 1 # again, it suggests the trial should stop.  # For contrast, let us consider a BOIN model on the same outcomes boin_fitter <- get_boin(num_doses = length(skeleton), target = target) fit4 <- boin_fitter %>% fit(outcomes) fit4 %>% recommended_dose() #> [1] 2 fit4 %>% continue() #> [1] TRUE  # Full selector interface: fit <- fit2 fit %>% tox_target() #> [1] 0.25 fit %>% num_patients() #> [1] 12 fit %>% cohort() #>  [1] 1 1 1 2 2 2 3 3 3 4 4 4 fit %>% doses_given() #>  [1] 1 1 1 2 2 2 1 1 1 1 1 1 fit %>% tox() #>  [1] 0 0 0 0 1 1 0 0 1 0 0 0 fit %>% weight() #>  [1] 1 1 1 1 1 1 1 1 1 1 1 1 fit %>% num_tox() #> [1] 3 fit %>% model_frame() #> # A tibble: 12 × 5 #>    patient cohort  dose   tox weight #>      <int>  <int> <int> <int>  <dbl> #>  1       1      1     1     0      1 #>  2       2      1     1     0      1 #>  3       3      1     1     0      1 #>  4       4      2     2     0      1 #>  5       5      2     2     1      1 #>  6       6      2     2     1      1 #>  7       7      3     1     0      1 #>  8       8      3     1     0      1 #>  9       9      3     1     1      1 #> 10      10      4     1     0      1 #> 11      11      4     1     0      1 #> 12      12      4     1     0      1 fit %>% num_doses() #> [1] 5 fit %>% dose_indices() #> [1] 1 2 3 4 5 fit %>% dose_strings() #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" fit %>% recommended_dose() #> [1] 1 fit %>% continue() #> [1] FALSE fit %>% n_at_dose() #> [1] 9 3 0 0 0 fit %>% n_at_recommended_dose() #> [1] 9 fit %>% is_randomising() #> [1] FALSE fit %>% prob_administer() #>    1    2    3    4    5  #> 0.75 0.25 0.00 0.00 0.00  fit %>% tox_at_dose() #> [1] 1 2 0 0 0 fit %>% empiric_tox_rate() #> [1] 0.1111111 0.6666667       NaN       NaN       NaN fit %>% mean_prob_tox() #> [1] 0.2069561 0.2979677 0.4824122 0.6176620 0.7644430 fit %>% median_prob_tox() #> [1] 0.2069561 0.2979677 0.4824122 0.6176620 0.7644430 fit %>% dose_admissible() #> [1] TRUE TRUE TRUE TRUE TRUE fit %>% prob_tox_quantile(0.9) #> [1] 0.3649670 0.4608277 0.6272346 0.7346974 0.8420860 fit %>% prob_tox_exceeds(0.5) #> [1] 0.009230096 0.054695783 0.442521884 0.851725376 0.996745367 fit %>% supports_sampling() #> [1] TRUE fit %>% prob_tox_samples() #> # A tibble: 4,000 × 6 #>    .draw     `1`    `2`    `3`   `4`   `5` #>    <chr>   <dbl>  <dbl>  <dbl> <dbl> <dbl> #>  1 1     0.00585 0.0192 0.0926 0.207 0.416 #>  2 2     0.170   0.256  0.440  0.581 0.739 #>  3 3     0.190   0.279  0.464  0.602 0.753 #>  4 4     0.0539  0.106  0.259  0.409 0.608 #>  5 5     0.0557  0.109  0.263  0.414 0.611 #>  6 6     0.339   0.435  0.606  0.718 0.831 #>  7 7     0.101   0.171  0.346  0.496 0.676 #>  8 8     0.125   0.202  0.382  0.530 0.702 #>  9 9     0.200   0.290  0.474  0.611 0.760 #> 10 10    0.171   0.257  0.442  0.583 0.740 #> # ℹ 3,990 more rows"},{"path":"/reference/selector_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Dose selector factory. — selector_factory","title":"Dose selector factory. — selector_factory","text":"Along selector, second core class escalation package. exists one thing: fit outcomes dose-finding trials models use select doses. selector_factory object obtained initially calling function like get_dfcrm, get_three_plus_three get_boin. Users may add desired extra behaviour subsequent calls functions like stop_when_n_at_dose stop_when_too_toxic. selector objects obtained calling fit function selector_factory object. Refer examples see works.","code":""},{"path":"/reference/selector_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dose selector factory. — selector_factory","text":"","code":"selector_factory()"},{"path":[]},{"path":"/reference/selector_factory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dose selector factory. — selector_factory","text":"","code":"# Start with a simple CRM model skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model1 <- get_dfcrm(skeleton = skeleton, target = target)  # Add a rule to stop when 9 patients are treated at the recommended dose model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_n_at_dose(n = 9, dose = 'recommended')  # Add a rule to stop if toxicity rate at lowest dose likely exceeds target model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_n_at_dose(n = 9, dose = 'recommended') %>%   stop_when_too_toxic(dose = 1, tox_threshold = target, confidence = 0.5)  # We now have three CRM models that differ in their stopping behaviour. # Let's fit each to some outcomes to see those differences:  outcomes <- '1NNN 2NTT 1NNT' fit1 <- model1 %>% fit(outcomes) fit2 <- model2 %>% fit(outcomes) fit3 <- model3 %>% fit(outcomes)  fit1 %>% recommended_dose() #> [1] 1 fit1 %>% continue() #> [1] TRUE  fit2 %>% recommended_dose() #> [1] 1 fit2 %>% continue() #> [1] TRUE  fit3 %>% recommended_dose() #> [1] NA fit3 %>% continue() #> [1] FALSE # Already model3 wants to stop because of excessive toxicity.  # Let's carry on with models 1 and 2 by adding another cohort:  outcomes <- '1NNN 2NTT 1NNT 1NNN' fit1 <- model1 %>% fit(outcomes) fit2 <- model2 %>% fit(outcomes)  fit1 %>% recommended_dose() #> [1] 1 fit1 %>% continue() #> [1] TRUE  fit2 %>% recommended_dose() #> [1] 1 fit2 %>% continue() #> [1] FALSE  # Model1 wants to continue - in fact it will never stop. # In contrast, model2 has seen 9 at dose 1 so, rather than suggest dose 1 # again, it suggests the trial should stop.  # For contrast, let us consider a BOIN model on the same outcomes boin_fitter <- get_boin(num_doses = length(skeleton), target = target) fit4 <- boin_fitter %>% fit(outcomes) fit4 %>% recommended_dose() #> [1] 2 fit4 %>% continue() #> [1] TRUE"},{"path":"/reference/simulate_compare.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate clinical trials for several designs using common patients. — simulate_compare","title":"Simulate clinical trials for several designs using common patients. — simulate_compare","text":"function takes list several   selector_factorys, returned   get_dfcrm, get_boin   get_three_plus_three, conducts many notional clinical   trials. simulated patients trials common across designs.   example, comparison three designs mentioned , first   simulated CRM trial uses notional patients first simulated   BOIN trial, etc. Using common patients within iterate across designs   reduces MCMC errors comparisons, method efficient   comparing designs. See Sweeting et al. full details.","code":""},{"path":"/reference/simulate_compare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate clinical trials for several designs using common patients. — simulate_compare","text":"","code":"simulate_compare(   designs,   num_sims,   true_prob_tox,   true_prob_eff = NULL,   patient_samples = NULL,   rho = NULL,   return_patient_samples = FALSE,   ... )"},{"path":"/reference/simulate_compare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate clinical trials for several designs using common patients. — simulate_compare","text":"designs list, mapping design names objects type selector_factory. num_sims integer, number trial iterations simulate. true_prob_tox numeric vector true unknown toxicity probabilities true_prob_eff numeric vector true unknown efficacy probabilities. NULL efficacy analysed. patient_samples Optional list length num_sims, element instance PatientSample subclass like CorrelatedPatientSample. objects control occurrence toxicity efficacy events patients. specifiable allow fine-grained control users. See vignette Simulation. rho Optional correlation -1 1 latent uniform variables determine toxicity efficacy events. Non-correlated events default. return_patient_samples TRUE get list patient sample objects returned patient_samples attribute retured object. ... Extra args passed onwards.","code":""},{"path":"/reference/simulate_compare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate clinical trials for several designs using common patients. — simulate_compare","text":"object type simulations_collection","code":""},{"path":"/reference/simulate_compare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate clinical trials for several designs using common patients. — simulate_compare","text":"default, dose decisions simulated trials made   cohort 3 patients. can changed providing function   sample_patient_arrivals parameter simulates arrival new   patients. new patients added existing patients   model fit set patients. function simulates   patient arrivals take single parameter data-frame one   row existing patient columns including cohort, patient, dose,   tox, time (possibly also eff weight, phase /II   time--event method used). provision data existing   patients allows patient sampling function adaptive. function   return data-frame row new patient column   time_delta, time arrival patient previous,   cohorts_of_n. See Examples. method can simulate culmination trials partly   completed. just specify outcomes already observed via   previous_outcomes parameter. simulated trial commence   outcomes seen thus far. See Examples. can specify immediate next dose specifying next_dose.   omitted, next dose calculated invoking model outcomes   seen thus far. Designs must eventually choose stop trial. designs, like 3+3,   intrinsic stopping rules. However, selectors like derived   get_dfcrm offer default stopping method. may need   append stopping behaviour selector via something like   stop_at_n stop_when_n_at_dose, etc.   safeguard simulating runaway trials never end, function   halt simulated trial 30 invocations dose-selection   decision. breach limit, specify i_like_big_trials = TRUE   function call. However, forego safety net, onus   write selectors eventually stop trial! See Examples. model fit prevailing data dose selection point.   default, final model fit simulated trial retained.   done conserve memory. high number simulated trials,   storing many model fits per trial may cause executing machine run   memory. However, can force method retain model fits   specifying return_all_fits = TRUE. See Examples.","code":""},{"path":"/reference/simulate_compare.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate clinical trials for several designs using common patients. — simulate_compare","text":"Sweeting, M., Slade, D., Jackson, D., & Brock, K. (2024). Potential outcome simulation efficient head--head comparison adaptive dose-finding designs. arXiv preprint arXiv:2402.15460","code":""},{"path":[]},{"path":"/reference/simulate_compare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate clinical trials for several designs using common patients. — simulate_compare","text":"","code":"if (FALSE) { # \\dontrun{ # Don't run on build because they exceed CRAN time limit  # In a five-dose scenario, we have assumed probabilities for Prob(tox): true_prob_tox <- c(0.05, 0.10, 0.15, 0.18, 0.45) # and Prob(eff): true_prob_eff <- c(0.40, 0.50, 0.52, 0.53, 0.53)  # Let us compare two BOIN12 variants that differ in their stopping params: designs <- list(   \"BOIN12 v1\" = get_boin12(num_doses = 5,                            phi_t = 0.35, phi_e = 0.25,                            u2 = 40, u3 = 60,                            c_t = 0.95, c_e = 0.9) %>%     stop_at_n(n = 36),   \"BOIN12 v2\" = get_boin12(num_doses = 5,                            phi_t = 0.35, phi_e = 0.25,                            u2 = 40, u3 = 60,                            c_t = 0.5, c_e = 0.5) %>%     stop_at_n(n = 36) ) # For illustration we run only 10 iterates: x <- simulate_compare(   designs,   num_sims = 10,   true_prob_tox,   true_prob_eff ) # To compare toxicity-only designs like CRM etc, we would omit true_prob_eff.  # We might be interested in the absolute dose recommendation probabilities: convergence_plot(x)  library(dplyr) library(ggplot2) # and, perhaps more importantly, how they compare: as_tibble(x) %>%   ggplot(aes(x = n, y = delta)) +   geom_point(size = 0.4) +   geom_linerange(aes(ymin = delta_l, ymax = delta_u)) +   geom_hline(yintercept = 0, linetype = \"dashed\", col = \"red\") +   facet_grid(comparison ~ dose,     labeller = labeller(       .rows = label_both,       .cols = label_both)   )  # Simulations for each design are available by name: sims <- x$`BOIN12 v1` # And the usual functions are available on the sims objects: sims %>% num_patients() sims %>% num_doses() sims %>% dose_indices() sims %>% n_at_dose() # etc # See ? simulate_trials  # As with simulate_trials, which examines one design, we also have options to # tweak the simulation process.  # By default, dose decisions are made after each cohort of 3 patients. To # override, specify an alternative function via the sample_patient_arrivals # parameter. E.g. to use cohorts of 2, we run: patient_arrivals_func <- function(current_data) cohorts_of_n(n = 2) x <- simulate_compare(   designs,   num_sims = 10,   true_prob_tox,   true_prob_eff,   sample_patient_arrivals = patient_arrivals_func )  # To simulate the culmination of trials that are partly completed, specify # the outcomes already observed via the previous_outcomes parameter. Imagine # one cohort has already been evaluated, returning outcomes 1NTN. We can # simulate the remaining part of that trial with: x <- simulate_compare(   designs,   num_sims = 10,   true_prob_tox,   true_prob_eff,   previous_outcomes = '1NTN' )  # Outcomes can be described by the above outcome string method or data-frame: previous_outcomes <- data.frame(   patient = 1:3,   cohort = c(1, 1, 1),   tox = c(0, 1, 0),   eff = c(1, 1, 0),   dose = c(1, 1, 1) ) x <- simulate_compare(   designs,   num_sims = 10,   true_prob_tox,   true_prob_eff,   previous_outcomes = previous_outcomes )  # We can specify the immediate next dose: x <- simulate_compare(   designs,   num_sims = 10,   true_prob_tox,   true_prob_eff,   next_dose = 5 )  # By default, the method will stop simulated trials after 30 dose selections. # To suppress this, specify i_like_big_trials = TRUE. However, please take # care to specify selectors that will eventually stop! Our designs above use # stop_at_n so they will not proceed ad infinitum. x <- simulate_compare(   designs,   num_sims = 10,   true_prob_tox,   true_prob_eff,   i_like_big_trials = TRUE )  # By default, only the final model fit is retained for each simulated trial. # To retain all interim model fits, specify return_all_fits = TRUE. x <- simulate_compare(   designs,   num_sims = 10,   true_prob_tox,   true_prob_eff,   return_all_fits = TRUE ) } # }"},{"path":"/reference/simulate_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate clinical trials. — simulate_trials","title":"Simulate clinical trials. — simulate_trials","text":"function takes selector_factory,   returned get_dfcrm, get_boin   get_three_plus_three, conducts many notional clinical   trials. conduct simulations learn operating characteristics   adaptive trial designs.","code":""},{"path":"/reference/simulate_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate clinical trials. — simulate_trials","text":"","code":"simulate_trials(   selector_factory,   num_sims,   true_prob_tox,   true_prob_eff = NULL,   ... )"},{"path":"/reference/simulate_trials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate clinical trials. — simulate_trials","text":"selector_factory Object type selector_factory. num_sims integer, number trial iterations simulate. true_prob_tox numeric vector true unknown toxicity probabilities true_prob_eff numeric vector true unknown efficacy probabilities. NULL efficacy analysed. ... Extra args passed onwards.","code":""},{"path":"/reference/simulate_trials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate clinical trials. — simulate_trials","text":"Object type simulations.","code":""},{"path":"/reference/simulate_trials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate clinical trials. — simulate_trials","text":"default, dose decisions simulated trials made   cohort 3 patients. can changed providing function   sample_patient_arrivals parameter simulates arrival new   patients. new patients added existing patients   model fit set patients. function simulates   patient arrivals take single parameter data-frame one   row existing patient columns including cohort, patient, dose,   tox, time (possibly also eff weight, phase /II   time--event method used). provision data existing   patients allows patient sampling function adaptive. function   return data-frame row new patient column   time_delta, time arrival patient previous,   cohorts_of_n. See Examples. method can simulate culmination trials partly   completed. just specify outcomes already observed via   previous_outcomes parameter. simulated trial commence   outcomes seen thus far. See Examples. can specify immediate next dose specifying next_dose.   omitted, next dose calculated invoking model outcomes   seen thus far. Designs must eventually choose stop trial. designs, like 3+3,   intrinsic stopping rules. However, selectors like derived   get_dfcrm offer default stopping method. may need   append stopping behaviour selector via something like   stop_at_n stop_when_n_at_dose, etc.   safeguard simulating runaway trials never end, function   halt simulated trial 30 invocations dose-selection   decision. breach limit, specify i_like_big_trials = TRUE   function call. However, forego safety net, onus   write selectors eventually stop trial! See Examples. model fit prevailing data dose selection point.   default, final model fit simulated trial retained.   done conserve memory. high number simulated trials,   storing many model fits per trial may cause executing machine run   memory. However, can force method retain model fits   specifying return_all_fits = TRUE. See Examples.","code":""},{"path":[]},{"path":"/reference/simulate_trials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate clinical trials. — simulate_trials","text":"","code":"# In a five-dose scenario, we have assumed probabilities for Prob(tox): true_prob_tox <- c(0.12, 0.27, 0.44, 0.53, 0.57)  # Simulate ten 3+3 trials: sims <- get_three_plus_three(num_doses = 5) %>%   simulate_trials(num_sims = 10, true_prob_tox = true_prob_tox) # Likewise, simulate 10 trials using a continual reassessment method: skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   simulate_trials(num_sims = 10, true_prob_tox = true_prob_tox)  # Lots of useful information is contained in the returned object: sims %>% num_patients() #>  [1] 12 12 12 12 12 12 12 12 12 12 sims %>% num_doses() #> [1] 5 sims %>% dose_indices() #> [1] 1 2 3 4 5 sims %>% n_at_dose() #> # A tibble: 10 × 5 #>      `1`   `2`   `3`   `4`   `5` #>    <int> <int> <int> <int> <int> #>  1     3     3     3     3     0 #>  2     3     6     0     3     0 #>  3     6     6     0     0     0 #>  4     3     3     3     3     0 #>  5     9     3     0     0     0 #>  6     6     6     0     0     0 #>  7     3     3     3     3     0 #>  8     3     3     3     3     0 #>  9     3     6     0     3     0 #> 10    12     0     0     0     0 sims %>% n_at_recommended_dose() #>  [1]  3  3  0  3  9  6  3  3  3 12 sims %>% tox_at_dose() #> # A tibble: 10 × 5 #>      `1`   `2`   `3`   `4`   `5` #>    <int> <int> <int> <int> <int> #>  1     0     0     0     2     0 #>  2     0     3     0     2     0 #>  3     1     0     0     0     0 #>  4     0     2     2     1     0 #>  5     1     2     0     0     0 #>  6     1     1     0     0     0 #>  7     0     0     0     2     0 #>  8     0     1     2     1     0 #>  9     0     3     0     2     0 #> 10     3     0     0     0     0 sims %>% num_tox() #>  [1] 2 5 1 5 3 2 2 4 5 3 sims %>% recommended_dose() #>  [1] 3 1 3 1 1 2 3 2 1 1 sims %>% prob_administer() #>     1     2     3     4     5  #> 0.425 0.325 0.100 0.150 0.000  sims %>% prob_recommend() #> NoDose      1      2      3      4      5  #>    0.0    0.5    0.2    0.3    0.0    0.0  sims %>% trial_duration() #>  [1]  8.487783 14.737913 14.678805 10.590806 11.573965 15.094672  9.161286 #>  [8] 10.530829 12.972661 13.029242  # By default, dose decisions are made after each cohort of 3 patients. See # Details. To override, specify an alternative function via the # sample_patient_arrivals parameter. E.g. to use cohorts of 2, we run: patient_arrivals_func <- function(current_data) cohorts_of_n(n = 2) sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   simulate_trials(num_sims = 10, true_prob_tox = true_prob_tox,     sample_patient_arrivals = patient_arrivals_func)  # To simulate the culmination of trials that are partly completed, specify # the outcomes already observed via the previous_outcomes parameter. Imagine # one cohort has already been evaluated, returning outcomes 1NTN. We can # simulate the remaining part of the trial with: sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   simulate_trials(num_sims = 10, true_prob_tox = true_prob_tox,                   previous_outcomes = '1NTN') # Outcomes can be described by the above outcome string method or data-frame:   previous_outcomes <- data.frame(     patient = 1:3,     cohort = c(1, 1, 1),     tox = c(0, 1, 0),     dose = c(1, 1, 1)   ) sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   simulate_trials(num_sims = 10, true_prob_tox = true_prob_tox,                   previous_outcomes = previous_outcomes)  # We can specify the immediate next dose: sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   simulate_trials(num_sims = 10, true_prob_tox = true_prob_tox,                   next_dose = 5)  # By default, the method will stop simulated trials after 30 dose selections. # To suppress this, specify i_like_big_trials = TRUE. However, please take # care to specify selectors that will eventually stop! sims <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 99) %>%   simulate_trials(num_sims = 1, true_prob_tox = true_prob_tox,                   i_like_big_trials = TRUE)  # By default, only the final model fit is retained for each simulated trial. # To retain all interim model fits, specify return_all_fits = TRUE. sims <- get_three_plus_three(num_doses = 5) %>%   simulate_trials(num_sims = 10, true_prob_tox = true_prob_tox,                   return_all_fits = TRUE) # Verify that there are now many analyses per trial with: sapply(sims$fits, length) #>  [1] 4 5 4 3 4 7 4 6 6 4"},{"path":"/reference/simulation_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Get function for simulating trials. — simulation_function","title":"Get function for simulating trials. — simulation_function","text":"function need called users. used internally.","code":""},{"path":"/reference/simulation_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get function for simulating trials. — simulation_function","text":"","code":"simulation_function(selector_factory)"},{"path":"/reference/simulation_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get function for simulating trials. — simulation_function","text":"selector_factory Object type selector_factory.","code":""},{"path":"/reference/simulation_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get function for simulating trials. — simulation_function","text":"function.","code":""},{"path":"/reference/simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated trials. — simulations","title":"Simulated trials. — simulations","text":"class encapsulates many notional virtual trials can simulated. recommends dose (doses), keeps track many patients treated doses, toxicity outcomes seen, whether trial advocates continuing, etc. run simulations learn operating characteristics trial design. Computationally, simulations class supports much interface selector, little . Thus, many generic functions supported - see Examples. However, compared selectors, returned objects reflect many trials instead one, e.g. num_patients(sims), returns integer vector number patients used simulated trials.","code":""},{"path":"/reference/simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated trials. — simulations","text":"","code":"simulations(fits, true_prob_tox, true_prob_eff = NULL, ...)"},{"path":"/reference/simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated trials. — simulations","text":"fits Simulated model fits, arranged list lists. true_prob_tox vector true toxicity probabilities true_prob_eff vector true efficacy probabilities, optionally NULL efficacy analysed. ... Extra args","code":""},{"path":"/reference/simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulated trials. — simulations","text":"list slots: fits containing model fits; true_prob_tox, contianing assumed true probability toxicity.","code":""},{"path":"/reference/simulations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated trials. — simulations","text":"simulations object implements following functions: num_patients num_doses dose_indices dose_strings doses_given n_at_dose tox_at_dose num_tox recommended_dose prob_administer prob_recommend trial_duration","code":""},{"path":[]},{"path":"/reference/simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated trials. — simulations","text":"","code":"# Simulate performance of the 3+3 design: true_prob_tox <- c(0.12, 0.27, 0.44, 0.53, 0.57) sims <- get_three_plus_three(num_doses = 5) %>%   simulate_trials(num_sims = 10, true_prob_tox = true_prob_tox) # The returned object has type 'simulations'. The supported interface is: sims %>% num_patients() #>  [1]  9  9  6 18  9 12  9 18  9  6 sims %>% num_doses() #> [1] 5 sims %>% dose_indices() #> [1] 1 2 3 4 5 sims %>% dose_strings() #> [1] \"1\" \"2\" \"3\" \"4\" \"5\" sims %>% n_at_dose() #> # A tibble: 10 × 5 #>      `1`   `2`   `3`   `4`   `5` #>    <int> <int> <int> <int> <int> #>  1     3     6     0     0     0 #>  2     3     3     3     0     0 #>  3     6     0     0     0     0 #>  4     6     6     3     3     0 #>  5     3     3     3     0     0 #>  6     3     3     6     0     0 #>  7     6     3     0     0     0 #>  8     3     6     3     6     0 #>  9     3     6     0     0     0 #> 10     6     0     0     0     0 sims %>% tox_at_dose() #> # A tibble: 10 × 5 #>      `1`   `2`   `3`   `4`   `5` #>    <int> <int> <int> <int> <int> #>  1     0     2     0     0     0 #>  2     0     0     2     0     0 #>  3     2     0     0     0     0 #>  4     1     1     0     3     0 #>  5     0     0     3     0     0 #>  6     0     0     3     0     0 #>  7     1     2     0     0     0 #>  8     0     1     0     2     0 #>  9     0     2     0     0     0 #> 10     3     0     0     0     0 sims %>% num_tox() #>  [1] 2 2 2 5 3 3 3 3 2 3 sims %>% recommended_dose() #>  [1]  1  2 NA  3  2  2  1  3  1 NA sims %>% prob_administer() #>          1          2          3          4          5  #> 0.40000000 0.34285714 0.17142857 0.08571429 0.00000000  sims %>% prob_recommend() #> NoDose      1      2      3      4      5  #>    0.2    0.3    0.3    0.2    0.0    0.0  sims %>% trial_duration() #>  [1] 14.408821  3.488594  8.571498 14.619680  8.483619 16.221354  7.956283 #>  [8] 16.064913 10.241924  6.853798  # Access the list of model fits for the ith simulated trial using: i <- 1 sims$fits[[i]] #> [[1]] #> [[1]]$.depth #> [1] 4 #>  #> [[1]]$time #> [1] 14.40882 #>  #> [[1]]$fit #> Patient-level data: #> # A tibble: 9 × 5 #>   Patient Cohort  Dose   Tox Weight #>     <int>  <int> <int> <int>  <dbl> #> 1       1      1     1     0      1 #> 2       2      1     1     0      1 #> 3       3      1     1     0      1 #> 4       4      2     2     0      1 #> 5       5      2     2     1      1 #> 6       6      2     2     0      1 #> 7       7      3     2     1      1 #> 8       8      3     2     0      1 #> 9       9      3     2     0      1 #>  #> Dose-level data: #> # A tibble: 6 × 8 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0            0                 0               0 TRUE       #> 2 1          0     3            0                NA              NA TRUE       #> 3 2          2     6            0.333            NA              NA FALSE      #> 4 3          0     0          NaN                NA              NA FALSE      #> 5 4          0     0          NaN                NA              NA FALSE      #> 6 5          0     0          NaN                NA              NA FALSE      #> # ℹ 1 more variable: recommended <lgl> #>  #> The model advocates stopping and recommending dose 1. #>  #>  # and the jth model fit for the ith simulated trial using: j <- 1 sims$fits[[i]][[j]] #> $.depth #> [1] 4 #>  #> $time #> [1] 14.40882 #>  #> $fit #> Patient-level data: #> # A tibble: 9 × 5 #>   Patient Cohort  Dose   Tox Weight #>     <int>  <int> <int> <int>  <dbl> #> 1       1      1     1     0      1 #> 2       2      1     1     0      1 #> 3       3      1     1     0      1 #> 4       4      2     2     0      1 #> 5       5      2     2     1      1 #> 6       6      2     2     0      1 #> 7       7      3     2     1      1 #> 8       8      3     2     0      1 #> 9       9      3     2     0      1 #>  #> Dose-level data: #> # A tibble: 6 × 8 #>   dose     tox     n empiric_tox_rate mean_prob_tox median_prob_tox admissible #>   <ord>  <dbl> <dbl>            <dbl>         <dbl>           <dbl> <lgl>      #> 1 NoDose     0     0            0                 0               0 TRUE       #> 2 1          0     3            0                NA              NA TRUE       #> 3 2          2     6            0.333            NA              NA FALSE      #> 4 3          0     0          NaN                NA              NA FALSE      #> 5 4          0     0          NaN                NA              NA FALSE      #> 6 5          0     0          NaN                NA              NA FALSE      #> # ℹ 1 more variable: recommended <lgl> #>  #> The model advocates stopping and recommending dose 1. #>  # and so on."},{"path":"/reference/simulations_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an instance of type simulations_collection — simulations_collection","title":"Make an instance of type simulations_collection — simulations_collection","text":"object can cast tibble as_tibble generate useful pairwise comparisons probability recommending dose pair designs investigated. See as_tibble.simulations_collection description.","code":""},{"path":"/reference/simulations_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an instance of type simulations_collection — simulations_collection","text":"","code":"simulations_collection(sim_map)"},{"path":"/reference/simulations_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an instance of type simulations_collection — simulations_collection","text":"sim_map list, character -> simulations object","code":""},{"path":"/reference/simulations_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an instance of type simulations_collection — simulations_collection","text":"object class simulations_collection, inheriting list","code":""},{"path":"/reference/simulations_collection.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make an instance of type simulations_collection — simulations_collection","text":"Sweeting, M., Slade, D., Jackson, D., & Brock, K. (2024). Potential outcome simulation efficient head--head comparison adaptive dose-finding designs. arXiv preprint arXiv:2402.15460","code":""},{"path":"/reference/spread_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread the information in dose_finding_paths object to a wide data.frame format. — spread_paths","title":"Spread the information in dose_finding_paths object to a wide data.frame format. — spread_paths","text":"Spread information dose_finding_paths object wide data.frame format.","code":""},{"path":"/reference/spread_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread the information in dose_finding_paths object to a wide data.frame format. — spread_paths","text":"","code":"spread_paths(df = NULL, dose_finding_paths = NULL, max_depth = NULL)"},{"path":"/reference/spread_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread the information in dose_finding_paths object to a wide data.frame format. — spread_paths","text":"df Optional data.frame like returned as_tibble(dose_finding_paths). Columns .depth, .node, .parent required. columns spread suffix reflecting depth. dose_finding_paths Optional instance dose_finding_paths. Required `df` null. max_depth integer, maximum depth paths traverse.","code":""},{"path":"/reference/spread_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread the information in dose_finding_paths object to a wide data.frame format. — spread_paths","text":"data.frame","code":""},{"path":"/reference/spread_paths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spread the information in dose_finding_paths object to a wide data.frame format. — spread_paths","text":"","code":"if (FALSE) { # \\dontrun{ # Calculate paths for the first two cohorts of three patients a CRM trial skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 cohort_sizes <- c(3, 3) paths <- get_dfcrm(skeleton = skeleton, target = target) %>%   get_dose_paths(cohort_sizes = cohort_sizes) } # }"},{"path":"/reference/stack_sims_vert.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack simulations_collection results vertically — stack_sims_vert","title":"Stack simulations_collection results vertically — stack_sims_vert","text":"Stack simulations_collection results vertically","code":""},{"path":"/reference/stack_sims_vert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack simulations_collection results vertically — stack_sims_vert","text":"","code":"stack_sims_vert(sim_map, target_dose = NULL, alpha = 0.05)"},{"path":"/reference/stack_sims_vert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack simulations_collection results vertically — stack_sims_vert","text":"sim_map object type simulations_collection target_dose optional integer vector, dose interest. doses analysed omitted, default. alpha confidence level asymptotic normal confidence intervals. default value 0.05 get 95 percent confidence intervals.","code":""},{"path":"/reference/stack_sims_vert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack simulations_collection results vertically — stack_sims_vert","text":"data.frame","code":""},{"path":"/reference/stack_sims_vert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack simulations_collection results vertically — stack_sims_vert","text":"","code":"# In a five-dose scenario, we have assumed probabilities for Prob(tox): true_prob_tox <- c(0.05, 0.10, 0.15, 0.18, 0.45) # and Prob(eff): true_prob_eff <- c(0.40, 0.50, 0.52, 0.53, 0.53)  # Let us compare two BOIN12 variants that differ in their stopping params: designs <- list(   \"BOIN12 v1\" = get_boin12(num_doses = 5,                            phi_t = 0.35, phi_e = 0.25,                            u2 = 40, u3 = 60,                            c_t = 0.95, c_e = 0.9) %>%     stop_at_n(n = 36),   \"BOIN12 v2\" = get_boin12(num_doses = 5,                            phi_t = 0.35, phi_e = 0.25,                            u2 = 40, u3 = 60,                            c_t = 0.5, c_e = 0.5) %>%     stop_at_n(n = 36) ) # For illustration we run only 10 iterates: x <- simulate_compare(   designs,   num_sims = 10,   true_prob_tox,   true_prob_eff ) #> Running BOIN12 v1  #> Running BOIN12 v2  stack_sims_vert(x) #> # A tibble: 100 × 9 #>     dose hit       r     n design    .rate    .se      .l    .u #>    <int> <lgl> <int> <int> <chr>     <dbl>  <dbl>   <dbl> <dbl> #>  1     1 TRUE      1     1 BOIN12 v1 1     0       1      1     #>  2     1 FALSE     1     2 BOIN12 v1 0.5   0.354  -0.193  1.19  #>  3     1 FALSE     1     3 BOIN12 v1 0.333 0.272  -0.200  0.867 #>  4     1 FALSE     1     4 BOIN12 v1 0.25  0.217  -0.174  0.674 #>  5     1 FALSE     1     5 BOIN12 v1 0.2   0.179  -0.151  0.551 #>  6     1 FALSE     1     6 BOIN12 v1 0.167 0.152  -0.132  0.465 #>  7     1 FALSE     1     7 BOIN12 v1 0.143 0.132  -0.116  0.402 #>  8     1 FALSE     1     8 BOIN12 v1 0.125 0.117  -0.104  0.354 #>  9     1 FALSE     1     9 BOIN12 v1 0.111 0.105  -0.0942 0.316 #> 10     1 FALSE     1    10 BOIN12 v1 0.1   0.0949 -0.0859 0.286 #> # ℹ 90 more rows"},{"path":"/reference/stick_on_num_tox.html","id":null,"dir":"Reference","previous_headings":"","what":"Stay at the current dose when num_tox of num_patients have experienced tox — stick_on_num_tox","title":"Stay at the current dose when num_tox of num_patients have experienced tox — stick_on_num_tox","text":"method continues current dose outcomes observed exactly num_doses toxicity events num_patients patients.","code":""},{"path":"/reference/stick_on_num_tox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stay at the current dose when num_tox of num_patients have experienced tox — stick_on_num_tox","text":"","code":"stick_on_num_tox(parent_selector_factory, num_tox, num_patients)"},{"path":"/reference/stick_on_num_tox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stay at the current dose when num_tox of num_patients have experienced tox — stick_on_num_tox","text":"parent_selector_factory Object type selector_factory. num_tox Stick current dose many toxicities seen... num_patients ...many patients","code":""},{"path":"/reference/stick_on_num_tox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stay at the current dose when num_tox of num_patients have experienced tox — stick_on_num_tox","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/stick_on_num_tox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stay at the current dose when num_tox of num_patients have experienced tox — stick_on_num_tox","text":"","code":"target <- 0.25 # Where a design might choose to deescalate: model1 <- get_mtpi2(num_doses = 5, target = target, epsilon1 = 0.05,                     epsilon2 = 0.05, exclusion_certainty = 0.95) model1 %>% fit('1NNN 2NTN') %>% recommended_dose() #> [1] 1 # you can alter that behaviour when a precise number of toxicities have been # seen in a precise number of patients: model2 <- get_mtpi2(num_doses = 5, target = target, epsilon1 = 0.05,                     epsilon2 = 0.05, exclusion_certainty = 0.95) %>%             stick_on_num_tox(num_tox = 1, num_patients = 3) model2 %>% fit('1NNN 2NTN') %>% recommended_dose() #> [1] 2 # The current dose is recommended instead."},{"path":"/reference/stop_at_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop when there are n patients in total. — stop_at_n","title":"Stop when there are n patients in total. — stop_at_n","text":"function adds restriction stop trial n patients evaluated. adding together number patients treated doses stopping total exceeds n. Dose selectors designed daisy-chained together achieve different behaviours. class **greedy** selector, meaning prioritises behaviour behaviour selectors chain. , advocate stopping condition met, even selectors chain advocate keep going. can interpreted overriding selector. allows decision stop executed soon warranted. aware though, selectors can placed class override stopping behaviour. See Examples.","code":""},{"path":"/reference/stop_at_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop when there are n patients in total. — stop_at_n","text":"","code":"stop_at_n(parent_selector_factory, n)"},{"path":"/reference/stop_at_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop when there are n patients in total. — stop_at_n","text":"parent_selector_factory Object type selector_factory. n Stop many patients.","code":""},{"path":"/reference/stop_at_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop when there are n patients in total. — stop_at_n","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/stop_at_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop when there are n patients in total. — stop_at_n","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25  # Create CRM model that will stop when 15 patients are evaluated: model1 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 15)  # With 12 patients, this trial should not stop: fit1 <- model1 %>% fit('1NNN 2NTN 2TNN 2NNN') fit1 %>% recommended_dose() #> [1] 2 fit1 %>% continue() #> [1] TRUE  # With 15 patients, this trial should stop: fit2 <- model1 %>% fit('1NNN 2NTN 2TNN 2NNN 2NTT') fit2 %>% recommended_dose() #> [1] 2 fit2 %>% continue() #> [1] FALSE  # The stopping behaviour can be overruled by the order of selectors. # In model2, demanding 9 at recommended dose will trump stopping at 12: model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_at_n(n = 12) %>%   demand_n_at_dose(dose = 'recommended', n = 9)  # In model3, stopping at 12 will trump demanding 9 at recommended dose: model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   demand_n_at_dose(dose = 'recommended', n = 9) %>%   stop_at_n(n = 12)  # This model will continue because 9 have not been seen at recommended dose. fit3 <- model2 %>% fit('1NNN 2NNN 2NNN 3NNN') fit3 %>% recommended_dose() #> [1] 5 fit3 %>% continue() #> [1] TRUE  # This model will stop because 12 have been seen. fit4 <- model3 %>% fit('1NNN 2NNN 2NNN 3NNN') fit4 %>% recommended_dose() #> [1] 5 fit4 %>% continue() #> [1] FALSE  # With enough observations though, both models will advise stopping because # both conditions have been met: fit5 <- model2 %>% fit('1NNN 2NNN 2NNN 5NNN 5NNN 5NNN') fit5 %>% recommended_dose() #> [1] 5 fit5 %>% continue() #> [1] FALSE  fit6 <- model3 %>% fit('1NNN 2NNN 2NNN 5NNN 5NNN 5NNN') fit6 %>% recommended_dose() #> [1] 5 fit6 %>% continue() #> [1] FALSE"},{"path":"/reference/stop_when_n_at_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop when there are n patients at a dose. — stop_when_n_at_dose","title":"Stop when there are n patients at a dose. — stop_when_n_at_dose","text":"method stops dose-finding trial n patients dose. can stop rule triggered recommended dose, particular dose, dose.","code":""},{"path":"/reference/stop_when_n_at_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop when there are n patients at a dose. — stop_when_n_at_dose","text":"","code":"stop_when_n_at_dose(parent_selector_factory, n, dose)"},{"path":"/reference/stop_when_n_at_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop when there are n patients at a dose. — stop_when_n_at_dose","text":"parent_selector_factory Object type selector_factory. n Stop n dose. dose '' stop n dose; 'recommended' stop n recommended dose; integer stop n particular dose-level.","code":""},{"path":"/reference/stop_when_n_at_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop when there are n patients at a dose. — stop_when_n_at_dose","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/stop_when_n_at_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop when there are n patients at a dose. — stop_when_n_at_dose","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25  # This model will stop when 12 are seen at any dose: model1 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_n_at_dose(n = 12, dose = 'any')  # This model fit will not stop: model1 %>% fit('1NNN 2NTN 2TNN 2NNN') %>% continue() #> [1] TRUE # But this model fit will stop: model1 %>% fit('1NNN 2NTN 2TNN 2NNN 2NTT') %>% continue() #> [1] FALSE  # This model will stop when 12 are seen at the recommended dose: model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_n_at_dose(n = 12, dose = 'recommended')  # This model fit will not stop: fit2 <- model2 %>% fit('1NNN 2NTN 2TNN 2NNN') fit2 %>% recommended_dose() #> [1] 2 fit2 %>% continue() #> [1] TRUE # But this model fit will stop: fit3 <- model2 %>% fit('1NNN 2NTN 2TNN 2NNN 2NNT') fit3 %>% recommended_dose() #> [1] 2 fit3 %>% continue() #> [1] FALSE"},{"path":"/reference/stop_when_too_toxic.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop trial and recommend no dose when a dose is too toxic. — stop_when_too_toxic","title":"Stop trial and recommend no dose when a dose is too toxic. — stop_when_too_toxic","text":"method stops dose-finding trial recommends dose sufficient probabilistic confidence reached rate toxicity dose exceeds threshold. words, stops likely dose toxic. can stop rule triggered recommended dose, particular dose, dose. See Details.","code":""},{"path":"/reference/stop_when_too_toxic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop trial and recommend no dose when a dose is too toxic. — stop_when_too_toxic","text":"","code":"stop_when_too_toxic(parent_selector_factory, dose, tox_threshold, confidence)"},{"path":"/reference/stop_when_too_toxic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop trial and recommend no dose when a dose is too toxic. — stop_when_too_toxic","text":"parent_selector_factory Object type selector_factory. dose '' stop dose toxic; 'recommended' stop recommended dose toxic; integer stop particular dose-level toxic. tox_threshold interested toxicity probabilities greater threshold. confidence Stop much total probability mass supporting toxicity rate exceeds threshold.","code":""},{"path":"/reference/stop_when_too_toxic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop trial and recommend no dose when a dose is too toxic. — stop_when_too_toxic","text":"object type selector_factory can fit   dose-finding model outcomes.","code":""},{"path":"/reference/stop_when_too_toxic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stop trial and recommend no dose when a dose is too toxic. — stop_when_too_toxic","text":"method calculating probability mass toxicity rates ultimately determined dose-finding model used attendant inferential mechanism. instance, crm function dfcrm package calculates posterior expected mean variance slope parameter CRM model. use MCMC draw samples posterior distribution. Thus, perform inference posterior probability toxicity, package assumes dfcrm slope parameter follows normal distribution mean variance calculated dfcrm. contrast, stan_crm function trialr package needs assumption samples posterior parameter distribution uses samples infer posterior probability toxicity dose, dependent chosen model dose-toxicity curve.","code":""},{"path":"/reference/stop_when_too_toxic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop trial and recommend no dose when a dose is too toxic. — stop_when_too_toxic","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25  # We compare a CRM model without a toxicity stopping rule to one with it: model1 <- get_dfcrm(skeleton = skeleton, target = target) model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 'any', tox_threshold = 0.5, confidence = 0.7)  outcomes <- '1NNN 2NNN 3NNT 3NNN 3TNT 2NNN' fit1 <- model1 %>% fit(outcomes) fit2 <- model2 %>% fit(outcomes)  # Naturally the first does not advocate stopping: fit1 %>% recommended_dose() #> [1] 3 fit1 %>% continue() #> [1] TRUE  # However, after the material toxicity at dose 3, ithe rule is fired: fit2 %>% recommended_dose() #> [1] NA fit2 %>% continue() #> [1] FALSE # To verify the requirement to stop, let's calculate the probability that the # toxicity rate exceeds 50% fit2 %>% prob_tox_exceeds(0.5) #> [1] 4.393912e-07 2.464851e-05 8.098000e-03 1.458586e-01 8.025805e-01"},{"path":"/reference/stop_when_tox_ci_covered.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop when uncertainty interval of prob tox is covered. — stop_when_tox_ci_covered","title":"Stop when uncertainty interval of prob tox is covered. — stop_when_tox_ci_covered","text":"method stops dose-finding trial symmetric uncertainty interval probability toxicity falls within range. allows trials stopped sufficient precision pobability toxicity achieved. See Details.","code":""},{"path":"/reference/stop_when_tox_ci_covered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop when uncertainty interval of prob tox is covered. — stop_when_tox_ci_covered","text":"","code":"stop_when_tox_ci_covered(   parent_selector_factory,   dose,   lower,   upper,   width = 0.9 )"},{"path":"/reference/stop_when_tox_ci_covered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop when uncertainty interval of prob tox is covered. — stop_when_tox_ci_covered","text":"parent_selector_factory Object type selector_factory. dose '' stop interval dose covered; 'recommended' stop interval recommended dose covered ; integer stop interval particular dose-level covered. lower Stop lower interval bound exceeds value upper Stop upper interval bound less value width Width uncertainty interval. Default 0.9, .e. range 5th 95th percentiles.","code":""},{"path":"/reference/stop_when_tox_ci_covered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop when uncertainty interval of prob tox is covered. — stop_when_tox_ci_covered","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/stop_when_tox_ci_covered.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stop when uncertainty interval of prob tox is covered. — stop_when_tox_ci_covered","text":"method calculating probability mass toxicity rates ultimately determined dose-finding model used attendant inferential mechanism. instance, crm function dfcrm package calculates posterior expected mean variance slope parameter CRM model. use MCMC draw samples posterior distribution. Thus, perform inference posterior probability toxicity, package assumes dfcrm slope parameter follows normal distribution mean variance calculated dfcrm. contrast, stan_crm function trialr package needs assumption samples posterior parameter distribution uses samples infer posterior probability toxicity dose, dependent chosen model dose-toxicity curve.","code":""},{"path":"/reference/stop_when_tox_ci_covered.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stop when uncertainty interval of prob tox is covered. — stop_when_tox_ci_covered","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25  # We compare a CRM model without this stopping rule: model1 <- get_dfcrm(skeleton = skeleton, target = target) # To two with it, the first demanding a relatively tight CI: model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_tox_ci_covered(dose = 'recommended', lower = 0.15, upper = 0.35) # and the second demanding a relatively loose CI: model3 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_tox_ci_covered(dose = 'recommended', lower = 0.05, upper = 0.45)  outcomes <- '1NNN 2NNN 3NNT 3NNN 3TNT 2NNN' fit1 <- model1 %>% fit(outcomes) fit2 <- model2 %>% fit(outcomes) fit3 <- model3 %>% fit(outcomes)  # Naturally the first does not advocate stopping: fit1 %>% recommended_dose() #> [1] 3 fit1 %>% continue() #> [1] TRUE  # The second does not advocate stopping either: fit2 %>% recommended_dose() #> [1] 3 fit2 %>% continue() #> [1] TRUE # This is because the CI is too wide: fit2 %>% prob_tox_quantile(p = 0.05) #> [1] 0.005596063 0.018576910 0.090744056 0.204717651 0.413022708 fit2 %>% prob_tox_quantile(p = 0.95) #> [1] 0.1509501 0.2337941 0.4168693 0.5608330 0.7243968  # However, the third design advocates stopping because the CI at the # recommended dose is covered: fit3 %>% recommended_dose() #> [1] 3 fit3 %>% continue() #> [1] FALSE # To verify the veracity, inspect the quantiles: fit3 %>% prob_tox_quantile(p = 0.05) #> [1] 0.005596063 0.018576910 0.090744056 0.204717651 0.413022708 fit3 %>% prob_tox_quantile(p = 0.95) #> [1] 0.1509501 0.2337941 0.4168693 0.5608330 0.7243968"},{"path":"/reference/supports_sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Does this selector support sampling of outcomes? — supports_sampling","title":"Does this selector support sampling of outcomes? — supports_sampling","text":"Learn whether selector supports sampling outcomes. instance, possible get posterior samples probability toxicity dose? true, prob_tox_samples return data-frame samples.","code":""},{"path":"/reference/supports_sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does this selector support sampling of outcomes? — supports_sampling","text":"","code":"supports_sampling(x, ...)"},{"path":"/reference/supports_sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does this selector support sampling of outcomes? — supports_sampling","text":"x Object type selector ... arguments passed methods","code":""},{"path":"/reference/supports_sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does this selector support sampling of outcomes? — supports_sampling","text":"logical","code":""},{"path":"/reference/supports_sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does this selector support sampling of outcomes? — supports_sampling","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% supports_sampling() #> [1] TRUE"},{"path":"/reference/three_plus_three.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the 3+3 model to some outcomes. — three_plus_three","title":"Fit the 3+3 model to some outcomes. — three_plus_three","text":"Fit 3+3 model outcomes.","code":""},{"path":"/reference/three_plus_three.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the 3+3 model to some outcomes. — three_plus_three","text":"","code":"three_plus_three(   outcomes,   num_doses,   allow_deescalate = FALSE,   strict_mode = TRUE )"},{"path":"/reference/three_plus_three.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the 3+3 model to some outcomes. — three_plus_three","text":"outcomes Outcomes observed. See parse_phase1_outcomes. num_doses Number doses investigation. allow_deescalate TRUE allow de-escalation, described Korn et al. Default FALSE. strict_mode TRUE raise errors detected 3+3 algorithm followed.","code":""},{"path":"/reference/three_plus_three.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the 3+3 model to some outcomes. — three_plus_three","text":"lits containing recommended_dose logical value continue saying whether trial continue.","code":""},{"path":"/reference/three_plus_three.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fit the 3+3 model to some outcomes. — three_plus_three","text":"Storer . Design Analysis Phase Clinical Trials. Biometrics. 1989;45(3):925-937. doi:10.2307/2531693 Korn EL, Midthune D, Chen TT, Rubinstein LV, Christian MC, Simon RM. comparison two phase trial designs. Statistics Medicine. 1994;13(18):1799-1806. doi:10.1002/sim.4780131802","code":""},{"path":"/reference/three_plus_three.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the 3+3 model to some outcomes. — three_plus_three","text":"","code":"three_plus_three('2NNN 3NNT', num_doses = 7) #> $recommended_dose #> [1] 3 #>  #> $continue #> [1] TRUE #>  #> attr(,\"class\") #> [1] \"three_plus_three_fit\""},{"path":"/reference/tox.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary toxicity outcomes. — tox","title":"Binary toxicity outcomes. — tox","text":"Get vector binary toxicity outcomes evaluated patients.","code":""},{"path":"/reference/tox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary toxicity outcomes. — tox","text":"","code":"tox(x, ...)"},{"path":"/reference/tox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary toxicity outcomes. — tox","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/tox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary toxicity outcomes. — tox","text":"integer vector","code":""},{"path":"/reference/tox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary toxicity outcomes. — tox","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% tox() #> [1] 0 0 0 0 1 0"},{"path":"/reference/tox_at_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of toxicities seen at each dose. — tox_at_dose","title":"Number of toxicities seen at each dose. — tox_at_dose","text":"Get number toxicities seen dose investigation.","code":""},{"path":"/reference/tox_at_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of toxicities seen at each dose. — tox_at_dose","text":"","code":"tox_at_dose(x, ...)"},{"path":"/reference/tox_at_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of toxicities seen at each dose. — tox_at_dose","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/tox_at_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of toxicities seen at each dose. — tox_at_dose","text":"integer vector","code":""},{"path":"/reference/tox_at_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of toxicities seen at each dose. — tox_at_dose","text":"","code":"# CRM example skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 outcomes <- '1NNN 2NTN' fit <- get_dfcrm(skeleton = skeleton, target = target) %>% fit(outcomes) fit %>% tox_at_dose() #> [1] 0 1 0 0 0"},{"path":"/reference/tox_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Toxicity rate limit — tox_limit","title":"Toxicity rate limit — tox_limit","text":"Get maximum permissible toxicity rate, supported. NULL .","code":""},{"path":"/reference/tox_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toxicity rate limit — tox_limit","text":"","code":"tox_limit(x, ...)"},{"path":"/reference/tox_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toxicity rate limit — tox_limit","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/tox_limit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Toxicity rate limit — tox_limit","text":"numeric","code":""},{"path":"/reference/tox_limit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toxicity rate limit — tox_limit","text":"","code":"efftox_priors <- trialr::efftox_priors p <- efftox_priors(alpha_mean = -7.9593, alpha_sd = 3.5487,                    beta_mean = 1.5482, beta_sd = 3.5018,                    gamma_mean = 0.7367, gamma_sd = 2.5423,                    zeta_mean = 3.4181, zeta_sd = 2.4406,                    eta_mean = 0, eta_sd = 0.2,                    psi_mean = 0, psi_sd = 1) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) model <- get_trialr_efftox(real_doses = real_doses,                            efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,                            p_e = 0.1, p_t = 0.1,                            eff0 = 0.5, tox1 = 0.65,                            eff_star = 0.7, tox_star = 0.25,                            priors = p, iter = 1000, chains = 1, seed = 2020) x <- model %>% fit('1N 2E 3B') tox_limit(x) #> [1] 0.3"},{"path":"/reference/tox_target.html","id":null,"dir":"Reference","previous_headings":"","what":"Target toxicity rate — tox_target","title":"Target toxicity rate — tox_target","text":"Get target toxicity rate, supported. NULL .","code":""},{"path":"/reference/tox_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Target toxicity rate — tox_target","text":"","code":"tox_target(x, ...)"},{"path":"/reference/tox_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Target toxicity rate — tox_target","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/tox_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Target toxicity rate — tox_target","text":"numeric","code":""},{"path":"/reference/tox_target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Target toxicity rate — tox_target","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% tox_target() #> [1] 0.25"},{"path":"/reference/trial_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Duration of trials. — trial_duration","title":"Duration of trials. — trial_duration","text":"Get length time trials take recruit patients.","code":""},{"path":"/reference/trial_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duration of trials. — trial_duration","text":"","code":"trial_duration(x, ...)"},{"path":"/reference/trial_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duration of trials. — trial_duration","text":"x Object type simulations. ... arguments passed methods","code":""},{"path":"/reference/trial_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duration of trials. — trial_duration","text":"vector numerical times","code":""},{"path":"/reference/trial_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duration of trials. — trial_duration","text":"","code":"true_prob_tox <- c(0.12, 0.27, 0.44, 0.53, 0.57) sims <- get_three_plus_three(num_doses = 5) %>%   simulate_trials(num_sims = 50, true_prob_tox = true_prob_tox) sims %>% trial_duration #>  [1] 10.404086  4.227281 13.100535 10.882804  4.525295 12.808892 11.208264 #>  [8]  8.725439 13.476934 10.775757  5.518654 15.919463 20.428244  8.582684 #> [15]  7.685246  6.943945 13.752761  7.185711 23.452561  2.762147 18.506245 #> [22]  9.480204 13.364694  4.291953  9.414567  2.963298  8.521997 10.073196 #> [29]  2.698001 12.293870 14.355047  1.624640  7.708667  4.142992  6.450473 #> [36]  4.333914 10.247811  2.386275 12.035586  7.783271  7.198992 17.240859 #> [43] 12.682162 10.470924  4.360188  3.314582 13.396749 10.311636 12.229459 #> [50]  7.987451"},{"path":"/reference/try_rescue_dose.html","id":null,"dir":"Reference","previous_headings":"","what":"Demand that a rescue dose is tried before stopping is permitted. — try_rescue_dose","title":"Demand that a rescue dose is tried before stopping is permitted. — try_rescue_dose","text":"method continues dose-finding trial safety dose given n patients. condition met, delegates dose selelcting stopping responsibility parent dose selector, whatever might . class greedy meets needs asking selectors higher chain want. Thus, different behaviours may achieved nesting dose selectors different orders. See examples.","code":""},{"path":"/reference/try_rescue_dose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demand that a rescue dose is tried before stopping is permitted. — try_rescue_dose","text":"","code":"try_rescue_dose(parent_selector_factory, n, dose)"},{"path":"/reference/try_rescue_dose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demand that a rescue dose is tried before stopping is permitted. — try_rescue_dose","text":"parent_selector_factory Object type selector_factory. n Continue least n dose. dose index rescue dose-level try extremis.","code":""},{"path":"/reference/try_rescue_dose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Demand that a rescue dose is tried before stopping is permitted. — try_rescue_dose","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/try_rescue_dose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demand that a rescue dose is tried before stopping is permitted. — try_rescue_dose","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25  # This model will demand the lowest dose is tried in at least two patients # before the trial is stopped for excess toxicity model1 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.8) %>%   try_rescue_dose(dose = 1, n = 2)  # In contrast, this model will stop for excess toxicity without trying dose 1 model2 <- get_dfcrm(skeleton = skeleton, target = target) %>%   stop_when_too_toxic(dose = 1, tox_threshold = 0.35, confidence = 0.8)  # For non-toxic outcomes, both designs will continue at sensible doses: fit1 <- model1 %>% fit('2NNN') fit1 %>% recommended_dose() #> [1] 4 fit1 %>% continue() #> [1] TRUE  fit2 <- model2 %>% fit('2NNN') fit2 %>% recommended_dose() #> [1] 4 fit2 %>% continue() #> [1] TRUE  # For toxic outcomes, the design 1 will use dose 1 before stopping is allowed fit1 <- model1 %>% fit('2TTT') fit1 %>% recommended_dose() #> [1] 1 fit1 %>% continue() #> [1] TRUE  # For toxic outcomes, however, design 2 will stop despite dose 1 being # untested: fit2 <- model2 %>% fit('2TTT') fit2 %>% recommended_dose() #> [1] NA fit2 %>% continue() #> [1] FALSE  # After dose 1 is given the requisite number of times, dose recommendation # and stopping revert to being determined by the underlying dose selector: fit1 <- model1 %>% fit('2TTT 1T') fit1 %>% recommended_dose() #> [1] 1 fit1 %>% continue() #> [1] TRUE  fit1 <- model1 %>% fit('2TTT 1TT') fit1 %>% recommended_dose() #> [1] NA fit1 %>% continue() #> [1] FALSE"},{"path":"/reference/unadmit_untested.html","id":null,"dir":"Reference","previous_headings":"","what":"Make untested and unrecommended doses inadmissible. — unadmit_untested","title":"Make untested and unrecommended doses inadmissible. — unadmit_untested","text":"method sets untested unrecommended doses inadmissible, irrespective view parent selector.","code":""},{"path":"/reference/unadmit_untested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make untested and unrecommended doses inadmissible. — unadmit_untested","text":"","code":"unadmit_untested(parent_selector_factory)"},{"path":"/reference/unadmit_untested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make untested and unrecommended doses inadmissible. — unadmit_untested","text":"parent_selector_factory Object type selector_factory.","code":""},{"path":"/reference/unadmit_untested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make untested and unrecommended doses inadmissible. — unadmit_untested","text":"object type selector_factory can fit dose-finding model outcomes.","code":""},{"path":"/reference/unadmit_untested.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make untested and unrecommended doses inadmissible. — unadmit_untested","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model1 <- get_dfcrm(skeleton = skeleton, target = target) %>%   dont_skip_doses() %>%   unadmit_untested() fit1 <- model1 %>% fit('1NNN')  # Dose 1 has been tested. Dose 2 is recommended. All other doses are not # admissible: fit1 %>% dose_admissible() #> [1]  TRUE  TRUE FALSE FALSE FALSE"},{"path":"/reference/utility.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility score of each dose. — utility","title":"Utility score of each dose. — utility","text":"Get derived utility score dose investigation. models, particularly phase /II models efficacy-toxicity designs, specify algorithms calculate utility. utility algorithm specified design, function return vector NAs.","code":""},{"path":"/reference/utility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility score of each dose. — utility","text":"","code":"utility(x, ...)"},{"path":"/reference/utility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility score of each dose. — utility","text":"x Object class selector ... arguments passed methods","code":""},{"path":"/reference/utility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility score of each dose. — utility","text":"numerical vector","code":""},{"path":"/reference/utility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility score of each dose. — utility","text":"","code":"efftox_priors <- trialr::efftox_priors p <- efftox_priors(alpha_mean = -7.9593, alpha_sd = 3.5487,                    beta_mean = 1.5482, beta_sd = 3.5018,                    gamma_mean = 0.7367, gamma_sd = 2.5423,                    zeta_mean = 3.4181, zeta_sd = 2.4406,                    eta_mean = 0, eta_sd = 0.2,                    psi_mean = 0, psi_sd = 1) real_doses = c(1.0, 2.0, 4.0, 6.6, 10.0) model <- get_trialr_efftox(real_doses = real_doses,                            efficacy_hurdle = 0.5, toxicity_hurdle = 0.3,                            p_e = 0.1, p_t = 0.1,                            eff0 = 0.5, tox1 = 0.65,                            eff_star = 0.7, tox_star = 0.25,                            priors = p, iter = 1000, chains = 1, seed = 2020) x <- model %>% fit('1N 2E 3B') utility(x) #> [1] -0.63514815  0.05696294  0.25503674 -0.04707898 -0.19604509"},{"path":"/reference/weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Outcome weights. — weight","title":"Outcome weights. — weight","text":"Get vector weights attached outcomes evaluated patients.","code":""},{"path":"/reference/weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Outcome weights. — weight","text":"","code":"weight(x, ...)"},{"path":"/reference/weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Outcome weights. — weight","text":"x Object type selector. ... Extra args passed onwards.","code":""},{"path":"/reference/weight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Outcome weights. — weight","text":"numerical vector","code":""},{"path":"/reference/weight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Outcome weights. — weight","text":"","code":"skeleton <- c(0.05, 0.1, 0.25, 0.4, 0.6) target <- 0.25 model <- get_dfcrm(skeleton = skeleton, target = target) fit <- model %>% fit('1NNN 2NTN') fit %>% weight() #> [1] 1 1 1 1 1 1"},{"path":"/news/index.html","id":"escalation-023","dir":"Changelog","previous_headings":"","what":"escalation 0.2.3","title":"escalation 0.2.3","text":"Added three new vignettes phase /II designs, TITE-designs, combination designs. Added BOIN-COMB MTD selector Added tests docs Fixed bugs typos","code":""},{"path":"/news/index.html","id":"escalation-022","dir":"Changelog","previous_headings":"","what":"escalation 0.2.2","title":"escalation 0.2.2","text":"Added boin12_rds() tabulate desirability scores BOIN12 trial.","code":""},{"path":"/news/index.html","id":"escalation-021","dir":"Changelog","previous_headings":"","what":"escalation 0.2.1","title":"escalation 0.2.1","text":"Added unadmit_untested(), selector explicitly mark untested non-recomended dose inadmissible via dose_admissible().","code":""},{"path":"/news/index.html","id":"escalation-020","dir":"Changelog","previous_headings":"","what":"escalation 0.2.0","title":"escalation 0.2.0","text":"Added support treatment combinations allowing dose become vector indices rather scalar. Added BOIN COMB design treatment combinations.","code":""},{"path":"/news/index.html","id":"escalation-0110","dir":"Changelog","previous_headings":"","what":"escalation 0.1.10","title":"escalation 0.1.10","text":"CRAN release: 2024-06-27 Added TITE methods","code":""},{"path":"/news/index.html","id":"escalation-019","dir":"Changelog","previous_headings":"","what":"escalation 0.1.9","title":"escalation 0.1.9","text":"CRAN release: 2024-05-22 Fixed inheritance problems as_tibble, summary print dose_selector generics Added many tests dose_selector consistency.","code":""},{"path":"/news/index.html","id":"escalation-018","dir":"Changelog","previous_headings":"","what":"escalation 0.1.8","title":"escalation 0.1.8","text":"CRAN release: 2024-02-23 Made tests faster CRAN","code":""},{"path":"/news/index.html","id":"escalation-017","dir":"Changelog","previous_headings":"","what":"escalation 0.1.7","title":"escalation 0.1.7","text":"Added ability import export PatientSamples Split simulation vignette","code":""},{"path":"/news/index.html","id":"escalation-016","dir":"Changelog","previous_headings":"","what":"escalation 0.1.6","title":"escalation 0.1.6","text":"Implement efficient simulation comparison method Sweeting et al. simulate_compare() Implement BOIN12 design Add MTD / OBD selectors TPI, mTPI, mTPI2 BOIN12 final dose choice end trial","code":""},{"path":"/news/index.html","id":"escalation-015","dir":"Changelog","previous_headings":"","what":"escalation 0.1.5","title":"escalation 0.1.5","text":"CRAN release: 2023-05-29 Add mTPI2 dose-finding method Fixed bugs","code":""},{"path":"/news/index.html","id":"escalation-014","dir":"Changelog","previous_headings":"","what":"escalation 0.1.4","title":"escalation 0.1.4","text":"CRAN release: 2020-10-18 Added Neuenschwander, Branson & Sponer’s method phase . Added Ji et al.’s TPI & mTI methods phase . Added Thall & Cook’s EffTox method phase /II. Added Wages & Tait’s method phase /II.","code":""},{"path":"/news/index.html","id":"escalation-013","dir":"Changelog","previous_headings":"","what":"escalation 0.1.3","title":"escalation 0.1.3","text":"CRAN release: 2020-05-12 Mainly small changes comply dplyr v1.0. simulations crystallised_dose_paths given summary method NOTE squash","code":""},{"path":"/news/index.html","id":"escalation-012","dir":"Changelog","previous_headings":"","what":"escalation 0.1.2","title":"escalation 0.1.2","text":"CRAN release: 2020-04-14 Methods simulation calculating dose-paths added. bit general selector interface. Everything new tests, tests old stuff.","code":""},{"path":"/news/index.html","id":"escalation-011","dir":"Changelog","previous_headings":"","what":"escalation 0.1.1","title":"escalation 0.1.1","text":"CRAN release: 2020-03-08 Initial release. dfcrm, BOIN, 3+3 models supported. several objects included facilitate stopping different events. class fixed escalation plan included, sometimes used CRM.","code":""}]
